/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={70:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=r(710),i=n(r(425)),a=r(287);class o{constructor(){this.mutex=Promise.resolve()}lock(){return new Promise((e=>{this.mutex=this.mutex.then((()=>new Promise(e)))}))}}class c{constructor(e,t,r){this.interceptor=e,this.lastRequest=Date.now(),this.requestTimeout=r??2e4,this.requestsPerSecond=t??2.5,this.bufferPerRequest=1e3/this.requestsPerSecond,this.mutex=new o}async getDefaultUserAgent(){return""}async schedule(e,t){const r=await this.mutex.lock();try{Date.now()-this.lastRequest<=this.bufferPerRequest&&(console.log(`rate limit hit, sleeping for ${this.bufferPerRequest}`),await(n=this.bufferPerRequest,new Promise((e=>setTimeout(e,n))))),this.lastRequest=Date.now()}finally{r()}var n;this.interceptor&&(e=await this.interceptor.interceptRequest(e));let s=e.headers??{},o="";for(let t of e.cookies??[])o+=`${t.name}=${t.value};`;s.cookie=o;let c=e.data;"object"==typeof c&&s["content-type"]?.includes("application/x-www-form-urlencoded")&&(c="",Object.keys(e.data).forEach((t=>{c.length>0&&(c+="&"),c+=`${t}=${e.data[t]}`})));let l=await(0,i.default)(`${e.url}${e.param??""}`,{method:e.method,headers:s,data:c,timeout:this.requestTimeout||0,responseType:"arraybuffer"}),u={rawData:App.createRawData({byteArray:l.data}),data:a.Buffer.from(l.data,"binary").toString(),status:l.status,headers:l.headers,request:e};return this.interceptor&&(u=await this.interceptor.interceptResponse(u)),u}}s.PaperbackPolyfills.createRequestManager=function(e){return new c(e.interceptor,e.requestsPerSecond,e.requestTimeout)}},156:function(e,t,r){"use strict";var n,s=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var s=Object.getOwnPropertyDescriptor(t,r);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,s)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||(n=function(e){return n=Object.getOwnPropertyNames||function(e){var t=[];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[t.length]=r);return t},n(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r=n(e),a=0;a<r.length;a++)"default"!==r[a]&&s(t,e,r[a]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0});const o=r(710);r(550),r(70),r(631),r(302);const c=a(r(844));globalThis.App=new Proxy(o.PaperbackPolyfills,{get:(e,t)=>e[t]?e[t]:"string"==typeof t&&t.startsWith("create")?e=>e:void 0}),globalThis.cheerio=c},251:(e,t)=>{t.read=function(e,t,r,n,s){var i,a,o=8*s-n-1,c=(1<<o)-1,l=c>>1,u=-7,h=r?s-1:0,d=r?-1:1,p=e[t+h];for(h+=d,i=p&(1<<-u)-1,p>>=-u,u+=o;u>0;i=256*i+e[t+h],h+=d,u-=8);for(a=i&(1<<-u)-1,i>>=-u,u+=n;u>0;a=256*a+e[t+h],h+=d,u-=8);if(0===i)i=1-l;else{if(i===c)return a?NaN:1/0*(p?-1:1);a+=Math.pow(2,n),i-=l}return(p?-1:1)*a*Math.pow(2,i-n)},t.write=function(e,t,r,n,s,i){var a,o,c,l=8*i-s-1,u=(1<<l)-1,h=u>>1,d=23===s?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:i-1,f=n?1:-1,E=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(o=isNaN(t)?1:0,a=u):(a=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-a))<1&&(a--,c*=2),(t+=a+h>=1?d/c:d*Math.pow(2,1-h))*c>=2&&(a++,c/=2),a+h>=u?(o=0,a=u):a+h>=1?(o=(t*c-1)*Math.pow(2,s),a+=h):(o=t*Math.pow(2,h-1)*Math.pow(2,s),a=0));s>=8;e[r+p]=255&o,p+=f,o/=256,s-=8);for(a=a<<s|o,l+=s;l>0;e[r+p]=255&a,p+=f,a/=256,l-=8);e[r+p-f]|=128*E}},264:e=>{e.exports={trueFunc:function(){return!0},falseFunc:function(){return!1}}},287:(e,t,r)=>{"use strict";const n=r(526),s=r(251),i="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;t.Buffer=c,t.SlowBuffer=function(e){return+e!=e&&(e=0),c.alloc(+e)},t.INSPECT_MAX_BYTES=50;const a=2147483647;function o(e){if(e>a)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,c.prototype),t}function c(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return h(e)}return l(e,t,r)}function l(e,t,r){if("string"==typeof e)return function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!c.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const r=0|E(e,t);let n=o(r);const s=n.write(e,t);return s!==r&&(n=n.slice(0,s)),n}(e,t);if(ArrayBuffer.isView(e))return function(e){if(X(e,Uint8Array)){const t=new Uint8Array(e);return p(t.buffer,t.byteOffset,t.byteLength)}return d(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(X(e,ArrayBuffer)||e&&X(e.buffer,ArrayBuffer))return p(e,t,r);if("undefined"!=typeof SharedArrayBuffer&&(X(e,SharedArrayBuffer)||e&&X(e.buffer,SharedArrayBuffer)))return p(e,t,r);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const n=e.valueOf&&e.valueOf();if(null!=n&&n!==e)return c.from(n,t,r);const s=function(e){if(c.isBuffer(e)){const t=0|f(e.length),r=o(t);return 0===r.length||e.copy(r,0,0,t),r}return void 0!==e.length?"number"!=typeof e.length||$(e.length)?o(0):d(e):"Buffer"===e.type&&Array.isArray(e.data)?d(e.data):void 0}(e);if(s)return s;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return c.from(e[Symbol.toPrimitive]("string"),t,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function u(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function h(e){return u(e),o(e<0?0:0|f(e))}function d(e){const t=e.length<0?0:0|f(e.length),r=o(t);for(let n=0;n<t;n+=1)r[n]=255&e[n];return r}function p(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');let n;return n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),Object.setPrototypeOf(n,c.prototype),n}function f(e){if(e>=a)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a.toString(16)+" bytes");return 0|e}function E(e,t){if(c.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||X(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const r=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let s=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return W(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return Q(e).length;default:if(s)return n?-1:W(e).length;t=(""+t).toLowerCase(),s=!0}}function m(e,t,r){let n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return L(this,t,r);case"utf8":case"utf-8":return y(this,t,r);case"ascii":return O(this,t,r);case"latin1":case"binary":return R(this,t,r);case"base64":return C(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function T(e,t,r){const n=e[t];e[t]=e[r],e[r]=n}function A(e,t,r,n,s){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),$(r=+r)&&(r=s?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(s)return-1;r=e.length-1}else if(r<0){if(!s)return-1;r=0}if("string"==typeof t&&(t=c.from(t,n)),c.isBuffer(t))return 0===t.length?-1:g(e,t,r,n,s);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?s?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):g(e,[t],r,n,s);throw new TypeError("val must be string, number or Buffer")}function g(e,t,r,n,s){let i,a=1,o=e.length,c=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;a=2,o/=2,c/=2,r/=2}function l(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(s){let n=-1;for(i=r;i<o;i++)if(l(e,i)===l(t,-1===n?0:i-n)){if(-1===n&&(n=i),i-n+1===c)return n*a}else-1!==n&&(i-=i-n),n=-1}else for(r+c>o&&(r=o-c),i=r;i>=0;i--){let r=!0;for(let n=0;n<c;n++)if(l(e,i+n)!==l(t,n)){r=!1;break}if(r)return i}return-1}function _(e,t,r,n){r=Number(r)||0;const s=e.length-r;n?(n=Number(n))>s&&(n=s):n=s;const i=t.length;let a;for(n>i/2&&(n=i/2),a=0;a<n;++a){const n=parseInt(t.substr(2*a,2),16);if($(n))return a;e[r+a]=n}return a}function b(e,t,r,n){return K(W(t,e.length-r),e,r,n)}function S(e,t,r,n){return K(function(e){const t=[];for(let r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function N(e,t,r,n){return K(Q(t),e,r,n)}function I(e,t,r,n){return K(function(e,t){let r,n,s;const i=[];for(let a=0;a<e.length&&!((t-=2)<0);++a)r=e.charCodeAt(a),n=r>>8,s=r%256,i.push(s),i.push(n);return i}(t,e.length-r),e,r,n)}function C(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function y(e,t,r){r=Math.min(e.length,r);const n=[];let s=t;for(;s<r;){const t=e[s];let i=null,a=t>239?4:t>223?3:t>191?2:1;if(s+a<=r){let r,n,o,c;switch(a){case 1:t<128&&(i=t);break;case 2:r=e[s+1],128==(192&r)&&(c=(31&t)<<6|63&r,c>127&&(i=c));break;case 3:r=e[s+1],n=e[s+2],128==(192&r)&&128==(192&n)&&(c=(15&t)<<12|(63&r)<<6|63&n,c>2047&&(c<55296||c>57343)&&(i=c));break;case 4:r=e[s+1],n=e[s+2],o=e[s+3],128==(192&r)&&128==(192&n)&&128==(192&o)&&(c=(15&t)<<18|(63&r)<<12|(63&n)<<6|63&o,c>65535&&c<1114112&&(i=c))}}null===i?(i=65533,a=1):i>65535&&(i-=65536,n.push(i>>>10&1023|55296),i=56320|1023&i),n.push(i),s+=a}return function(e){const t=e.length;if(t<=D)return String.fromCharCode.apply(String,e);let r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=D));return r}(n)}t.kMaxLength=a,c.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),c.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(c.prototype,"parent",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.buffer}}),Object.defineProperty(c.prototype,"offset",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.byteOffset}}),c.poolSize=8192,c.from=function(e,t,r){return l(e,t,r)},Object.setPrototypeOf(c.prototype,Uint8Array.prototype),Object.setPrototypeOf(c,Uint8Array),c.alloc=function(e,t,r){return function(e,t,r){return u(e),e<=0?o(e):void 0!==t?"string"==typeof r?o(e).fill(t,r):o(e).fill(t):o(e)}(e,t,r)},c.allocUnsafe=function(e){return h(e)},c.allocUnsafeSlow=function(e){return h(e)},c.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==c.prototype},c.compare=function(e,t){if(X(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),X(t,Uint8Array)&&(t=c.from(t,t.offset,t.byteLength)),!c.isBuffer(e)||!c.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let r=e.length,n=t.length;for(let s=0,i=Math.min(r,n);s<i;++s)if(e[s]!==t[s]){r=e[s],n=t[s];break}return r<n?-1:n<r?1:0},c.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return c.alloc(0);let r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;const n=c.allocUnsafe(t);let s=0;for(r=0;r<e.length;++r){let t=e[r];if(X(t,Uint8Array))s+t.length>n.length?(c.isBuffer(t)||(t=c.from(t)),t.copy(n,s)):Uint8Array.prototype.set.call(n,t,s);else{if(!c.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(n,s)}s+=t.length}return n},c.byteLength=E,c.prototype._isBuffer=!0,c.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)T(this,t,t+1);return this},c.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)T(this,t,t+3),T(this,t+1,t+2);return this},c.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)T(this,t,t+7),T(this,t+1,t+6),T(this,t+2,t+5),T(this,t+3,t+4);return this},c.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?y(this,0,e):m.apply(this,arguments)},c.prototype.toLocaleString=c.prototype.toString,c.prototype.equals=function(e){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===c.compare(this,e)},c.prototype.inspect=function(){let e="";const r=t.INSPECT_MAX_BYTES;return e=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(e+=" ... "),"<Buffer "+e+">"},i&&(c.prototype[i]=c.prototype.inspect),c.prototype.compare=function(e,t,r,n,s){if(X(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),!c.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===s&&(s=this.length),t<0||r>e.length||n<0||s>this.length)throw new RangeError("out of range index");if(n>=s&&t>=r)return 0;if(n>=s)return-1;if(t>=r)return 1;if(this===e)return 0;let i=(s>>>=0)-(n>>>=0),a=(r>>>=0)-(t>>>=0);const o=Math.min(i,a),l=this.slice(n,s),u=e.slice(t,r);for(let e=0;e<o;++e)if(l[e]!==u[e]){i=l[e],a=u[e];break}return i<a?-1:a<i?1:0},c.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},c.prototype.indexOf=function(e,t,r){return A(this,e,t,r,!0)},c.prototype.lastIndexOf=function(e,t,r){return A(this,e,t,r,!1)},c.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}const s=this.length-t;if((void 0===r||r>s)&&(r=s),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let i=!1;for(;;)switch(n){case"hex":return _(this,e,t,r);case"utf8":case"utf-8":return b(this,e,t,r);case"ascii":case"latin1":case"binary":return S(this,e,t,r);case"base64":return N(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,e,t,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const D=4096;function O(e,t,r){let n="";r=Math.min(e.length,r);for(let s=t;s<r;++s)n+=String.fromCharCode(127&e[s]);return n}function R(e,t,r){let n="";r=Math.min(e.length,r);for(let s=t;s<r;++s)n+=String.fromCharCode(e[s]);return n}function L(e,t,r){const n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);let s="";for(let n=t;n<r;++n)s+=z[e[n]];return s}function k(e,t,r){const n=e.slice(t,r);let s="";for(let e=0;e<n.length-1;e+=2)s+=String.fromCharCode(n[e]+256*n[e+1]);return s}function w(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function P(e,t,r,n,s,i){if(!c.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>s||t<i)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function M(e,t,r,n,s){q(t,n,s,e,r,7);let i=Number(t&BigInt(4294967295));e[r++]=i,i>>=8,e[r++]=i,i>>=8,e[r++]=i,i>>=8,e[r++]=i;let a=Number(t>>BigInt(32)&BigInt(4294967295));return e[r++]=a,a>>=8,e[r++]=a,a>>=8,e[r++]=a,a>>=8,e[r++]=a,r}function B(e,t,r,n,s){q(t,n,s,e,r,7);let i=Number(t&BigInt(4294967295));e[r+7]=i,i>>=8,e[r+6]=i,i>>=8,e[r+5]=i,i>>=8,e[r+4]=i;let a=Number(t>>BigInt(32)&BigInt(4294967295));return e[r+3]=a,a>>=8,e[r+2]=a,a>>=8,e[r+1]=a,a>>=8,e[r]=a,r+8}function v(e,t,r,n,s,i){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function x(e,t,r,n,i){return t=+t,r>>>=0,i||v(e,0,r,4),s.write(e,t,r,n,23,4),r+4}function U(e,t,r,n,i){return t=+t,r>>>=0,i||v(e,0,r,8),s.write(e,t,r,n,52,8),r+8}c.prototype.slice=function(e,t){const r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);const n=this.subarray(e,t);return Object.setPrototypeOf(n,c.prototype),n},c.prototype.readUintLE=c.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||w(e,t,this.length);let n=this[e],s=1,i=0;for(;++i<t&&(s*=256);)n+=this[e+i]*s;return n},c.prototype.readUintBE=c.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||w(e,t,this.length);let n=this[e+--t],s=1;for(;t>0&&(s*=256);)n+=this[e+--t]*s;return n},c.prototype.readUint8=c.prototype.readUInt8=function(e,t){return e>>>=0,t||w(e,1,this.length),this[e]},c.prototype.readUint16LE=c.prototype.readUInt16LE=function(e,t){return e>>>=0,t||w(e,2,this.length),this[e]|this[e+1]<<8},c.prototype.readUint16BE=c.prototype.readUInt16BE=function(e,t){return e>>>=0,t||w(e,2,this.length),this[e]<<8|this[e+1]},c.prototype.readUint32LE=c.prototype.readUInt32LE=function(e,t){return e>>>=0,t||w(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},c.prototype.readUint32BE=c.prototype.readUInt32BE=function(e,t){return e>>>=0,t||w(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},c.prototype.readBigUInt64LE=J((function(e){Y(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||V(e,this.length-8);const n=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,s=this[++e]+256*this[++e]+65536*this[++e]+r*2**24;return BigInt(n)+(BigInt(s)<<BigInt(32))})),c.prototype.readBigUInt64BE=J((function(e){Y(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||V(e,this.length-8);const n=t*2**24+65536*this[++e]+256*this[++e]+this[++e],s=this[++e]*2**24+65536*this[++e]+256*this[++e]+r;return(BigInt(n)<<BigInt(32))+BigInt(s)})),c.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||w(e,t,this.length);let n=this[e],s=1,i=0;for(;++i<t&&(s*=256);)n+=this[e+i]*s;return s*=128,n>=s&&(n-=Math.pow(2,8*t)),n},c.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||w(e,t,this.length);let n=t,s=1,i=this[e+--n];for(;n>0&&(s*=256);)i+=this[e+--n]*s;return s*=128,i>=s&&(i-=Math.pow(2,8*t)),i},c.prototype.readInt8=function(e,t){return e>>>=0,t||w(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},c.prototype.readInt16LE=function(e,t){e>>>=0,t||w(e,2,this.length);const r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt16BE=function(e,t){e>>>=0,t||w(e,2,this.length);const r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt32LE=function(e,t){return e>>>=0,t||w(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},c.prototype.readInt32BE=function(e,t){return e>>>=0,t||w(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},c.prototype.readBigInt64LE=J((function(e){Y(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||V(e,this.length-8);const n=this[e+4]+256*this[e+5]+65536*this[e+6]+(r<<24);return(BigInt(n)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),c.prototype.readBigInt64BE=J((function(e){Y(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||V(e,this.length-8);const n=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(n)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+r)})),c.prototype.readFloatLE=function(e,t){return e>>>=0,t||w(e,4,this.length),s.read(this,e,!0,23,4)},c.prototype.readFloatBE=function(e,t){return e>>>=0,t||w(e,4,this.length),s.read(this,e,!1,23,4)},c.prototype.readDoubleLE=function(e,t){return e>>>=0,t||w(e,8,this.length),s.read(this,e,!0,52,8)},c.prototype.readDoubleBE=function(e,t){return e>>>=0,t||w(e,8,this.length),s.read(this,e,!1,52,8)},c.prototype.writeUintLE=c.prototype.writeUIntLE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||P(this,e,t,r,Math.pow(2,8*r)-1,0);let s=1,i=0;for(this[t]=255&e;++i<r&&(s*=256);)this[t+i]=e/s&255;return t+r},c.prototype.writeUintBE=c.prototype.writeUIntBE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||P(this,e,t,r,Math.pow(2,8*r)-1,0);let s=r-1,i=1;for(this[t+s]=255&e;--s>=0&&(i*=256);)this[t+s]=e/i&255;return t+r},c.prototype.writeUint8=c.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||P(this,e,t,1,255,0),this[t]=255&e,t+1},c.prototype.writeUint16LE=c.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||P(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},c.prototype.writeUint16BE=c.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||P(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},c.prototype.writeUint32LE=c.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||P(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},c.prototype.writeUint32BE=c.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||P(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},c.prototype.writeBigUInt64LE=J((function(e,t=0){return M(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeBigUInt64BE=J((function(e,t=0){return B(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);P(this,e,t,r,n-1,-n)}let s=0,i=1,a=0;for(this[t]=255&e;++s<r&&(i*=256);)e<0&&0===a&&0!==this[t+s-1]&&(a=1),this[t+s]=(e/i|0)-a&255;return t+r},c.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);P(this,e,t,r,n-1,-n)}let s=r-1,i=1,a=0;for(this[t+s]=255&e;--s>=0&&(i*=256);)e<0&&0===a&&0!==this[t+s+1]&&(a=1),this[t+s]=(e/i|0)-a&255;return t+r},c.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||P(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},c.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||P(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},c.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||P(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},c.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||P(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},c.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||P(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},c.prototype.writeBigInt64LE=J((function(e,t=0){return M(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeBigInt64BE=J((function(e,t=0){return B(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeFloatLE=function(e,t,r){return x(this,e,t,!0,r)},c.prototype.writeFloatBE=function(e,t,r){return x(this,e,t,!1,r)},c.prototype.writeDoubleLE=function(e,t,r){return U(this,e,t,!0,r)},c.prototype.writeDoubleBE=function(e,t,r){return U(this,e,t,!1,r)},c.prototype.copy=function(e,t,r,n){if(!c.isBuffer(e))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);const s=n-r;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,r,n):Uint8Array.prototype.set.call(e,this.subarray(r,n),t),s},c.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!c.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===e.length){const t=e.charCodeAt(0);("utf8"===n&&t<128||"latin1"===n)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;let s;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(s=t;s<r;++s)this[s]=e;else{const i=c.isBuffer(e)?e:c.from(e,n),a=i.length;if(0===a)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(s=0;s<r-t;++s)this[s+t]=i[s%a]}return this};const F={};function H(e,t,r){F[e]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function G(e){let t="",r=e.length;const n="-"===e[0]?1:0;for(;r>=n+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function q(e,t,r,n,s,i){if(e>r||e<t){const n="bigint"==typeof t?"n":"";let s;throw s=i>3?0===t||t===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(i+1)}${n}`:`>= -(2${n} ** ${8*(i+1)-1}${n}) and < 2 ** ${8*(i+1)-1}${n}`:`>= ${t}${n} and <= ${r}${n}`,new F.ERR_OUT_OF_RANGE("value",s,e)}!function(e,t,r){Y(t,"offset"),void 0!==e[t]&&void 0!==e[t+r]||V(t,e.length-(r+1))}(n,s,i)}function Y(e,t){if("number"!=typeof e)throw new F.ERR_INVALID_ARG_TYPE(t,"number",e)}function V(e,t,r){if(Math.floor(e)!==e)throw Y(e,r),new F.ERR_OUT_OF_RANGE(r||"offset","an integer",e);if(t<0)throw new F.ERR_BUFFER_OUT_OF_BOUNDS;throw new F.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${t}`,e)}H("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),H("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),H("ERR_OUT_OF_RANGE",(function(e,t,r){let n=`The value of "${e}" is out of range.`,s=r;return Number.isInteger(r)&&Math.abs(r)>2**32?s=G(String(r)):"bigint"==typeof r&&(s=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(s=G(s)),s+="n"),n+=` It must be ${t}. Received ${s}`,n}),RangeError);const j=/[^+/0-9A-Za-z-_]/g;function W(e,t){let r;t=t||1/0;const n=e.length;let s=null;const i=[];for(let a=0;a<n;++a){if(r=e.charCodeAt(a),r>55295&&r<57344){if(!s){if(r>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(a+1===n){(t-=3)>-1&&i.push(239,191,189);continue}s=r;continue}if(r<56320){(t-=3)>-1&&i.push(239,191,189),s=r;continue}r=65536+(s-55296<<10|r-56320)}else s&&(t-=3)>-1&&i.push(239,191,189);if(s=null,r<128){if((t-=1)<0)break;i.push(r)}else if(r<2048){if((t-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function Q(e){return n.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(j,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function K(e,t,r,n){let s;for(s=0;s<n&&!(s+r>=t.length||s>=e.length);++s)t[s+r]=e[s];return s}function X(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function $(e){return e!=e}const z=function(){const e="0123456789abcdef",t=new Array(256);for(let r=0;r<16;++r){const n=16*r;for(let s=0;s<16;++s)t[n+s]=e[r]+e[s]}return t}();function J(e){return"undefined"==typeof BigInt?Z:e}function Z(){throw new Error("BigInt not supported")}},302:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bindingMap=void 0;const n=r(710);function s(e,r){"function"==typeof r?(console.log(`Registering binding ${e} to function ${r.name}`),t.bindingMap[e]=r,console.log(`Successfully saved binding?: ${e in t.bindingMap}`)):(console.log(`Registering DUIBinding ${e}.get and ${e}.set`),t.bindingMap[`${e}.get`]=r.get,t.bindingMap[`${e}.set`]=r.set,console.log(`Successfully saved binding?: ${`${e}.get`in t.bindingMap}`))}async function i(e){switch(e.type){case"DUIButton":return await async function(e){let t=e;return s(t.id,t.onTap),{...t}}(e);case"DUINavigationButton":return await async function(e){let t=e,r=await async function(e){let t=e,r=await t.sections(),n=await Promise.all(r.map((async e=>await a(e))));return{type:t.type,sections:n,hasSubmit:"onSubmit"in t}}(t.form);return"onSubmit"in t.form&&s(t.id,t.form.onSubmit),{type:t.type,id:t.id,label:t.label,form:r}}(e);case"DUISelect":return await async function(e){let t=e,r={};for await(const e of t.options)r[e]=await t.labelResolver(e);return s(t.id,t.value),{...t,labels:r}}(e);case"DUIInputField":case"DUISecureInputField":case"DUISwitch":case"DUIStepper":return await async function(e){let t=e;return s(t.id,t.value),{...t}}(e);case"DUIOAuthButton":return await async function(e){let t=e;return s(t.id,t.successHandler),{...t}}(e);default:return e}}async function a(e){let t=e,r=await t.rows(),n=await Promise.all(r.map((async e=>await i(e))));return{type:"DUISection",id:t.id,header:t.header,footer:t.footer,isHidden:t.isHidden,rows:n}}t.bindingMap={},n.PaperbackPolyfills.createDUISection=function(e){return{type:"DUISection",_rows:e.rows,...e}},n.PaperbackPolyfills.createDUIForm=function(e){return{type:"DUIForm",...e}},n.PaperbackPolyfills.createDUIButton=function(e){return{type:"DUIButton",...e}},n.PaperbackPolyfills.createDUISelect=function(e){return{type:"DUISelect",...e}},n.PaperbackPolyfills.createDUIInputField=function(e){return{type:"DUIInputField",...e}},n.PaperbackPolyfills.createDUISecureInputField=function(e){return{type:"DUISecureInputField",...e}},n.PaperbackPolyfills.createDUINavigationButton=function(e){return{type:"DUINavigationButton",...e}},n.PaperbackPolyfills.createDUISwitch=function(e){return{type:"DUISwitch",...e}},n.PaperbackPolyfills.createDUIStepper=function(e){return{type:"DUIStepper",...e}},n.PaperbackPolyfills.createDUILabel=function(e){return{type:"DUILabel",...e}},n.PaperbackPolyfills.createDUIOAuthButton=function(e){return{type:"DUIOAuthButton",...e}},n.PaperbackPolyfills.createDUIMultilineLabel=function(e){return{type:"DUIMultilineLabel",...e}},n.PaperbackPolyfills.createDUIHeader=function(e){return{type:"DUIHeader",...e}},globalThis.processSourceMenu=async function(e){let t=await(e.getSourceMenu?.());if(void 0!==t)return await a(t);throw Error("No menu")},globalThis.callBinding=async function(e,...r){if(e in t.bindingMap){let n=t.bindingMap[e];return await n(...r)}console.log(`Binding ${e} not found`)}},407:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},425:(e,t,r)=>{"use strict";function n(e,t){return function(){return e.apply(t,arguments)}}const{toString:s}=Object.prototype,{getPrototypeOf:i}=Object,{iterator:a,toStringTag:o}=Symbol,c=(l=Object.create(null),e=>{const t=s.call(e);return l[t]||(l[t]=t.slice(8,-1).toLowerCase())});var l;const u=e=>(e=e.toLowerCase(),t=>c(t)===e),h=e=>t=>typeof t===e,{isArray:d}=Array,p=h("undefined"),f=u("ArrayBuffer"),E=h("string"),m=h("function"),T=h("number"),A=e=>null!==e&&"object"==typeof e,g=e=>{if("object"!==c(e))return!1;const t=i(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||o in e||a in e)},_=u("Date"),b=u("File"),S=u("Blob"),N=u("FileList"),I=u("URLSearchParams"),[C,y,D,O]=["ReadableStream","Request","Response","Headers"].map(u);function R(e,t,{allOwnKeys:r=!1}={}){if(null==e)return;let n,s;if("object"!=typeof e&&(e=[e]),d(e))for(n=0,s=e.length;n<s;n++)t.call(null,e[n],n,e);else{const s=r?Object.getOwnPropertyNames(e):Object.keys(e),i=s.length;let a;for(n=0;n<i;n++)a=s[n],t.call(null,e[a],a,e)}}function L(e,t){t=t.toLowerCase();const r=Object.keys(e);let n,s=r.length;for(;s-- >0;)if(n=r[s],t===n.toLowerCase())return n;return null}const k="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:r.g,w=e=>!p(e)&&e!==k,P=(M="undefined"!=typeof Uint8Array&&i(Uint8Array),e=>M&&e instanceof M);var M;const B=u("HTMLFormElement"),v=(({hasOwnProperty:e})=>(t,r)=>e.call(t,r))(Object.prototype),x=u("RegExp"),U=(e,t)=>{const r=Object.getOwnPropertyDescriptors(e),n={};R(r,((r,s)=>{let i;!1!==(i=t(r,s,e))&&(n[s]=i||r)})),Object.defineProperties(e,n)},F=u("AsyncFunction"),H=(G="function"==typeof setImmediate,q=m(k.postMessage),G?setImmediate:q?(Y=`axios@${Math.random()}`,V=[],k.addEventListener("message",(({source:e,data:t})=>{e===k&&t===Y&&V.length&&V.shift()()}),!1),e=>{V.push(e),k.postMessage(Y,"*")}):e=>setTimeout(e));var G,q,Y,V;const j="undefined"!=typeof queueMicrotask?queueMicrotask.bind(k):"undefined"!=typeof process&&process.nextTick||H;var W={isArray:d,isArrayBuffer:f,isBuffer:function(e){return null!==e&&!p(e)&&null!==e.constructor&&!p(e.constructor)&&m(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||m(e.append)&&("formdata"===(t=c(e))||"object"===t&&m(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&f(e.buffer),t},isString:E,isNumber:T,isBoolean:e=>!0===e||!1===e,isObject:A,isPlainObject:g,isReadableStream:C,isRequest:y,isResponse:D,isHeaders:O,isUndefined:p,isDate:_,isFile:b,isBlob:S,isRegExp:x,isFunction:m,isStream:e=>A(e)&&m(e.pipe),isURLSearchParams:I,isTypedArray:P,isFileList:N,forEach:R,merge:function e(){const{caseless:t}=w(this)&&this||{},r={},n=(n,s)=>{const i=t&&L(r,s)||s;g(r[i])&&g(n)?r[i]=e(r[i],n):g(n)?r[i]=e({},n):d(n)?r[i]=n.slice():r[i]=n};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&R(arguments[e],n);return r},extend:(e,t,r,{allOwnKeys:s}={})=>(R(t,((t,s)=>{r&&m(t)?e[s]=n(t,r):e[s]=t}),{allOwnKeys:s}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,r,n)=>{e.prototype=Object.create(t.prototype,n),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),r&&Object.assign(e.prototype,r)},toFlatObject:(e,t,r,n)=>{let s,a,o;const c={};if(t=t||{},null==e)return t;do{for(s=Object.getOwnPropertyNames(e),a=s.length;a-- >0;)o=s[a],n&&!n(o,e,t)||c[o]||(t[o]=e[o],c[o]=!0);e=!1!==r&&i(e)}while(e&&(!r||r(e,t))&&e!==Object.prototype);return t},kindOf:c,kindOfTest:u,endsWith:(e,t,r)=>{e=String(e),(void 0===r||r>e.length)&&(r=e.length),r-=t.length;const n=e.indexOf(t,r);return-1!==n&&n===r},toArray:e=>{if(!e)return null;if(d(e))return e;let t=e.length;if(!T(t))return null;const r=new Array(t);for(;t-- >0;)r[t]=e[t];return r},forEachEntry:(e,t)=>{const r=(e&&e[a]).call(e);let n;for(;(n=r.next())&&!n.done;){const r=n.value;t.call(e,r[0],r[1])}},matchAll:(e,t)=>{let r;const n=[];for(;null!==(r=e.exec(t));)n.push(r);return n},isHTMLForm:B,hasOwnProperty:v,hasOwnProp:v,reduceDescriptors:U,freezeMethods:e=>{U(e,((t,r)=>{if(m(e)&&-1!==["arguments","caller","callee"].indexOf(r))return!1;const n=e[r];m(n)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+r+"'")}))}))},toObjectSet:(e,t)=>{const r={},n=e=>{e.forEach((e=>{r[e]=!0}))};return d(e)?n(e):n(String(e).split(t)),r},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,r){return t.toUpperCase()+r})),noop:()=>{},toFiniteNumber:(e,t)=>null!=e&&Number.isFinite(e=+e)?e:t,findKey:L,global:k,isContextDefined:w,isSpecCompliantForm:function(e){return!!(e&&m(e.append)&&"FormData"===e[o]&&e[a])},toJSONObject:e=>{const t=new Array(10),r=(e,n)=>{if(A(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[n]=e;const s=d(e)?[]:{};return R(e,((e,t)=>{const i=r(e,n+1);!p(i)&&(s[t]=i)})),t[n]=void 0,s}}return e};return r(e,0)},isAsyncFn:F,isThenable:e=>e&&(A(e)||m(e))&&m(e.then)&&m(e.catch),setImmediate:H,asap:j,isIterable:e=>null!=e&&m(e[a])};function Q(e,t,r,n,s){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),r&&(this.config=r),n&&(this.request=n),s&&(this.response=s,this.status=s.status?s.status:null)}W.inherits(Q,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:W.toJSONObject(this.config),code:this.code,status:this.status}}});const K=Q.prototype,X={};function $(e){return W.isPlainObject(e)||W.isArray(e)}function z(e){return W.endsWith(e,"[]")?e.slice(0,-2):e}function J(e,t,r){return e?e.concat(t).map((function(e,t){return e=z(e),!r&&t?"["+e+"]":e})).join(r?".":""):t}["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{X[e]={value:e}})),Object.defineProperties(Q,X),Object.defineProperty(K,"isAxiosError",{value:!0}),Q.from=(e,t,r,n,s,i)=>{const a=Object.create(K);return W.toFlatObject(e,a,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),Q.call(a,e.message,t,r,n,s),a.cause=e,a.name=e.name,i&&Object.assign(a,i),a};const Z=W.toFlatObject(W,{},null,(function(e){return/^is[A-Z]/.test(e)}));function ee(e,t,r){if(!W.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const n=(r=W.toFlatObject(r,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!W.isUndefined(t[e])}))).metaTokens,s=r.visitor||l,i=r.dots,a=r.indexes,o=(r.Blob||"undefined"!=typeof Blob&&Blob)&&W.isSpecCompliantForm(t);if(!W.isFunction(s))throw new TypeError("visitor must be a function");function c(e){if(null===e)return"";if(W.isDate(e))return e.toISOString();if(!o&&W.isBlob(e))throw new Q("Blob is not supported. Use a Buffer instead.");return W.isArrayBuffer(e)||W.isTypedArray(e)?o&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function l(e,r,s){let o=e;if(e&&!s&&"object"==typeof e)if(W.endsWith(r,"{}"))r=n?r:r.slice(0,-2),e=JSON.stringify(e);else if(W.isArray(e)&&function(e){return W.isArray(e)&&!e.some($)}(e)||(W.isFileList(e)||W.endsWith(r,"[]"))&&(o=W.toArray(e)))return r=z(r),o.forEach((function(e,n){!W.isUndefined(e)&&null!==e&&t.append(!0===a?J([r],n,i):null===a?r:r+"[]",c(e))})),!1;return!!$(e)||(t.append(J(s,r,i),c(e)),!1)}const u=[],h=Object.assign(Z,{defaultVisitor:l,convertValue:c,isVisitable:$});if(!W.isObject(e))throw new TypeError("data must be an object");return function e(r,n){if(!W.isUndefined(r)){if(-1!==u.indexOf(r))throw Error("Circular reference detected in "+n.join("."));u.push(r),W.forEach(r,(function(r,i){!0===(!(W.isUndefined(r)||null===r)&&s.call(t,r,W.isString(i)?i.trim():i,n,h))&&e(r,n?n.concat(i):[i])})),u.pop()}}(e),t}function te(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function re(e,t){this._pairs=[],e&&ee(e,this,t)}const ne=re.prototype;function se(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function ie(e,t,r){if(!t)return e;const n=r&&r.encode||se;W.isFunction(r)&&(r={serialize:r});const s=r&&r.serialize;let i;if(i=s?s(t,r):W.isURLSearchParams(t)?t.toString():new re(t,r).toString(n),i){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}ne.append=function(e,t){this._pairs.push([e,t])},ne.toString=function(e){const t=e?function(t){return e.call(this,t,te)}:te;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};var ae=class{constructor(){this.handlers=[]}use(e,t,r){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!r&&r.synchronous,runWhen:r?r.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){W.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},oe={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},ce={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:re,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]};const le="undefined"!=typeof window&&"undefined"!=typeof document,ue="object"==typeof navigator&&navigator||void 0,he=le&&(!ue||["ReactNative","NativeScript","NS"].indexOf(ue.product)<0),de="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,pe=le&&window.location.href||"http://localhost";var fe={...Object.freeze({__proto__:null,hasBrowserEnv:le,hasStandardBrowserWebWorkerEnv:de,hasStandardBrowserEnv:he,navigator:ue,origin:pe}),...ce};function Ee(e){function t(e,r,n,s){let i=e[s++];if("__proto__"===i)return!0;const a=Number.isFinite(+i),o=s>=e.length;return i=!i&&W.isArray(n)?n.length:i,o?(W.hasOwnProp(n,i)?n[i]=[n[i],r]:n[i]=r,!a):(n[i]&&W.isObject(n[i])||(n[i]=[]),t(e,r,n[i],s)&&W.isArray(n[i])&&(n[i]=function(e){const t={},r=Object.keys(e);let n;const s=r.length;let i;for(n=0;n<s;n++)i=r[n],t[i]=e[i];return t}(n[i])),!a)}if(W.isFormData(e)&&W.isFunction(e.entries)){const r={};return W.forEachEntry(e,((e,n)=>{t(function(e){return W.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),n,r,0)})),r}return null}const me={transitional:oe,adapter:["xhr","http","fetch"],transformRequest:[function(e,t){const r=t.getContentType()||"",n=r.indexOf("application/json")>-1,s=W.isObject(e);if(s&&W.isHTMLForm(e)&&(e=new FormData(e)),W.isFormData(e))return n?JSON.stringify(Ee(e)):e;if(W.isArrayBuffer(e)||W.isBuffer(e)||W.isStream(e)||W.isFile(e)||W.isBlob(e)||W.isReadableStream(e))return e;if(W.isArrayBufferView(e))return e.buffer;if(W.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let i;if(s){if(r.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return ee(e,new fe.classes.URLSearchParams,Object.assign({visitor:function(e,t,r,n){return fe.isNode&&W.isBuffer(e)?(this.append(t,e.toString("base64")),!1):n.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((i=W.isFileList(e))||r.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return ee(i?{"files[]":e}:e,t&&new t,this.formSerializer)}}return s||n?(t.setContentType("application/json",!1),function(e){if(W.isString(e))try{return(0,JSON.parse)(e),W.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||me.transitional,r=t&&t.forcedJSONParsing,n="json"===this.responseType;if(W.isResponse(e)||W.isReadableStream(e))return e;if(e&&W.isString(e)&&(r&&!this.responseType||n)){const r=!(t&&t.silentJSONParsing)&&n;try{return JSON.parse(e)}catch(e){if(r){if("SyntaxError"===e.name)throw Q.from(e,Q.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:fe.classes.FormData,Blob:fe.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};W.forEach(["delete","get","head","post","put","patch"],(e=>{me.headers[e]={}}));var Te=me;const Ae=W.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),ge=Symbol("internals");function _e(e){return e&&String(e).trim().toLowerCase()}function be(e){return!1===e||null==e?e:W.isArray(e)?e.map(be):String(e)}function Se(e,t,r,n,s){return W.isFunction(n)?n.call(this,t,r):(s&&(t=r),W.isString(t)?W.isString(n)?-1!==t.indexOf(n):W.isRegExp(n)?n.test(t):void 0:void 0)}class Ne{constructor(e){e&&this.set(e)}set(e,t,r){const n=this;function s(e,t,r){const s=_e(t);if(!s)throw new Error("header name must be a non-empty string");const i=W.findKey(n,s);(!i||void 0===n[i]||!0===r||void 0===r&&!1!==n[i])&&(n[i||t]=be(e))}const i=(e,t)=>W.forEach(e,((e,r)=>s(e,r,t)));if(W.isPlainObject(e)||e instanceof this.constructor)i(e,t);else if(W.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim()))i((e=>{const t={};let r,n,s;return e&&e.split("\n").forEach((function(e){s=e.indexOf(":"),r=e.substring(0,s).trim().toLowerCase(),n=e.substring(s+1).trim(),!r||t[r]&&Ae[r]||("set-cookie"===r?t[r]?t[r].push(n):t[r]=[n]:t[r]=t[r]?t[r]+", "+n:n)})),t})(e),t);else if(W.isObject(e)&&W.isIterable(e)){let r,n,s={};for(const t of e){if(!W.isArray(t))throw TypeError("Object iterator must return a key-value pair");s[n=t[0]]=(r=s[n])?W.isArray(r)?[...r,t[1]]:[r,t[1]]:t[1]}i(s,t)}else null!=e&&s(t,e,r);return this}get(e,t){if(e=_e(e)){const r=W.findKey(this,e);if(r){const e=this[r];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),r=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let n;for(;n=r.exec(e);)t[n[1]]=n[2];return t}(e);if(W.isFunction(t))return t.call(this,e,r);if(W.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=_e(e)){const r=W.findKey(this,e);return!(!r||void 0===this[r]||t&&!Se(0,this[r],r,t))}return!1}delete(e,t){const r=this;let n=!1;function s(e){if(e=_e(e)){const s=W.findKey(r,e);!s||t&&!Se(0,r[s],s,t)||(delete r[s],n=!0)}}return W.isArray(e)?e.forEach(s):s(e),n}clear(e){const t=Object.keys(this);let r=t.length,n=!1;for(;r--;){const s=t[r];e&&!Se(0,this[s],s,e,!0)||(delete this[s],n=!0)}return n}normalize(e){const t=this,r={};return W.forEach(this,((n,s)=>{const i=W.findKey(r,s);if(i)return t[i]=be(n),void delete t[s];const a=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,r)=>t.toUpperCase()+r))}(s):String(s).trim();a!==s&&delete t[s],t[a]=be(n),r[a]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return W.forEach(this,((r,n)=>{null!=r&&!1!==r&&(t[n]=e&&W.isArray(r)?r.join(", "):r)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}getSetCookie(){return this.get("set-cookie")||[]}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const r=new this(e);return t.forEach((e=>r.set(e))),r}static accessor(e){const t=(this[ge]=this[ge]={accessors:{}}).accessors,r=this.prototype;function n(e){const n=_e(e);t[n]||(function(e,t){const r=W.toCamelCase(" "+t);["get","set","has"].forEach((n=>{Object.defineProperty(e,n+r,{value:function(e,r,s){return this[n].call(this,t,e,r,s)},configurable:!0})}))}(r,e),t[n]=!0)}return W.isArray(e)?e.forEach(n):n(e),this}}Ne.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),W.reduceDescriptors(Ne.prototype,(({value:e},t)=>{let r=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[r]=e}}})),W.freezeMethods(Ne);var Ie=Ne;function Ce(e,t){const r=this||Te,n=t||r,s=Ie.from(n.headers);let i=n.data;return W.forEach(e,(function(e){i=e.call(r,i,s.normalize(),t?t.status:void 0)})),s.normalize(),i}function ye(e){return!(!e||!e.__CANCEL__)}function De(e,t,r){Q.call(this,null==e?"canceled":e,Q.ERR_CANCELED,t,r),this.name="CanceledError"}function Oe(e,t,r){const n=r.config.validateStatus;r.status&&n&&!n(r.status)?t(new Q("Request failed with status code "+r.status,[Q.ERR_BAD_REQUEST,Q.ERR_BAD_RESPONSE][Math.floor(r.status/100)-4],r.config,r.request,r)):e(r)}W.inherits(De,Q,{__CANCEL__:!0});const Re=(e,t,r=3)=>{let n=0;const s=function(e,t){e=e||10;const r=new Array(e),n=new Array(e);let s,i=0,a=0;return t=void 0!==t?t:1e3,function(o){const c=Date.now(),l=n[a];s||(s=c),r[i]=o,n[i]=c;let u=a,h=0;for(;u!==i;)h+=r[u++],u%=e;if(i=(i+1)%e,i===a&&(a=(a+1)%e),c-s<t)return;const d=l&&c-l;return d?Math.round(1e3*h/d):void 0}}(50,250);return function(e,t){let r,n,s=0,i=1e3/t;const a=(t,i=Date.now())=>{s=i,r=null,n&&(clearTimeout(n),n=null),e.apply(null,t)};return[(...e)=>{const t=Date.now(),o=t-s;o>=i?a(e,t):(r=e,n||(n=setTimeout((()=>{n=null,a(r)}),i-o)))},()=>r&&a(r)]}((r=>{const i=r.loaded,a=r.lengthComputable?r.total:void 0,o=i-n,c=s(o);n=i,e({loaded:i,total:a,progress:a?i/a:void 0,bytes:o,rate:c||void 0,estimated:c&&a&&i<=a?(a-i)/c:void 0,event:r,lengthComputable:null!=a,[t?"download":"upload"]:!0})}),r)},Le=(e,t)=>{const r=null!=e;return[n=>t[0]({lengthComputable:r,total:e,loaded:n}),t[1]]},ke=e=>(...t)=>W.asap((()=>e(...t)));var we=fe.hasStandardBrowserEnv?((e,t)=>r=>(r=new URL(r,fe.origin),e.protocol===r.protocol&&e.host===r.host&&(t||e.port===r.port)))(new URL(fe.origin),fe.navigator&&/(msie|trident)/i.test(fe.navigator.userAgent)):()=>!0,Pe=fe.hasStandardBrowserEnv?{write(e,t,r,n,s,i){const a=[e+"="+encodeURIComponent(t)];W.isNumber(r)&&a.push("expires="+new Date(r).toGMTString()),W.isString(n)&&a.push("path="+n),W.isString(s)&&a.push("domain="+s),!0===i&&a.push("secure"),document.cookie=a.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function Me(e,t,r){let n=!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t);return e&&(n||0==r)?function(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const Be=e=>e instanceof Ie?{...e}:e;function ve(e,t){t=t||{};const r={};function n(e,t,r,n){return W.isPlainObject(e)&&W.isPlainObject(t)?W.merge.call({caseless:n},e,t):W.isPlainObject(t)?W.merge({},t):W.isArray(t)?t.slice():t}function s(e,t,r,s){return W.isUndefined(t)?W.isUndefined(e)?void 0:n(void 0,e,0,s):n(e,t,0,s)}function i(e,t){if(!W.isUndefined(t))return n(void 0,t)}function a(e,t){return W.isUndefined(t)?W.isUndefined(e)?void 0:n(void 0,e):n(void 0,t)}function o(r,s,i){return i in t?n(r,s):i in e?n(void 0,r):void 0}const c={url:i,method:i,data:i,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,withXSRFToken:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,beforeRedirect:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:o,headers:(e,t,r)=>s(Be(e),Be(t),0,!0)};return W.forEach(Object.keys(Object.assign({},e,t)),(function(n){const i=c[n]||s,a=i(e[n],t[n],n);W.isUndefined(a)&&i!==o||(r[n]=a)})),r}var xe=e=>{const t=ve({},e);let r,{data:n,withXSRFToken:s,xsrfHeaderName:i,xsrfCookieName:a,headers:o,auth:c}=t;if(t.headers=o=Ie.from(o),t.url=ie(Me(t.baseURL,t.url,t.allowAbsoluteUrls),e.params,e.paramsSerializer),c&&o.set("Authorization","Basic "+btoa((c.username||"")+":"+(c.password?unescape(encodeURIComponent(c.password)):""))),W.isFormData(n))if(fe.hasStandardBrowserEnv||fe.hasStandardBrowserWebWorkerEnv)o.setContentType(void 0);else if(!1!==(r=o.getContentType())){const[e,...t]=r?r.split(";").map((e=>e.trim())).filter(Boolean):[];o.setContentType([e||"multipart/form-data",...t].join("; "))}if(fe.hasStandardBrowserEnv&&(s&&W.isFunction(s)&&(s=s(t)),s||!1!==s&&we(t.url))){const e=i&&a&&Pe.read(a);e&&o.set(i,e)}return t},Ue="undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,r){const n=xe(e);let s=n.data;const i=Ie.from(n.headers).normalize();let a,o,c,l,u,{responseType:h,onUploadProgress:d,onDownloadProgress:p}=n;function f(){l&&l(),u&&u(),n.cancelToken&&n.cancelToken.unsubscribe(a),n.signal&&n.signal.removeEventListener("abort",a)}let E=new XMLHttpRequest;function m(){if(!E)return;const n=Ie.from("getAllResponseHeaders"in E&&E.getAllResponseHeaders());Oe((function(e){t(e),f()}),(function(e){r(e),f()}),{data:h&&"text"!==h&&"json"!==h?E.response:E.responseText,status:E.status,statusText:E.statusText,headers:n,config:e,request:E}),E=null}E.open(n.method.toUpperCase(),n.url,!0),E.timeout=n.timeout,"onloadend"in E?E.onloadend=m:E.onreadystatechange=function(){E&&4===E.readyState&&(0!==E.status||E.responseURL&&0===E.responseURL.indexOf("file:"))&&setTimeout(m)},E.onabort=function(){E&&(r(new Q("Request aborted",Q.ECONNABORTED,e,E)),E=null)},E.onerror=function(){r(new Q("Network Error",Q.ERR_NETWORK,e,E)),E=null},E.ontimeout=function(){let t=n.timeout?"timeout of "+n.timeout+"ms exceeded":"timeout exceeded";const s=n.transitional||oe;n.timeoutErrorMessage&&(t=n.timeoutErrorMessage),r(new Q(t,s.clarifyTimeoutError?Q.ETIMEDOUT:Q.ECONNABORTED,e,E)),E=null},void 0===s&&i.setContentType(null),"setRequestHeader"in E&&W.forEach(i.toJSON(),(function(e,t){E.setRequestHeader(t,e)})),W.isUndefined(n.withCredentials)||(E.withCredentials=!!n.withCredentials),h&&"json"!==h&&(E.responseType=n.responseType),p&&([c,u]=Re(p,!0),E.addEventListener("progress",c)),d&&E.upload&&([o,l]=Re(d),E.upload.addEventListener("progress",o),E.upload.addEventListener("loadend",l)),(n.cancelToken||n.signal)&&(a=t=>{E&&(r(!t||t.type?new De(null,e,E):t),E.abort(),E=null)},n.cancelToken&&n.cancelToken.subscribe(a),n.signal&&(n.signal.aborted?a():n.signal.addEventListener("abort",a)));const T=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(n.url);T&&-1===fe.protocols.indexOf(T)?r(new Q("Unsupported protocol "+T+":",Q.ERR_BAD_REQUEST,e)):E.send(s||null)}))},Fe=(e,t)=>{const{length:r}=e=e?e.filter(Boolean):[];if(t||r){let r,n=new AbortController;const s=function(e){if(!r){r=!0,a();const t=e instanceof Error?e:this.reason;n.abort(t instanceof Q?t:new De(t instanceof Error?t.message:t))}};let i=t&&setTimeout((()=>{i=null,s(new Q(`timeout ${t} of ms exceeded`,Q.ETIMEDOUT))}),t);const a=()=>{e&&(i&&clearTimeout(i),i=null,e.forEach((e=>{e.unsubscribe?e.unsubscribe(s):e.removeEventListener("abort",s)})),e=null)};e.forEach((e=>e.addEventListener("abort",s)));const{signal:o}=n;return o.unsubscribe=()=>W.asap(a),o}};const He=function*(e,t){let r=e.byteLength;if(!t||r<t)return void(yield e);let n,s=0;for(;s<r;)n=s+t,yield e.slice(s,n),s=n},Ge=(e,t,r,n)=>{const s=async function*(e,t){for await(const r of async function*(e){if(e[Symbol.asyncIterator])return void(yield*e);const t=e.getReader();try{for(;;){const{done:e,value:r}=await t.read();if(e)break;yield r}}finally{await t.cancel()}}(e))yield*He(r,t)}(e,t);let i,a=0,o=e=>{i||(i=!0,n&&n(e))};return new ReadableStream({async pull(e){try{const{done:t,value:n}=await s.next();if(t)return o(),void e.close();let i=n.byteLength;if(r){let e=a+=i;r(e)}e.enqueue(new Uint8Array(n))}catch(e){throw o(e),e}},cancel:e=>(o(e),s.return())},{highWaterMark:2})},qe="function"==typeof fetch&&"function"==typeof Request&&"function"==typeof Response,Ye=qe&&"function"==typeof ReadableStream,Ve=qe&&("function"==typeof TextEncoder?(je=new TextEncoder,e=>je.encode(e)):async e=>new Uint8Array(await new Response(e).arrayBuffer()));var je;const We=(e,...t)=>{try{return!!e(...t)}catch(e){return!1}},Qe=Ye&&We((()=>{let e=!1;const t=new Request(fe.origin,{body:new ReadableStream,method:"POST",get duplex(){return e=!0,"half"}}).headers.has("Content-Type");return e&&!t})),Ke=Ye&&We((()=>W.isReadableStream(new Response("").body))),Xe={stream:Ke&&(e=>e.body)};var $e;qe&&($e=new Response,["text","arrayBuffer","blob","formData","stream"].forEach((e=>{!Xe[e]&&(Xe[e]=W.isFunction($e[e])?t=>t[e]():(t,r)=>{throw new Q(`Response type '${e}' is not supported`,Q.ERR_NOT_SUPPORT,r)})})));const ze={http:null,xhr:Ue,fetch:qe&&(async e=>{let{url:t,method:r,data:n,signal:s,cancelToken:i,timeout:a,onDownloadProgress:o,onUploadProgress:c,responseType:l,headers:u,withCredentials:h="same-origin",fetchOptions:d}=xe(e);l=l?(l+"").toLowerCase():"text";let p,f=Fe([s,i&&i.toAbortSignal()],a);const E=f&&f.unsubscribe&&(()=>{f.unsubscribe()});let m;try{if(c&&Qe&&"get"!==r&&"head"!==r&&0!==(m=await(async(e,t)=>{const r=W.toFiniteNumber(e.getContentLength());return null==r?(async e=>{if(null==e)return 0;if(W.isBlob(e))return e.size;if(W.isSpecCompliantForm(e)){const t=new Request(fe.origin,{method:"POST",body:e});return(await t.arrayBuffer()).byteLength}return W.isArrayBufferView(e)||W.isArrayBuffer(e)?e.byteLength:(W.isURLSearchParams(e)&&(e+=""),W.isString(e)?(await Ve(e)).byteLength:void 0)})(t):r})(u,n))){let e,r=new Request(t,{method:"POST",body:n,duplex:"half"});if(W.isFormData(n)&&(e=r.headers.get("content-type"))&&u.setContentType(e),r.body){const[e,t]=Le(m,Re(ke(c)));n=Ge(r.body,65536,e,t)}}W.isString(h)||(h=h?"include":"omit");const s="credentials"in Request.prototype;p=new Request(t,{...d,signal:f,method:r.toUpperCase(),headers:u.normalize().toJSON(),body:n,duplex:"half",credentials:s?h:void 0});let i=await fetch(p);const a=Ke&&("stream"===l||"response"===l);if(Ke&&(o||a&&E)){const e={};["status","statusText","headers"].forEach((t=>{e[t]=i[t]}));const t=W.toFiniteNumber(i.headers.get("content-length")),[r,n]=o&&Le(t,Re(ke(o),!0))||[];i=new Response(Ge(i.body,65536,r,(()=>{n&&n(),E&&E()})),e)}l=l||"text";let T=await Xe[W.findKey(Xe,l)||"text"](i,e);return!a&&E&&E(),await new Promise(((t,r)=>{Oe(t,r,{data:T,headers:Ie.from(i.headers),status:i.status,statusText:i.statusText,config:e,request:p})}))}catch(t){if(E&&E(),t&&"TypeError"===t.name&&/Load failed|fetch/i.test(t.message))throw Object.assign(new Q("Network Error",Q.ERR_NETWORK,e,p),{cause:t.cause||t});throw Q.from(t,t&&t.code,e,p)}})};W.forEach(ze,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const Je=e=>`- ${e}`,Ze=e=>W.isFunction(e)||null===e||!1===e;var et=e=>{e=W.isArray(e)?e:[e];const{length:t}=e;let r,n;const s={};for(let i=0;i<t;i++){let t;if(r=e[i],n=r,!Ze(r)&&(n=ze[(t=String(r)).toLowerCase()],void 0===n))throw new Q(`Unknown adapter '${t}'`);if(n)break;s[t||"#"+i]=n}if(!n){const e=Object.entries(s).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));throw new Q("There is no suitable adapter to dispatch the request "+(t?e.length>1?"since :\n"+e.map(Je).join("\n"):" "+Je(e[0]):"as no adapter specified"),"ERR_NOT_SUPPORT")}return n};function tt(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new De(null,e)}function rt(e){return tt(e),e.headers=Ie.from(e.headers),e.data=Ce.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),et(e.adapter||Te.adapter)(e).then((function(t){return tt(e),t.data=Ce.call(e,e.transformResponse,t),t.headers=Ie.from(t.headers),t}),(function(t){return ye(t)||(tt(e),t&&t.response&&(t.response.data=Ce.call(e,e.transformResponse,t.response),t.response.headers=Ie.from(t.response.headers))),Promise.reject(t)}))}const nt={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{nt[e]=function(r){return typeof r===e||"a"+(t<1?"n ":" ")+e}}));const st={};nt.transitional=function(e,t,r){function n(e,t){return"[Axios v1.9.0] Transitional option '"+e+"'"+t+(r?". "+r:"")}return(r,s,i)=>{if(!1===e)throw new Q(n(s," has been removed"+(t?" in "+t:"")),Q.ERR_DEPRECATED);return t&&!st[s]&&(st[s]=!0,console.warn(n(s," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(r,s,i)}},nt.spelling=function(e){return(t,r)=>(console.warn(`${r} is likely a misspelling of ${e}`),!0)};var it={assertOptions:function(e,t,r){if("object"!=typeof e)throw new Q("options must be an object",Q.ERR_BAD_OPTION_VALUE);const n=Object.keys(e);let s=n.length;for(;s-- >0;){const i=n[s],a=t[i];if(a){const t=e[i],r=void 0===t||a(t,i,e);if(!0!==r)throw new Q("option "+i+" must be "+r,Q.ERR_BAD_OPTION_VALUE)}else if(!0!==r)throw new Q("Unknown option "+i,Q.ERR_BAD_OPTION)}},validators:nt};const at=it.validators;class ot{constructor(e){this.defaults=e||{},this.interceptors={request:new ae,response:new ae}}async request(e,t){try{return await this._request(e,t)}catch(e){if(e instanceof Error){let t={};Error.captureStackTrace?Error.captureStackTrace(t):t=new Error;const r=t.stack?t.stack.replace(/^.+\n/,""):"";try{e.stack?r&&!String(e.stack).endsWith(r.replace(/^.+\n.+\n/,""))&&(e.stack+="\n"+r):e.stack=r}catch(e){}}throw e}}_request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=ve(this.defaults,t);const{transitional:r,paramsSerializer:n,headers:s}=t;void 0!==r&&it.assertOptions(r,{silentJSONParsing:at.transitional(at.boolean),forcedJSONParsing:at.transitional(at.boolean),clarifyTimeoutError:at.transitional(at.boolean)},!1),null!=n&&(W.isFunction(n)?t.paramsSerializer={serialize:n}:it.assertOptions(n,{encode:at.function,serialize:at.function},!0)),void 0!==t.allowAbsoluteUrls||(void 0!==this.defaults.allowAbsoluteUrls?t.allowAbsoluteUrls=this.defaults.allowAbsoluteUrls:t.allowAbsoluteUrls=!0),it.assertOptions(t,{baseUrl:at.spelling("baseURL"),withXsrfToken:at.spelling("withXSRFToken")},!0),t.method=(t.method||this.defaults.method||"get").toLowerCase();let i=s&&W.merge(s.common,s[t.method]);s&&W.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete s[e]})),t.headers=Ie.concat(i,s);const a=[];let o=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(o=o&&e.synchronous,a.unshift(e.fulfilled,e.rejected))}));const c=[];let l;this.interceptors.response.forEach((function(e){c.push(e.fulfilled,e.rejected)}));let u,h=0;if(!o){const e=[rt.bind(this),void 0];for(e.unshift.apply(e,a),e.push.apply(e,c),u=e.length,l=Promise.resolve(t);h<u;)l=l.then(e[h++],e[h++]);return l}u=a.length;let d=t;for(h=0;h<u;){const e=a[h++],t=a[h++];try{d=e(d)}catch(e){t.call(this,e);break}}try{l=rt.call(this,d)}catch(e){return Promise.reject(e)}for(h=0,u=c.length;h<u;)l=l.then(c[h++],c[h++]);return l}getUri(e){return ie(Me((e=ve(this.defaults,e)).baseURL,e.url,e.allowAbsoluteUrls),e.params,e.paramsSerializer)}}W.forEach(["delete","get","head","options"],(function(e){ot.prototype[e]=function(t,r){return this.request(ve(r||{},{method:e,url:t,data:(r||{}).data}))}})),W.forEach(["post","put","patch"],(function(e){function t(t){return function(r,n,s){return this.request(ve(s||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:r,data:n}))}}ot.prototype[e]=t(),ot.prototype[e+"Form"]=t(!0)}));var ct=ot;class lt{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const r=this;this.promise.then((e=>{if(!r._listeners)return;let t=r._listeners.length;for(;t-- >0;)r._listeners[t](e);r._listeners=null})),this.promise.then=e=>{let t;const n=new Promise((e=>{r.subscribe(e),t=e})).then(e);return n.cancel=function(){r.unsubscribe(t)},n},e((function(e,n,s){r.reason||(r.reason=new De(e,n,s),t(r.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}toAbortSignal(){const e=new AbortController,t=t=>{e.abort(t)};return this.subscribe(t),e.signal.unsubscribe=()=>this.unsubscribe(t),e.signal}static source(){let e;return{token:new lt((function(t){e=t})),cancel:e}}}var ut=lt;const ht={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(ht).forEach((([e,t])=>{ht[t]=e}));var dt=ht;const pt=function e(t){const r=new ct(t),s=n(ct.prototype.request,r);return W.extend(s,ct.prototype,r,{allOwnKeys:!0}),W.extend(s,r,null,{allOwnKeys:!0}),s.create=function(r){return e(ve(t,r))},s}(Te);pt.Axios=ct,pt.CanceledError=De,pt.CancelToken=ut,pt.isCancel=ye,pt.VERSION="1.9.0",pt.toFormData=ee,pt.AxiosError=Q,pt.Cancel=pt.CanceledError,pt.all=function(e){return Promise.all(e)},pt.spread=function(e){return function(t){return e.apply(null,t)}},pt.isAxiosError=function(e){return W.isObject(e)&&!0===e.isAxiosError},pt.mergeConfig=ve,pt.AxiosHeaders=Ie,pt.formToJSON=e=>Ee(W.isHTMLForm(e)?new FormData(e):e),pt.getAdapter=et,pt.HttpStatusCode=dt,pt.default=pt,e.exports=pt},526:(e,t)=>{"use strict";t.byteLength=function(e){var t=o(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,i=o(e),a=i[0],c=i[1],l=new s(function(e,t,r){return 3*(t+r)/4-r}(0,a,c)),u=0,h=c>0?a-4:a;for(r=0;r<h;r+=4)t=n[e.charCodeAt(r)]<<18|n[e.charCodeAt(r+1)]<<12|n[e.charCodeAt(r+2)]<<6|n[e.charCodeAt(r+3)],l[u++]=t>>16&255,l[u++]=t>>8&255,l[u++]=255&t;return 2===c&&(t=n[e.charCodeAt(r)]<<2|n[e.charCodeAt(r+1)]>>4,l[u++]=255&t),1===c&&(t=n[e.charCodeAt(r)]<<10|n[e.charCodeAt(r+1)]<<4|n[e.charCodeAt(r+2)]>>2,l[u++]=t>>8&255,l[u++]=255&t),l},t.fromByteArray=function(e){for(var t,n=e.length,s=n%3,i=[],a=16383,o=0,l=n-s;o<l;o+=a)i.push(c(e,o,o+a>l?l:o+a));return 1===s?(t=e[n-1],i.push(r[t>>2]+r[t<<4&63]+"==")):2===s&&(t=(e[n-2]<<8)+e[n-1],i.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"=")),i.join("")};for(var r=[],n=[],s="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0;a<64;++a)r[a]=i[a],n[i.charCodeAt(a)]=a;function o(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function c(e,t,n){for(var s,i,a=[],o=t;o<n;o+=3)s=(e[o]<<16&16711680)+(e[o+1]<<8&65280)+(255&e[o+2]),a.push(r[(i=s)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return a.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},550:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(710);n.PaperbackPolyfills.createByteArray=function(e){return new Uint8Array(e)},n.PaperbackPolyfills.createRawData=function({byteArray:e}){return{...e,length:e.length,toString:function(){var e,t,r,n,s,i;for(e="",r=this.length,t=0;t<r;)switch((n=this[t++])>>4){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:e+=String.fromCharCode(n);break;case 12:case 13:s=this[t++],e+=String.fromCharCode((31&n)<<6|63&s);break;case 14:s=this[t++],i=this[t++],e+=String.fromCharCode((15&n)<<12|(63&s)<<6|63&i)}return e}}}},631:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(710);r(407);class s{constructor(){this.objectStore={}}async store(e,t){"gagaku"in globalThis?(void 0===t&&(t=null),globalThis.gagaku?.callHandler("setSecureState",e,t)):this.objectStore[e]=t}async retrieve(e){return"gagaku"in globalThis?globalThis.gagaku?.callHandler("getSecureState",e):this.objectStore[e]}}class i{constructor(){this.keychain=new s,this.objectStore={}}async store(e,t){"gagaku"in globalThis?(void 0===t&&(t=null),globalThis.gagaku?.callHandler("setState",e,t)):this.objectStore[e]=t}async retrieve(e){return"gagaku"in globalThis?globalThis.gagaku?.callHandler("getState",e):this.objectStore[e]}}n.PaperbackPolyfills.createSourceStateManager=function(){return new i}},710:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PaperbackPolyfills=void 0,t.PaperbackPolyfills={}},844:(e,t,r)=>{"use strict";r.r(t),r.d(t,{contains:()=>St,load:()=>Lo,merge:()=>It});var n={};r.r(n),r.d(n,{DocumentPosition:()=>nt,append:()=>xe,appendChild:()=>ve,compareDocumentPosition:()=>st,existsOne:()=>Ve,filter:()=>He,find:()=>Ge,findAll:()=>je,findOne:()=>Ye,findOneChild:()=>qe,getAttributeValue:()=>Re,getChildren:()=>ye,getElementById:()=>Je,getElements:()=>ze,getElementsByClassName:()=>et,getElementsByTagName:()=>Ze,getElementsByTagType:()=>tt,getFeed:()=>at,getInnerHTML:()=>Se,getName:()=>ke,getOuterHTML:()=>be,getParent:()=>De,getSiblings:()=>Oe,getText:()=>Ne,hasAttrib:()=>Le,hasChildren:()=>v,innerText:()=>Ce,isCDATA:()=>k,isComment:()=>P,isDocument:()=>B,isTag:()=>L,isText:()=>w,nextElementSibling:()=>we,prepend:()=>Fe,prependChild:()=>Ue,prevElementSibling:()=>Pe,removeElement:()=>Me,removeSubsets:()=>rt,replaceElement:()=>Be,testElement:()=>$e,textContent:()=>Ie,uniqueSort:()=>it});var s={};r.r(s),r.d(s,{contains:()=>St,extract:()=>Nt,html:()=>Tt,merge:()=>It,parseHTML:()=>_t,root:()=>bt,text:()=>gt,xml:()=>At});var i={};r.r(i),r.d(i,{addClass:()=>Xt,attr:()=>xt,data:()=>Yt,hasClass:()=>Kt,prop:()=>Ht,removeAttr:()=>Qt,removeClass:()=>$t,toggleClass:()=>zt,val:()=>Vt});var a={};r.r(a),r.d(a,{_findBySelector:()=>Tn,add:()=>Jn,addBack:()=>Zn,children:()=>Mn,closest:()=>yn,contents:()=>Bn,each:()=>vn,end:()=>zn,eq:()=>Wn,filter:()=>Fn,filterArray:()=>Hn,find:()=>mn,first:()=>Vn,get:()=>Qn,has:()=>Yn,index:()=>Xn,is:()=>Gn,last:()=>jn,map:()=>xn,next:()=>Dn,nextAll:()=>On,nextUntil:()=>Rn,not:()=>qn,parent:()=>Nn,parents:()=>In,parentsUntil:()=>Cn,prev:()=>Ln,prevAll:()=>kn,prevUntil:()=>wn,siblings:()=>Pn,slice:()=>$n,toArray:()=>Kn});var o={};r.r(o),r.d(o,{_makeDomArray:()=>ts,after:()=>ps,append:()=>as,appendTo:()=>ss,before:()=>Es,clone:()=>Ns,empty:()=>gs,html:()=>_s,insertAfter:()=>fs,insertBefore:()=>ms,prepend:()=>os,prependTo:()=>is,remove:()=>Ts,replaceWith:()=>As,text:()=>Ss,toString:()=>bs,unwrap:()=>hs,wrap:()=>ls,wrapAll:()=>ds,wrapInner:()=>us});var c={};r.r(c),r.d(c,{css:()=>Is});var l={};r.r(l),r.d(l,{serialize:()=>Ls,serializeArray:()=>ks});var u,h={};r.r(h),r.d(h,{extract:()=>Ps}),function(e){e.Root="root",e.Text="text",e.Directive="directive",e.Comment="comment",e.Script="script",e.Style="style",e.Tag="tag",e.CDATA="cdata",e.Doctype="doctype"}(u||(u={}));const d=u.Root,p=u.Text,f=u.Directive,E=u.Comment,m=u.Script,T=u.Style,A=u.Tag,g=u.CDATA,_=u.Doctype;class b{constructor(){this.parent=null,this.prev=null,this.next=null,this.startIndex=null,this.endIndex=null}get parentNode(){return this.parent}set parentNode(e){this.parent=e}get previousSibling(){return this.prev}set previousSibling(e){this.prev=e}get nextSibling(){return this.next}set nextSibling(e){this.next=e}cloneNode(e=!1){return x(this,e)}}class S extends b{constructor(e){super(),this.data=e}get nodeValue(){return this.data}set nodeValue(e){this.data=e}}class N extends S{constructor(){super(...arguments),this.type=u.Text}get nodeType(){return 3}}class I extends S{constructor(){super(...arguments),this.type=u.Comment}get nodeType(){return 8}}class C extends S{constructor(e,t){super(t),this.name=e,this.type=u.Directive}get nodeType(){return 1}}class y extends b{constructor(e){super(),this.children=e}get firstChild(){var e;return null!==(e=this.children[0])&&void 0!==e?e:null}get lastChild(){return this.children.length>0?this.children[this.children.length-1]:null}get childNodes(){return this.children}set childNodes(e){this.children=e}}class D extends y{constructor(){super(...arguments),this.type=u.CDATA}get nodeType(){return 4}}class O extends y{constructor(){super(...arguments),this.type=u.Root}get nodeType(){return 9}}class R extends y{constructor(e,t,r=[],n=("script"===e?u.Script:"style"===e?u.Style:u.Tag)){super(r),this.name=e,this.attribs=t,this.type=n}get nodeType(){return 1}get tagName(){return this.name}set tagName(e){this.name=e}get attributes(){return Object.keys(this.attribs).map((e=>{var t,r;return{name:e,value:this.attribs[e],namespace:null===(t=this["x-attribsNamespace"])||void 0===t?void 0:t[e],prefix:null===(r=this["x-attribsPrefix"])||void 0===r?void 0:r[e]}}))}}function L(e){return(t=e).type===u.Tag||t.type===u.Script||t.type===u.Style;var t}function k(e){return e.type===u.CDATA}function w(e){return e.type===u.Text}function P(e){return e.type===u.Comment}function M(e){return e.type===u.Directive}function B(e){return e.type===u.Root}function v(e){return Object.prototype.hasOwnProperty.call(e,"children")}function x(e,t=!1){let r;if(w(e))r=new N(e.data);else if(P(e))r=new I(e.data);else if(L(e)){const n=t?U(e.children):[],s=new R(e.name,{...e.attribs},n);n.forEach((e=>e.parent=s)),null!=e.namespace&&(s.namespace=e.namespace),e["x-attribsNamespace"]&&(s["x-attribsNamespace"]={...e["x-attribsNamespace"]}),e["x-attribsPrefix"]&&(s["x-attribsPrefix"]={...e["x-attribsPrefix"]}),r=s}else if(k(e)){const n=t?U(e.children):[],s=new D(n);n.forEach((e=>e.parent=s)),r=s}else if(B(e)){const n=t?U(e.children):[],s=new O(n);n.forEach((e=>e.parent=s)),e["x-mode"]&&(s["x-mode"]=e["x-mode"]),r=s}else{if(!M(e))throw new Error(`Not implemented yet: ${e.type}`);{const t=new C(e.name,e.data);null!=e["x-name"]&&(t["x-name"]=e["x-name"],t["x-publicId"]=e["x-publicId"],t["x-systemId"]=e["x-systemId"]),r=t}}return r.startIndex=e.startIndex,r.endIndex=e.endIndex,null!=e.sourceCodeLocation&&(r.sourceCodeLocation=e.sourceCodeLocation),r}function U(e){const t=e.map((e=>x(e,!0)));for(let e=1;e<t.length;e++)t[e].prev=t[e-1],t[e-1].next=t[e];return t}const F={withStartIndices:!1,withEndIndices:!1,xmlMode:!1};class H{constructor(e,t,r){this.dom=[],this.root=new O(this.dom),this.done=!1,this.tagStack=[this.root],this.lastNode=null,this.parser=null,"function"==typeof t&&(r=t,t=F),"object"==typeof e&&(t=e,e=void 0),this.callback=null!=e?e:null,this.options=null!=t?t:F,this.elementCB=null!=r?r:null}onparserinit(e){this.parser=e}onreset(){this.dom=[],this.root=new O(this.dom),this.done=!1,this.tagStack=[this.root],this.lastNode=null,this.parser=null}onend(){this.done||(this.done=!0,this.parser=null,this.handleCallback(null))}onerror(e){this.handleCallback(e)}onclosetag(){this.lastNode=null;const e=this.tagStack.pop();this.options.withEndIndices&&(e.endIndex=this.parser.endIndex),this.elementCB&&this.elementCB(e)}onopentag(e,t){const r=this.options.xmlMode?u.Tag:void 0,n=new R(e,t,void 0,r);this.addNode(n),this.tagStack.push(n)}ontext(e){const{lastNode:t}=this;if(t&&t.type===u.Text)t.data+=e,this.options.withEndIndices&&(t.endIndex=this.parser.endIndex);else{const t=new N(e);this.addNode(t),this.lastNode=t}}oncomment(e){if(this.lastNode&&this.lastNode.type===u.Comment)return void(this.lastNode.data+=e);const t=new I(e);this.addNode(t),this.lastNode=t}oncommentend(){this.lastNode=null}oncdatastart(){const e=new N(""),t=new D([e]);this.addNode(t),e.parent=t,this.lastNode=e}oncdataend(){this.lastNode=null}onprocessinginstruction(e,t){const r=new C(e,t);this.addNode(r)}handleCallback(e){if("function"==typeof this.callback)this.callback(e,this.dom);else if(e)throw e}addNode(e){const t=this.tagStack[this.tagStack.length-1],r=t.children[t.children.length-1];this.options.withStartIndices&&(e.startIndex=this.parser.startIndex),this.options.withEndIndices&&(e.endIndex=this.parser.endIndex),t.children.push(e),r&&(e.prev=r,r.next=e),e.parent=t,this.lastNode=null}}const G=new Uint16Array('ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'.split("").map((e=>e.charCodeAt(0)))),q=new Uint16Array("Ȁaglq\tɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢".split("").map((e=>e.charCodeAt(0))));var Y;const V=new Map([[0,65533],[128,8364],[130,8218],[131,402],[132,8222],[133,8230],[134,8224],[135,8225],[136,710],[137,8240],[138,352],[139,8249],[140,338],[142,381],[145,8216],[146,8217],[147,8220],[148,8221],[149,8226],[150,8211],[151,8212],[152,732],[153,8482],[154,353],[155,8250],[156,339],[158,382],[159,376]]),j=null!==(Y=String.fromCodePoint)&&void 0!==Y?Y:function(e){let t="";return e>65535&&(e-=65536,t+=String.fromCharCode(e>>>10&1023|55296),e=56320|1023&e),t+=String.fromCharCode(e),t};var W,Q,K,X,$;function z(e){return e>=W.ZERO&&e<=W.NINE}!function(e){e[e.NUM=35]="NUM",e[e.SEMI=59]="SEMI",e[e.EQUALS=61]="EQUALS",e[e.ZERO=48]="ZERO",e[e.NINE=57]="NINE",e[e.LOWER_A=97]="LOWER_A",e[e.LOWER_F=102]="LOWER_F",e[e.LOWER_X=120]="LOWER_X",e[e.LOWER_Z=122]="LOWER_Z",e[e.UPPER_A=65]="UPPER_A",e[e.UPPER_F=70]="UPPER_F",e[e.UPPER_Z=90]="UPPER_Z"}(W||(W={})),function(e){e[e.VALUE_LENGTH=49152]="VALUE_LENGTH",e[e.BRANCH_LENGTH=16256]="BRANCH_LENGTH",e[e.JUMP_TABLE=127]="JUMP_TABLE"}(Q||(Q={})),function(e){e[e.EntityStart=0]="EntityStart",e[e.NumericStart=1]="NumericStart",e[e.NumericDecimal=2]="NumericDecimal",e[e.NumericHex=3]="NumericHex",e[e.NamedEntity=4]="NamedEntity"}(K||(K={})),($=X||(X={}))[$.Legacy=0]="Legacy",$[$.Strict=1]="Strict",$[$.Attribute=2]="Attribute";class J{constructor(e,t,r){this.decodeTree=e,this.emitCodePoint=t,this.errors=r,this.state=K.EntityStart,this.consumed=1,this.result=0,this.treeIndex=0,this.excess=1,this.decodeMode=X.Strict}startEntity(e){this.decodeMode=e,this.state=K.EntityStart,this.result=0,this.treeIndex=0,this.excess=1,this.consumed=1}write(e,t){switch(this.state){case K.EntityStart:return e.charCodeAt(t)===W.NUM?(this.state=K.NumericStart,this.consumed+=1,this.stateNumericStart(e,t+1)):(this.state=K.NamedEntity,this.stateNamedEntity(e,t));case K.NumericStart:return this.stateNumericStart(e,t);case K.NumericDecimal:return this.stateNumericDecimal(e,t);case K.NumericHex:return this.stateNumericHex(e,t);case K.NamedEntity:return this.stateNamedEntity(e,t)}}stateNumericStart(e,t){return t>=e.length?-1:(32|e.charCodeAt(t))===W.LOWER_X?(this.state=K.NumericHex,this.consumed+=1,this.stateNumericHex(e,t+1)):(this.state=K.NumericDecimal,this.stateNumericDecimal(e,t))}addToNumericResult(e,t,r,n){if(t!==r){const s=r-t;this.result=this.result*Math.pow(n,s)+parseInt(e.substr(t,s),n),this.consumed+=s}}stateNumericHex(e,t){const r=t;for(;t<e.length;){const s=e.charCodeAt(t);if(!(z(s)||(n=s,n>=W.UPPER_A&&n<=W.UPPER_F||n>=W.LOWER_A&&n<=W.LOWER_F)))return this.addToNumericResult(e,r,t,16),this.emitNumericEntity(s,3);t+=1}var n;return this.addToNumericResult(e,r,t,16),-1}stateNumericDecimal(e,t){const r=t;for(;t<e.length;){const n=e.charCodeAt(t);if(!z(n))return this.addToNumericResult(e,r,t,10),this.emitNumericEntity(n,2);t+=1}return this.addToNumericResult(e,r,t,10),-1}emitNumericEntity(e,t){var r;if(this.consumed<=t)return null===(r=this.errors)||void 0===r||r.absenceOfDigitsInNumericCharacterReference(this.consumed),0;if(e===W.SEMI)this.consumed+=1;else if(this.decodeMode===X.Strict)return 0;return this.emitCodePoint(function(e){var t;return e>=55296&&e<=57343||e>1114111?65533:null!==(t=V.get(e))&&void 0!==t?t:e}(this.result),this.consumed),this.errors&&(e!==W.SEMI&&this.errors.missingSemicolonAfterCharacterReference(),this.errors.validateNumericCharacterReference(this.result)),this.consumed}stateNamedEntity(e,t){const{decodeTree:r}=this;let n=r[this.treeIndex],s=(n&Q.VALUE_LENGTH)>>14;for(;t<e.length;t++,this.excess++){const a=e.charCodeAt(t);if(this.treeIndex=ee(r,n,this.treeIndex+Math.max(1,s),a),this.treeIndex<0)return 0===this.result||this.decodeMode===X.Attribute&&(0===s||((i=a)===W.EQUALS||function(e){return e>=W.UPPER_A&&e<=W.UPPER_Z||e>=W.LOWER_A&&e<=W.LOWER_Z||z(e)}(i)))?0:this.emitNotTerminatedNamedEntity();if(n=r[this.treeIndex],s=(n&Q.VALUE_LENGTH)>>14,0!==s){if(a===W.SEMI)return this.emitNamedEntityData(this.treeIndex,s,this.consumed+this.excess);this.decodeMode!==X.Strict&&(this.result=this.treeIndex,this.consumed+=this.excess,this.excess=0)}}var i;return-1}emitNotTerminatedNamedEntity(){var e;const{result:t,decodeTree:r}=this,n=(r[t]&Q.VALUE_LENGTH)>>14;return this.emitNamedEntityData(t,n,this.consumed),null===(e=this.errors)||void 0===e||e.missingSemicolonAfterCharacterReference(),this.consumed}emitNamedEntityData(e,t,r){const{decodeTree:n}=this;return this.emitCodePoint(1===t?n[e]&~Q.VALUE_LENGTH:n[e+1],r),3===t&&this.emitCodePoint(n[e+2],r),r}end(){var e;switch(this.state){case K.NamedEntity:return 0===this.result||this.decodeMode===X.Attribute&&this.result!==this.treeIndex?0:this.emitNotTerminatedNamedEntity();case K.NumericDecimal:return this.emitNumericEntity(0,2);case K.NumericHex:return this.emitNumericEntity(0,3);case K.NumericStart:return null===(e=this.errors)||void 0===e||e.absenceOfDigitsInNumericCharacterReference(this.consumed),0;case K.EntityStart:return 0}}}function Z(e){let t="";const r=new J(e,(e=>t+=j(e)));return function(e,n){let s=0,i=0;for(;(i=e.indexOf("&",i))>=0;){t+=e.slice(s,i),r.startEntity(n);const a=r.write(e,i+1);if(a<0){s=i+r.end();break}s=i+a,i=0===a?s+1:s}const a=t+e.slice(s);return t="",a}}function ee(e,t,r,n){const s=(t&Q.BRANCH_LENGTH)>>7,i=t&Q.JUMP_TABLE;if(0===s)return 0!==i&&n===i?r:-1;if(i){const t=n-i;return t<0||t>=s?-1:e[r+t]-1}let a=r,o=a+s-1;for(;a<=o;){const t=a+o>>>1,r=e[t];if(r<n)a=t+1;else{if(!(r>n))return e[t+s];o=t-1}}return-1}function te(e){for(let t=1;t<e.length;t++)e[t][0]+=e[t-1][0]+1;return e}Z(G),Z(q),new Map(te([[9,"&Tab;"],[0,"&NewLine;"],[22,"&excl;"],[0,"&quot;"],[0,"&num;"],[0,"&dollar;"],[0,"&percnt;"],[0,"&amp;"],[0,"&apos;"],[0,"&lpar;"],[0,"&rpar;"],[0,"&ast;"],[0,"&plus;"],[0,"&comma;"],[1,"&period;"],[0,"&sol;"],[10,"&colon;"],[0,"&semi;"],[0,{v:"&lt;",n:8402,o:"&nvlt;"}],[0,{v:"&equals;",n:8421,o:"&bne;"}],[0,{v:"&gt;",n:8402,o:"&nvgt;"}],[0,"&quest;"],[0,"&commat;"],[26,"&lbrack;"],[0,"&bsol;"],[0,"&rbrack;"],[0,"&Hat;"],[0,"&lowbar;"],[0,"&DiacriticalGrave;"],[5,{n:106,o:"&fjlig;"}],[20,"&lbrace;"],[0,"&verbar;"],[0,"&rbrace;"],[34,"&nbsp;"],[0,"&iexcl;"],[0,"&cent;"],[0,"&pound;"],[0,"&curren;"],[0,"&yen;"],[0,"&brvbar;"],[0,"&sect;"],[0,"&die;"],[0,"&copy;"],[0,"&ordf;"],[0,"&laquo;"],[0,"&not;"],[0,"&shy;"],[0,"&circledR;"],[0,"&macr;"],[0,"&deg;"],[0,"&PlusMinus;"],[0,"&sup2;"],[0,"&sup3;"],[0,"&acute;"],[0,"&micro;"],[0,"&para;"],[0,"&centerdot;"],[0,"&cedil;"],[0,"&sup1;"],[0,"&ordm;"],[0,"&raquo;"],[0,"&frac14;"],[0,"&frac12;"],[0,"&frac34;"],[0,"&iquest;"],[0,"&Agrave;"],[0,"&Aacute;"],[0,"&Acirc;"],[0,"&Atilde;"],[0,"&Auml;"],[0,"&angst;"],[0,"&AElig;"],[0,"&Ccedil;"],[0,"&Egrave;"],[0,"&Eacute;"],[0,"&Ecirc;"],[0,"&Euml;"],[0,"&Igrave;"],[0,"&Iacute;"],[0,"&Icirc;"],[0,"&Iuml;"],[0,"&ETH;"],[0,"&Ntilde;"],[0,"&Ograve;"],[0,"&Oacute;"],[0,"&Ocirc;"],[0,"&Otilde;"],[0,"&Ouml;"],[0,"&times;"],[0,"&Oslash;"],[0,"&Ugrave;"],[0,"&Uacute;"],[0,"&Ucirc;"],[0,"&Uuml;"],[0,"&Yacute;"],[0,"&THORN;"],[0,"&szlig;"],[0,"&agrave;"],[0,"&aacute;"],[0,"&acirc;"],[0,"&atilde;"],[0,"&auml;"],[0,"&aring;"],[0,"&aelig;"],[0,"&ccedil;"],[0,"&egrave;"],[0,"&eacute;"],[0,"&ecirc;"],[0,"&euml;"],[0,"&igrave;"],[0,"&iacute;"],[0,"&icirc;"],[0,"&iuml;"],[0,"&eth;"],[0,"&ntilde;"],[0,"&ograve;"],[0,"&oacute;"],[0,"&ocirc;"],[0,"&otilde;"],[0,"&ouml;"],[0,"&div;"],[0,"&oslash;"],[0,"&ugrave;"],[0,"&uacute;"],[0,"&ucirc;"],[0,"&uuml;"],[0,"&yacute;"],[0,"&thorn;"],[0,"&yuml;"],[0,"&Amacr;"],[0,"&amacr;"],[0,"&Abreve;"],[0,"&abreve;"],[0,"&Aogon;"],[0,"&aogon;"],[0,"&Cacute;"],[0,"&cacute;"],[0,"&Ccirc;"],[0,"&ccirc;"],[0,"&Cdot;"],[0,"&cdot;"],[0,"&Ccaron;"],[0,"&ccaron;"],[0,"&Dcaron;"],[0,"&dcaron;"],[0,"&Dstrok;"],[0,"&dstrok;"],[0,"&Emacr;"],[0,"&emacr;"],[2,"&Edot;"],[0,"&edot;"],[0,"&Eogon;"],[0,"&eogon;"],[0,"&Ecaron;"],[0,"&ecaron;"],[0,"&Gcirc;"],[0,"&gcirc;"],[0,"&Gbreve;"],[0,"&gbreve;"],[0,"&Gdot;"],[0,"&gdot;"],[0,"&Gcedil;"],[1,"&Hcirc;"],[0,"&hcirc;"],[0,"&Hstrok;"],[0,"&hstrok;"],[0,"&Itilde;"],[0,"&itilde;"],[0,"&Imacr;"],[0,"&imacr;"],[2,"&Iogon;"],[0,"&iogon;"],[0,"&Idot;"],[0,"&imath;"],[0,"&IJlig;"],[0,"&ijlig;"],[0,"&Jcirc;"],[0,"&jcirc;"],[0,"&Kcedil;"],[0,"&kcedil;"],[0,"&kgreen;"],[0,"&Lacute;"],[0,"&lacute;"],[0,"&Lcedil;"],[0,"&lcedil;"],[0,"&Lcaron;"],[0,"&lcaron;"],[0,"&Lmidot;"],[0,"&lmidot;"],[0,"&Lstrok;"],[0,"&lstrok;"],[0,"&Nacute;"],[0,"&nacute;"],[0,"&Ncedil;"],[0,"&ncedil;"],[0,"&Ncaron;"],[0,"&ncaron;"],[0,"&napos;"],[0,"&ENG;"],[0,"&eng;"],[0,"&Omacr;"],[0,"&omacr;"],[2,"&Odblac;"],[0,"&odblac;"],[0,"&OElig;"],[0,"&oelig;"],[0,"&Racute;"],[0,"&racute;"],[0,"&Rcedil;"],[0,"&rcedil;"],[0,"&Rcaron;"],[0,"&rcaron;"],[0,"&Sacute;"],[0,"&sacute;"],[0,"&Scirc;"],[0,"&scirc;"],[0,"&Scedil;"],[0,"&scedil;"],[0,"&Scaron;"],[0,"&scaron;"],[0,"&Tcedil;"],[0,"&tcedil;"],[0,"&Tcaron;"],[0,"&tcaron;"],[0,"&Tstrok;"],[0,"&tstrok;"],[0,"&Utilde;"],[0,"&utilde;"],[0,"&Umacr;"],[0,"&umacr;"],[0,"&Ubreve;"],[0,"&ubreve;"],[0,"&Uring;"],[0,"&uring;"],[0,"&Udblac;"],[0,"&udblac;"],[0,"&Uogon;"],[0,"&uogon;"],[0,"&Wcirc;"],[0,"&wcirc;"],[0,"&Ycirc;"],[0,"&ycirc;"],[0,"&Yuml;"],[0,"&Zacute;"],[0,"&zacute;"],[0,"&Zdot;"],[0,"&zdot;"],[0,"&Zcaron;"],[0,"&zcaron;"],[19,"&fnof;"],[34,"&imped;"],[63,"&gacute;"],[65,"&jmath;"],[142,"&circ;"],[0,"&caron;"],[16,"&breve;"],[0,"&DiacriticalDot;"],[0,"&ring;"],[0,"&ogon;"],[0,"&DiacriticalTilde;"],[0,"&dblac;"],[51,"&DownBreve;"],[127,"&Alpha;"],[0,"&Beta;"],[0,"&Gamma;"],[0,"&Delta;"],[0,"&Epsilon;"],[0,"&Zeta;"],[0,"&Eta;"],[0,"&Theta;"],[0,"&Iota;"],[0,"&Kappa;"],[0,"&Lambda;"],[0,"&Mu;"],[0,"&Nu;"],[0,"&Xi;"],[0,"&Omicron;"],[0,"&Pi;"],[0,"&Rho;"],[1,"&Sigma;"],[0,"&Tau;"],[0,"&Upsilon;"],[0,"&Phi;"],[0,"&Chi;"],[0,"&Psi;"],[0,"&ohm;"],[7,"&alpha;"],[0,"&beta;"],[0,"&gamma;"],[0,"&delta;"],[0,"&epsi;"],[0,"&zeta;"],[0,"&eta;"],[0,"&theta;"],[0,"&iota;"],[0,"&kappa;"],[0,"&lambda;"],[0,"&mu;"],[0,"&nu;"],[0,"&xi;"],[0,"&omicron;"],[0,"&pi;"],[0,"&rho;"],[0,"&sigmaf;"],[0,"&sigma;"],[0,"&tau;"],[0,"&upsi;"],[0,"&phi;"],[0,"&chi;"],[0,"&psi;"],[0,"&omega;"],[7,"&thetasym;"],[0,"&Upsi;"],[2,"&phiv;"],[0,"&piv;"],[5,"&Gammad;"],[0,"&digamma;"],[18,"&kappav;"],[0,"&rhov;"],[3,"&epsiv;"],[0,"&backepsilon;"],[10,"&IOcy;"],[0,"&DJcy;"],[0,"&GJcy;"],[0,"&Jukcy;"],[0,"&DScy;"],[0,"&Iukcy;"],[0,"&YIcy;"],[0,"&Jsercy;"],[0,"&LJcy;"],[0,"&NJcy;"],[0,"&TSHcy;"],[0,"&KJcy;"],[1,"&Ubrcy;"],[0,"&DZcy;"],[0,"&Acy;"],[0,"&Bcy;"],[0,"&Vcy;"],[0,"&Gcy;"],[0,"&Dcy;"],[0,"&IEcy;"],[0,"&ZHcy;"],[0,"&Zcy;"],[0,"&Icy;"],[0,"&Jcy;"],[0,"&Kcy;"],[0,"&Lcy;"],[0,"&Mcy;"],[0,"&Ncy;"],[0,"&Ocy;"],[0,"&Pcy;"],[0,"&Rcy;"],[0,"&Scy;"],[0,"&Tcy;"],[0,"&Ucy;"],[0,"&Fcy;"],[0,"&KHcy;"],[0,"&TScy;"],[0,"&CHcy;"],[0,"&SHcy;"],[0,"&SHCHcy;"],[0,"&HARDcy;"],[0,"&Ycy;"],[0,"&SOFTcy;"],[0,"&Ecy;"],[0,"&YUcy;"],[0,"&YAcy;"],[0,"&acy;"],[0,"&bcy;"],[0,"&vcy;"],[0,"&gcy;"],[0,"&dcy;"],[0,"&iecy;"],[0,"&zhcy;"],[0,"&zcy;"],[0,"&icy;"],[0,"&jcy;"],[0,"&kcy;"],[0,"&lcy;"],[0,"&mcy;"],[0,"&ncy;"],[0,"&ocy;"],[0,"&pcy;"],[0,"&rcy;"],[0,"&scy;"],[0,"&tcy;"],[0,"&ucy;"],[0,"&fcy;"],[0,"&khcy;"],[0,"&tscy;"],[0,"&chcy;"],[0,"&shcy;"],[0,"&shchcy;"],[0,"&hardcy;"],[0,"&ycy;"],[0,"&softcy;"],[0,"&ecy;"],[0,"&yucy;"],[0,"&yacy;"],[1,"&iocy;"],[0,"&djcy;"],[0,"&gjcy;"],[0,"&jukcy;"],[0,"&dscy;"],[0,"&iukcy;"],[0,"&yicy;"],[0,"&jsercy;"],[0,"&ljcy;"],[0,"&njcy;"],[0,"&tshcy;"],[0,"&kjcy;"],[1,"&ubrcy;"],[0,"&dzcy;"],[7074,"&ensp;"],[0,"&emsp;"],[0,"&emsp13;"],[0,"&emsp14;"],[1,"&numsp;"],[0,"&puncsp;"],[0,"&ThinSpace;"],[0,"&hairsp;"],[0,"&NegativeMediumSpace;"],[0,"&zwnj;"],[0,"&zwj;"],[0,"&lrm;"],[0,"&rlm;"],[0,"&dash;"],[2,"&ndash;"],[0,"&mdash;"],[0,"&horbar;"],[0,"&Verbar;"],[1,"&lsquo;"],[0,"&CloseCurlyQuote;"],[0,"&lsquor;"],[1,"&ldquo;"],[0,"&CloseCurlyDoubleQuote;"],[0,"&bdquo;"],[1,"&dagger;"],[0,"&Dagger;"],[0,"&bull;"],[2,"&nldr;"],[0,"&hellip;"],[9,"&permil;"],[0,"&pertenk;"],[0,"&prime;"],[0,"&Prime;"],[0,"&tprime;"],[0,"&backprime;"],[3,"&lsaquo;"],[0,"&rsaquo;"],[3,"&oline;"],[2,"&caret;"],[1,"&hybull;"],[0,"&frasl;"],[10,"&bsemi;"],[7,"&qprime;"],[7,{v:"&MediumSpace;",n:8202,o:"&ThickSpace;"}],[0,"&NoBreak;"],[0,"&af;"],[0,"&InvisibleTimes;"],[0,"&ic;"],[72,"&euro;"],[46,"&tdot;"],[0,"&DotDot;"],[37,"&complexes;"],[2,"&incare;"],[4,"&gscr;"],[0,"&hamilt;"],[0,"&Hfr;"],[0,"&Hopf;"],[0,"&planckh;"],[0,"&hbar;"],[0,"&imagline;"],[0,"&Ifr;"],[0,"&lagran;"],[0,"&ell;"],[1,"&naturals;"],[0,"&numero;"],[0,"&copysr;"],[0,"&weierp;"],[0,"&Popf;"],[0,"&Qopf;"],[0,"&realine;"],[0,"&real;"],[0,"&reals;"],[0,"&rx;"],[3,"&trade;"],[1,"&integers;"],[2,"&mho;"],[0,"&zeetrf;"],[0,"&iiota;"],[2,"&bernou;"],[0,"&Cayleys;"],[1,"&escr;"],[0,"&Escr;"],[0,"&Fouriertrf;"],[1,"&Mellintrf;"],[0,"&order;"],[0,"&alefsym;"],[0,"&beth;"],[0,"&gimel;"],[0,"&daleth;"],[12,"&CapitalDifferentialD;"],[0,"&dd;"],[0,"&ee;"],[0,"&ii;"],[10,"&frac13;"],[0,"&frac23;"],[0,"&frac15;"],[0,"&frac25;"],[0,"&frac35;"],[0,"&frac45;"],[0,"&frac16;"],[0,"&frac56;"],[0,"&frac18;"],[0,"&frac38;"],[0,"&frac58;"],[0,"&frac78;"],[49,"&larr;"],[0,"&ShortUpArrow;"],[0,"&rarr;"],[0,"&darr;"],[0,"&harr;"],[0,"&updownarrow;"],[0,"&nwarr;"],[0,"&nearr;"],[0,"&LowerRightArrow;"],[0,"&LowerLeftArrow;"],[0,"&nlarr;"],[0,"&nrarr;"],[1,{v:"&rarrw;",n:824,o:"&nrarrw;"}],[0,"&Larr;"],[0,"&Uarr;"],[0,"&Rarr;"],[0,"&Darr;"],[0,"&larrtl;"],[0,"&rarrtl;"],[0,"&LeftTeeArrow;"],[0,"&mapstoup;"],[0,"&map;"],[0,"&DownTeeArrow;"],[1,"&hookleftarrow;"],[0,"&hookrightarrow;"],[0,"&larrlp;"],[0,"&looparrowright;"],[0,"&harrw;"],[0,"&nharr;"],[1,"&lsh;"],[0,"&rsh;"],[0,"&ldsh;"],[0,"&rdsh;"],[1,"&crarr;"],[0,"&cularr;"],[0,"&curarr;"],[2,"&circlearrowleft;"],[0,"&circlearrowright;"],[0,"&leftharpoonup;"],[0,"&DownLeftVector;"],[0,"&RightUpVector;"],[0,"&LeftUpVector;"],[0,"&rharu;"],[0,"&DownRightVector;"],[0,"&dharr;"],[0,"&dharl;"],[0,"&RightArrowLeftArrow;"],[0,"&udarr;"],[0,"&LeftArrowRightArrow;"],[0,"&leftleftarrows;"],[0,"&upuparrows;"],[0,"&rightrightarrows;"],[0,"&ddarr;"],[0,"&leftrightharpoons;"],[0,"&Equilibrium;"],[0,"&nlArr;"],[0,"&nhArr;"],[0,"&nrArr;"],[0,"&DoubleLeftArrow;"],[0,"&DoubleUpArrow;"],[0,"&DoubleRightArrow;"],[0,"&dArr;"],[0,"&DoubleLeftRightArrow;"],[0,"&DoubleUpDownArrow;"],[0,"&nwArr;"],[0,"&neArr;"],[0,"&seArr;"],[0,"&swArr;"],[0,"&lAarr;"],[0,"&rAarr;"],[1,"&zigrarr;"],[6,"&larrb;"],[0,"&rarrb;"],[15,"&DownArrowUpArrow;"],[7,"&loarr;"],[0,"&roarr;"],[0,"&hoarr;"],[0,"&forall;"],[0,"&comp;"],[0,{v:"&part;",n:824,o:"&npart;"}],[0,"&exist;"],[0,"&nexist;"],[0,"&empty;"],[1,"&Del;"],[0,"&Element;"],[0,"&NotElement;"],[1,"&ni;"],[0,"&notni;"],[2,"&prod;"],[0,"&coprod;"],[0,"&sum;"],[0,"&minus;"],[0,"&MinusPlus;"],[0,"&dotplus;"],[1,"&Backslash;"],[0,"&lowast;"],[0,"&compfn;"],[1,"&radic;"],[2,"&prop;"],[0,"&infin;"],[0,"&angrt;"],[0,{v:"&ang;",n:8402,o:"&nang;"}],[0,"&angmsd;"],[0,"&angsph;"],[0,"&mid;"],[0,"&nmid;"],[0,"&DoubleVerticalBar;"],[0,"&NotDoubleVerticalBar;"],[0,"&and;"],[0,"&or;"],[0,{v:"&cap;",n:65024,o:"&caps;"}],[0,{v:"&cup;",n:65024,o:"&cups;"}],[0,"&int;"],[0,"&Int;"],[0,"&iiint;"],[0,"&conint;"],[0,"&Conint;"],[0,"&Cconint;"],[0,"&cwint;"],[0,"&ClockwiseContourIntegral;"],[0,"&awconint;"],[0,"&there4;"],[0,"&becaus;"],[0,"&ratio;"],[0,"&Colon;"],[0,"&dotminus;"],[1,"&mDDot;"],[0,"&homtht;"],[0,{v:"&sim;",n:8402,o:"&nvsim;"}],[0,{v:"&backsim;",n:817,o:"&race;"}],[0,{v:"&ac;",n:819,o:"&acE;"}],[0,"&acd;"],[0,"&VerticalTilde;"],[0,"&NotTilde;"],[0,{v:"&eqsim;",n:824,o:"&nesim;"}],[0,"&sime;"],[0,"&NotTildeEqual;"],[0,"&cong;"],[0,"&simne;"],[0,"&ncong;"],[0,"&ap;"],[0,"&nap;"],[0,"&ape;"],[0,{v:"&apid;",n:824,o:"&napid;"}],[0,"&backcong;"],[0,{v:"&asympeq;",n:8402,o:"&nvap;"}],[0,{v:"&bump;",n:824,o:"&nbump;"}],[0,{v:"&bumpe;",n:824,o:"&nbumpe;"}],[0,{v:"&doteq;",n:824,o:"&nedot;"}],[0,"&doteqdot;"],[0,"&efDot;"],[0,"&erDot;"],[0,"&Assign;"],[0,"&ecolon;"],[0,"&ecir;"],[0,"&circeq;"],[1,"&wedgeq;"],[0,"&veeeq;"],[1,"&triangleq;"],[2,"&equest;"],[0,"&ne;"],[0,{v:"&Congruent;",n:8421,o:"&bnequiv;"}],[0,"&nequiv;"],[1,{v:"&le;",n:8402,o:"&nvle;"}],[0,{v:"&ge;",n:8402,o:"&nvge;"}],[0,{v:"&lE;",n:824,o:"&nlE;"}],[0,{v:"&gE;",n:824,o:"&ngE;"}],[0,{v:"&lnE;",n:65024,o:"&lvertneqq;"}],[0,{v:"&gnE;",n:65024,o:"&gvertneqq;"}],[0,{v:"&ll;",n:new Map(te([[824,"&nLtv;"],[7577,"&nLt;"]]))}],[0,{v:"&gg;",n:new Map(te([[824,"&nGtv;"],[7577,"&nGt;"]]))}],[0,"&between;"],[0,"&NotCupCap;"],[0,"&nless;"],[0,"&ngt;"],[0,"&nle;"],[0,"&nge;"],[0,"&lesssim;"],[0,"&GreaterTilde;"],[0,"&nlsim;"],[0,"&ngsim;"],[0,"&LessGreater;"],[0,"&gl;"],[0,"&NotLessGreater;"],[0,"&NotGreaterLess;"],[0,"&pr;"],[0,"&sc;"],[0,"&prcue;"],[0,"&sccue;"],[0,"&PrecedesTilde;"],[0,{v:"&scsim;",n:824,o:"&NotSucceedsTilde;"}],[0,"&NotPrecedes;"],[0,"&NotSucceeds;"],[0,{v:"&sub;",n:8402,o:"&NotSubset;"}],[0,{v:"&sup;",n:8402,o:"&NotSuperset;"}],[0,"&nsub;"],[0,"&nsup;"],[0,"&sube;"],[0,"&supe;"],[0,"&NotSubsetEqual;"],[0,"&NotSupersetEqual;"],[0,{v:"&subne;",n:65024,o:"&varsubsetneq;"}],[0,{v:"&supne;",n:65024,o:"&varsupsetneq;"}],[1,"&cupdot;"],[0,"&UnionPlus;"],[0,{v:"&sqsub;",n:824,o:"&NotSquareSubset;"}],[0,{v:"&sqsup;",n:824,o:"&NotSquareSuperset;"}],[0,"&sqsube;"],[0,"&sqsupe;"],[0,{v:"&sqcap;",n:65024,o:"&sqcaps;"}],[0,{v:"&sqcup;",n:65024,o:"&sqcups;"}],[0,"&CirclePlus;"],[0,"&CircleMinus;"],[0,"&CircleTimes;"],[0,"&osol;"],[0,"&CircleDot;"],[0,"&circledcirc;"],[0,"&circledast;"],[1,"&circleddash;"],[0,"&boxplus;"],[0,"&boxminus;"],[0,"&boxtimes;"],[0,"&dotsquare;"],[0,"&RightTee;"],[0,"&dashv;"],[0,"&DownTee;"],[0,"&bot;"],[1,"&models;"],[0,"&DoubleRightTee;"],[0,"&Vdash;"],[0,"&Vvdash;"],[0,"&VDash;"],[0,"&nvdash;"],[0,"&nvDash;"],[0,"&nVdash;"],[0,"&nVDash;"],[0,"&prurel;"],[1,"&LeftTriangle;"],[0,"&RightTriangle;"],[0,{v:"&LeftTriangleEqual;",n:8402,o:"&nvltrie;"}],[0,{v:"&RightTriangleEqual;",n:8402,o:"&nvrtrie;"}],[0,"&origof;"],[0,"&imof;"],[0,"&multimap;"],[0,"&hercon;"],[0,"&intcal;"],[0,"&veebar;"],[1,"&barvee;"],[0,"&angrtvb;"],[0,"&lrtri;"],[0,"&bigwedge;"],[0,"&bigvee;"],[0,"&bigcap;"],[0,"&bigcup;"],[0,"&diam;"],[0,"&sdot;"],[0,"&sstarf;"],[0,"&divideontimes;"],[0,"&bowtie;"],[0,"&ltimes;"],[0,"&rtimes;"],[0,"&leftthreetimes;"],[0,"&rightthreetimes;"],[0,"&backsimeq;"],[0,"&curlyvee;"],[0,"&curlywedge;"],[0,"&Sub;"],[0,"&Sup;"],[0,"&Cap;"],[0,"&Cup;"],[0,"&fork;"],[0,"&epar;"],[0,"&lessdot;"],[0,"&gtdot;"],[0,{v:"&Ll;",n:824,o:"&nLl;"}],[0,{v:"&Gg;",n:824,o:"&nGg;"}],[0,{v:"&leg;",n:65024,o:"&lesg;"}],[0,{v:"&gel;",n:65024,o:"&gesl;"}],[2,"&cuepr;"],[0,"&cuesc;"],[0,"&NotPrecedesSlantEqual;"],[0,"&NotSucceedsSlantEqual;"],[0,"&NotSquareSubsetEqual;"],[0,"&NotSquareSupersetEqual;"],[2,"&lnsim;"],[0,"&gnsim;"],[0,"&precnsim;"],[0,"&scnsim;"],[0,"&nltri;"],[0,"&NotRightTriangle;"],[0,"&nltrie;"],[0,"&NotRightTriangleEqual;"],[0,"&vellip;"],[0,"&ctdot;"],[0,"&utdot;"],[0,"&dtdot;"],[0,"&disin;"],[0,"&isinsv;"],[0,"&isins;"],[0,{v:"&isindot;",n:824,o:"&notindot;"}],[0,"&notinvc;"],[0,"&notinvb;"],[1,{v:"&isinE;",n:824,o:"&notinE;"}],[0,"&nisd;"],[0,"&xnis;"],[0,"&nis;"],[0,"&notnivc;"],[0,"&notnivb;"],[6,"&barwed;"],[0,"&Barwed;"],[1,"&lceil;"],[0,"&rceil;"],[0,"&LeftFloor;"],[0,"&rfloor;"],[0,"&drcrop;"],[0,"&dlcrop;"],[0,"&urcrop;"],[0,"&ulcrop;"],[0,"&bnot;"],[1,"&profline;"],[0,"&profsurf;"],[1,"&telrec;"],[0,"&target;"],[5,"&ulcorn;"],[0,"&urcorn;"],[0,"&dlcorn;"],[0,"&drcorn;"],[2,"&frown;"],[0,"&smile;"],[9,"&cylcty;"],[0,"&profalar;"],[7,"&topbot;"],[6,"&ovbar;"],[1,"&solbar;"],[60,"&angzarr;"],[51,"&lmoustache;"],[0,"&rmoustache;"],[2,"&OverBracket;"],[0,"&bbrk;"],[0,"&bbrktbrk;"],[37,"&OverParenthesis;"],[0,"&UnderParenthesis;"],[0,"&OverBrace;"],[0,"&UnderBrace;"],[2,"&trpezium;"],[4,"&elinters;"],[59,"&blank;"],[164,"&circledS;"],[55,"&boxh;"],[1,"&boxv;"],[9,"&boxdr;"],[3,"&boxdl;"],[3,"&boxur;"],[3,"&boxul;"],[3,"&boxvr;"],[7,"&boxvl;"],[7,"&boxhd;"],[7,"&boxhu;"],[7,"&boxvh;"],[19,"&boxH;"],[0,"&boxV;"],[0,"&boxdR;"],[0,"&boxDr;"],[0,"&boxDR;"],[0,"&boxdL;"],[0,"&boxDl;"],[0,"&boxDL;"],[0,"&boxuR;"],[0,"&boxUr;"],[0,"&boxUR;"],[0,"&boxuL;"],[0,"&boxUl;"],[0,"&boxUL;"],[0,"&boxvR;"],[0,"&boxVr;"],[0,"&boxVR;"],[0,"&boxvL;"],[0,"&boxVl;"],[0,"&boxVL;"],[0,"&boxHd;"],[0,"&boxhD;"],[0,"&boxHD;"],[0,"&boxHu;"],[0,"&boxhU;"],[0,"&boxHU;"],[0,"&boxvH;"],[0,"&boxVh;"],[0,"&boxVH;"],[19,"&uhblk;"],[3,"&lhblk;"],[3,"&block;"],[8,"&blk14;"],[0,"&blk12;"],[0,"&blk34;"],[13,"&square;"],[8,"&blacksquare;"],[0,"&EmptyVerySmallSquare;"],[1,"&rect;"],[0,"&marker;"],[2,"&fltns;"],[1,"&bigtriangleup;"],[0,"&blacktriangle;"],[0,"&triangle;"],[2,"&blacktriangleright;"],[0,"&rtri;"],[3,"&bigtriangledown;"],[0,"&blacktriangledown;"],[0,"&dtri;"],[2,"&blacktriangleleft;"],[0,"&ltri;"],[6,"&loz;"],[0,"&cir;"],[32,"&tridot;"],[2,"&bigcirc;"],[8,"&ultri;"],[0,"&urtri;"],[0,"&lltri;"],[0,"&EmptySmallSquare;"],[0,"&FilledSmallSquare;"],[8,"&bigstar;"],[0,"&star;"],[7,"&phone;"],[49,"&female;"],[1,"&male;"],[29,"&spades;"],[2,"&clubs;"],[1,"&hearts;"],[0,"&diamondsuit;"],[3,"&sung;"],[2,"&flat;"],[0,"&natural;"],[0,"&sharp;"],[163,"&check;"],[3,"&cross;"],[8,"&malt;"],[21,"&sext;"],[33,"&VerticalSeparator;"],[25,"&lbbrk;"],[0,"&rbbrk;"],[84,"&bsolhsub;"],[0,"&suphsol;"],[28,"&LeftDoubleBracket;"],[0,"&RightDoubleBracket;"],[0,"&lang;"],[0,"&rang;"],[0,"&Lang;"],[0,"&Rang;"],[0,"&loang;"],[0,"&roang;"],[7,"&longleftarrow;"],[0,"&longrightarrow;"],[0,"&longleftrightarrow;"],[0,"&DoubleLongLeftArrow;"],[0,"&DoubleLongRightArrow;"],[0,"&DoubleLongLeftRightArrow;"],[1,"&longmapsto;"],[2,"&dzigrarr;"],[258,"&nvlArr;"],[0,"&nvrArr;"],[0,"&nvHarr;"],[0,"&Map;"],[6,"&lbarr;"],[0,"&bkarow;"],[0,"&lBarr;"],[0,"&dbkarow;"],[0,"&drbkarow;"],[0,"&DDotrahd;"],[0,"&UpArrowBar;"],[0,"&DownArrowBar;"],[2,"&Rarrtl;"],[2,"&latail;"],[0,"&ratail;"],[0,"&lAtail;"],[0,"&rAtail;"],[0,"&larrfs;"],[0,"&rarrfs;"],[0,"&larrbfs;"],[0,"&rarrbfs;"],[2,"&nwarhk;"],[0,"&nearhk;"],[0,"&hksearow;"],[0,"&hkswarow;"],[0,"&nwnear;"],[0,"&nesear;"],[0,"&seswar;"],[0,"&swnwar;"],[8,{v:"&rarrc;",n:824,o:"&nrarrc;"}],[1,"&cudarrr;"],[0,"&ldca;"],[0,"&rdca;"],[0,"&cudarrl;"],[0,"&larrpl;"],[2,"&curarrm;"],[0,"&cularrp;"],[7,"&rarrpl;"],[2,"&harrcir;"],[0,"&Uarrocir;"],[0,"&lurdshar;"],[0,"&ldrushar;"],[2,"&LeftRightVector;"],[0,"&RightUpDownVector;"],[0,"&DownLeftRightVector;"],[0,"&LeftUpDownVector;"],[0,"&LeftVectorBar;"],[0,"&RightVectorBar;"],[0,"&RightUpVectorBar;"],[0,"&RightDownVectorBar;"],[0,"&DownLeftVectorBar;"],[0,"&DownRightVectorBar;"],[0,"&LeftUpVectorBar;"],[0,"&LeftDownVectorBar;"],[0,"&LeftTeeVector;"],[0,"&RightTeeVector;"],[0,"&RightUpTeeVector;"],[0,"&RightDownTeeVector;"],[0,"&DownLeftTeeVector;"],[0,"&DownRightTeeVector;"],[0,"&LeftUpTeeVector;"],[0,"&LeftDownTeeVector;"],[0,"&lHar;"],[0,"&uHar;"],[0,"&rHar;"],[0,"&dHar;"],[0,"&luruhar;"],[0,"&ldrdhar;"],[0,"&ruluhar;"],[0,"&rdldhar;"],[0,"&lharul;"],[0,"&llhard;"],[0,"&rharul;"],[0,"&lrhard;"],[0,"&udhar;"],[0,"&duhar;"],[0,"&RoundImplies;"],[0,"&erarr;"],[0,"&simrarr;"],[0,"&larrsim;"],[0,"&rarrsim;"],[0,"&rarrap;"],[0,"&ltlarr;"],[1,"&gtrarr;"],[0,"&subrarr;"],[1,"&suplarr;"],[0,"&lfisht;"],[0,"&rfisht;"],[0,"&ufisht;"],[0,"&dfisht;"],[5,"&lopar;"],[0,"&ropar;"],[4,"&lbrke;"],[0,"&rbrke;"],[0,"&lbrkslu;"],[0,"&rbrksld;"],[0,"&lbrksld;"],[0,"&rbrkslu;"],[0,"&langd;"],[0,"&rangd;"],[0,"&lparlt;"],[0,"&rpargt;"],[0,"&gtlPar;"],[0,"&ltrPar;"],[3,"&vzigzag;"],[1,"&vangrt;"],[0,"&angrtvbd;"],[6,"&ange;"],[0,"&range;"],[0,"&dwangle;"],[0,"&uwangle;"],[0,"&angmsdaa;"],[0,"&angmsdab;"],[0,"&angmsdac;"],[0,"&angmsdad;"],[0,"&angmsdae;"],[0,"&angmsdaf;"],[0,"&angmsdag;"],[0,"&angmsdah;"],[0,"&bemptyv;"],[0,"&demptyv;"],[0,"&cemptyv;"],[0,"&raemptyv;"],[0,"&laemptyv;"],[0,"&ohbar;"],[0,"&omid;"],[0,"&opar;"],[1,"&operp;"],[1,"&olcross;"],[0,"&odsold;"],[1,"&olcir;"],[0,"&ofcir;"],[0,"&olt;"],[0,"&ogt;"],[0,"&cirscir;"],[0,"&cirE;"],[0,"&solb;"],[0,"&bsolb;"],[3,"&boxbox;"],[3,"&trisb;"],[0,"&rtriltri;"],[0,{v:"&LeftTriangleBar;",n:824,o:"&NotLeftTriangleBar;"}],[0,{v:"&RightTriangleBar;",n:824,o:"&NotRightTriangleBar;"}],[11,"&iinfin;"],[0,"&infintie;"],[0,"&nvinfin;"],[4,"&eparsl;"],[0,"&smeparsl;"],[0,"&eqvparsl;"],[5,"&blacklozenge;"],[8,"&RuleDelayed;"],[1,"&dsol;"],[9,"&bigodot;"],[0,"&bigoplus;"],[0,"&bigotimes;"],[1,"&biguplus;"],[1,"&bigsqcup;"],[5,"&iiiint;"],[0,"&fpartint;"],[2,"&cirfnint;"],[0,"&awint;"],[0,"&rppolint;"],[0,"&scpolint;"],[0,"&npolint;"],[0,"&pointint;"],[0,"&quatint;"],[0,"&intlarhk;"],[10,"&pluscir;"],[0,"&plusacir;"],[0,"&simplus;"],[0,"&plusdu;"],[0,"&plussim;"],[0,"&plustwo;"],[1,"&mcomma;"],[0,"&minusdu;"],[2,"&loplus;"],[0,"&roplus;"],[0,"&Cross;"],[0,"&timesd;"],[0,"&timesbar;"],[1,"&smashp;"],[0,"&lotimes;"],[0,"&rotimes;"],[0,"&otimesas;"],[0,"&Otimes;"],[0,"&odiv;"],[0,"&triplus;"],[0,"&triminus;"],[0,"&tritime;"],[0,"&intprod;"],[2,"&amalg;"],[0,"&capdot;"],[1,"&ncup;"],[0,"&ncap;"],[0,"&capand;"],[0,"&cupor;"],[0,"&cupcap;"],[0,"&capcup;"],[0,"&cupbrcap;"],[0,"&capbrcup;"],[0,"&cupcup;"],[0,"&capcap;"],[0,"&ccups;"],[0,"&ccaps;"],[2,"&ccupssm;"],[2,"&And;"],[0,"&Or;"],[0,"&andand;"],[0,"&oror;"],[0,"&orslope;"],[0,"&andslope;"],[1,"&andv;"],[0,"&orv;"],[0,"&andd;"],[0,"&ord;"],[1,"&wedbar;"],[6,"&sdote;"],[3,"&simdot;"],[2,{v:"&congdot;",n:824,o:"&ncongdot;"}],[0,"&easter;"],[0,"&apacir;"],[0,{v:"&apE;",n:824,o:"&napE;"}],[0,"&eplus;"],[0,"&pluse;"],[0,"&Esim;"],[0,"&Colone;"],[0,"&Equal;"],[1,"&ddotseq;"],[0,"&equivDD;"],[0,"&ltcir;"],[0,"&gtcir;"],[0,"&ltquest;"],[0,"&gtquest;"],[0,{v:"&leqslant;",n:824,o:"&nleqslant;"}],[0,{v:"&geqslant;",n:824,o:"&ngeqslant;"}],[0,"&lesdot;"],[0,"&gesdot;"],[0,"&lesdoto;"],[0,"&gesdoto;"],[0,"&lesdotor;"],[0,"&gesdotol;"],[0,"&lap;"],[0,"&gap;"],[0,"&lne;"],[0,"&gne;"],[0,"&lnap;"],[0,"&gnap;"],[0,"&lEg;"],[0,"&gEl;"],[0,"&lsime;"],[0,"&gsime;"],[0,"&lsimg;"],[0,"&gsiml;"],[0,"&lgE;"],[0,"&glE;"],[0,"&lesges;"],[0,"&gesles;"],[0,"&els;"],[0,"&egs;"],[0,"&elsdot;"],[0,"&egsdot;"],[0,"&el;"],[0,"&eg;"],[2,"&siml;"],[0,"&simg;"],[0,"&simlE;"],[0,"&simgE;"],[0,{v:"&LessLess;",n:824,o:"&NotNestedLessLess;"}],[0,{v:"&GreaterGreater;",n:824,o:"&NotNestedGreaterGreater;"}],[1,"&glj;"],[0,"&gla;"],[0,"&ltcc;"],[0,"&gtcc;"],[0,"&lescc;"],[0,"&gescc;"],[0,"&smt;"],[0,"&lat;"],[0,{v:"&smte;",n:65024,o:"&smtes;"}],[0,{v:"&late;",n:65024,o:"&lates;"}],[0,"&bumpE;"],[0,{v:"&PrecedesEqual;",n:824,o:"&NotPrecedesEqual;"}],[0,{v:"&sce;",n:824,o:"&NotSucceedsEqual;"}],[2,"&prE;"],[0,"&scE;"],[0,"&precneqq;"],[0,"&scnE;"],[0,"&prap;"],[0,"&scap;"],[0,"&precnapprox;"],[0,"&scnap;"],[0,"&Pr;"],[0,"&Sc;"],[0,"&subdot;"],[0,"&supdot;"],[0,"&subplus;"],[0,"&supplus;"],[0,"&submult;"],[0,"&supmult;"],[0,"&subedot;"],[0,"&supedot;"],[0,{v:"&subE;",n:824,o:"&nsubE;"}],[0,{v:"&supE;",n:824,o:"&nsupE;"}],[0,"&subsim;"],[0,"&supsim;"],[2,{v:"&subnE;",n:65024,o:"&varsubsetneqq;"}],[0,{v:"&supnE;",n:65024,o:"&varsupsetneqq;"}],[2,"&csub;"],[0,"&csup;"],[0,"&csube;"],[0,"&csupe;"],[0,"&subsup;"],[0,"&supsub;"],[0,"&subsub;"],[0,"&supsup;"],[0,"&suphsub;"],[0,"&supdsub;"],[0,"&forkv;"],[0,"&topfork;"],[0,"&mlcp;"],[8,"&Dashv;"],[1,"&Vdashl;"],[0,"&Barv;"],[0,"&vBar;"],[0,"&vBarv;"],[1,"&Vbar;"],[0,"&Not;"],[0,"&bNot;"],[0,"&rnmid;"],[0,"&cirmid;"],[0,"&midcir;"],[0,"&topcir;"],[0,"&nhpar;"],[0,"&parsim;"],[9,{v:"&parsl;",n:8421,o:"&nparsl;"}],[44343,{n:new Map(te([[56476,"&Ascr;"],[1,"&Cscr;"],[0,"&Dscr;"],[2,"&Gscr;"],[2,"&Jscr;"],[0,"&Kscr;"],[2,"&Nscr;"],[0,"&Oscr;"],[0,"&Pscr;"],[0,"&Qscr;"],[1,"&Sscr;"],[0,"&Tscr;"],[0,"&Uscr;"],[0,"&Vscr;"],[0,"&Wscr;"],[0,"&Xscr;"],[0,"&Yscr;"],[0,"&Zscr;"],[0,"&ascr;"],[0,"&bscr;"],[0,"&cscr;"],[0,"&dscr;"],[1,"&fscr;"],[1,"&hscr;"],[0,"&iscr;"],[0,"&jscr;"],[0,"&kscr;"],[0,"&lscr;"],[0,"&mscr;"],[0,"&nscr;"],[1,"&pscr;"],[0,"&qscr;"],[0,"&rscr;"],[0,"&sscr;"],[0,"&tscr;"],[0,"&uscr;"],[0,"&vscr;"],[0,"&wscr;"],[0,"&xscr;"],[0,"&yscr;"],[0,"&zscr;"],[52,"&Afr;"],[0,"&Bfr;"],[1,"&Dfr;"],[0,"&Efr;"],[0,"&Ffr;"],[0,"&Gfr;"],[2,"&Jfr;"],[0,"&Kfr;"],[0,"&Lfr;"],[0,"&Mfr;"],[0,"&Nfr;"],[0,"&Ofr;"],[0,"&Pfr;"],[0,"&Qfr;"],[1,"&Sfr;"],[0,"&Tfr;"],[0,"&Ufr;"],[0,"&Vfr;"],[0,"&Wfr;"],[0,"&Xfr;"],[0,"&Yfr;"],[1,"&afr;"],[0,"&bfr;"],[0,"&cfr;"],[0,"&dfr;"],[0,"&efr;"],[0,"&ffr;"],[0,"&gfr;"],[0,"&hfr;"],[0,"&ifr;"],[0,"&jfr;"],[0,"&kfr;"],[0,"&lfr;"],[0,"&mfr;"],[0,"&nfr;"],[0,"&ofr;"],[0,"&pfr;"],[0,"&qfr;"],[0,"&rfr;"],[0,"&sfr;"],[0,"&tfr;"],[0,"&ufr;"],[0,"&vfr;"],[0,"&wfr;"],[0,"&xfr;"],[0,"&yfr;"],[0,"&zfr;"],[0,"&Aopf;"],[0,"&Bopf;"],[1,"&Dopf;"],[0,"&Eopf;"],[0,"&Fopf;"],[0,"&Gopf;"],[1,"&Iopf;"],[0,"&Jopf;"],[0,"&Kopf;"],[0,"&Lopf;"],[0,"&Mopf;"],[1,"&Oopf;"],[3,"&Sopf;"],[0,"&Topf;"],[0,"&Uopf;"],[0,"&Vopf;"],[0,"&Wopf;"],[0,"&Xopf;"],[0,"&Yopf;"],[1,"&aopf;"],[0,"&bopf;"],[0,"&copf;"],[0,"&dopf;"],[0,"&eopf;"],[0,"&fopf;"],[0,"&gopf;"],[0,"&hopf;"],[0,"&iopf;"],[0,"&jopf;"],[0,"&kopf;"],[0,"&lopf;"],[0,"&mopf;"],[0,"&nopf;"],[0,"&oopf;"],[0,"&popf;"],[0,"&qopf;"],[0,"&ropf;"],[0,"&sopf;"],[0,"&topf;"],[0,"&uopf;"],[0,"&vopf;"],[0,"&wopf;"],[0,"&xopf;"],[0,"&yopf;"],[0,"&zopf;"]]))}],[8906,"&fflig;"],[0,"&filig;"],[0,"&fllig;"],[0,"&ffilig;"],[0,"&ffllig;"]]));const re=/["&'<>$\x80-\uFFFF]/g,ne=new Map([[34,"&quot;"],[38,"&amp;"],[39,"&apos;"],[60,"&lt;"],[62,"&gt;"]]),se=null!=String.prototype.codePointAt?(e,t)=>e.codePointAt(t):(e,t)=>55296==(64512&e.charCodeAt(t))?1024*(e.charCodeAt(t)-55296)+e.charCodeAt(t+1)-56320+65536:e.charCodeAt(t);function ie(e){let t,r="",n=0;for(;null!==(t=re.exec(e));){const s=t.index,i=e.charCodeAt(s),a=ne.get(i);void 0!==a?(r+=e.substring(n,s)+a,n=s+1):(r+=`${e.substring(n,s)}&#x${se(e,s).toString(16)};`,n=re.lastIndex+=Number(55296==(64512&i)))}return r+e.substr(n)}function ae(e,t){return function(r){let n,s=0,i="";for(;n=e.exec(r);)s!==n.index&&(i+=r.substring(s,n.index)),i+=t.get(n[0].charCodeAt(0)),s=n.index+1;return i+r.substring(s)}}ae(/[&<>'"]/g,ne);const oe=ae(/["&\u00A0]/g,new Map([[34,"&quot;"],[38,"&amp;"],[160,"&nbsp;"]])),ce=ae(/[&<>\u00A0]/g,new Map([[38,"&amp;"],[60,"&lt;"],[62,"&gt;"],[160,"&nbsp;"]]));var le,ue;!function(e){e[e.XML=0]="XML",e[e.HTML=1]="HTML"}(le||(le={})),function(e){e[e.UTF8=0]="UTF8",e[e.ASCII=1]="ASCII",e[e.Extensive=2]="Extensive",e[e.Attribute=3]="Attribute",e[e.Text=4]="Text"}(ue||(ue={}));const he=new Map(["altGlyph","altGlyphDef","altGlyphItem","animateColor","animateMotion","animateTransform","clipPath","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","foreignObject","glyphRef","linearGradient","radialGradient","textPath"].map((e=>[e.toLowerCase(),e]))),de=new Map(["definitionURL","attributeName","attributeType","baseFrequency","baseProfile","calcMode","clipPathUnits","diffuseConstant","edgeMode","filterUnits","glyphRef","gradientTransform","gradientUnits","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","lengthAdjust","limitingConeAngle","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","numOctaves","pathLength","patternContentUnits","patternTransform","patternUnits","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","specularConstant","specularExponent","spreadMethod","startOffset","stdDeviation","stitchTiles","surfaceScale","systemLanguage","tableValues","targetX","targetY","textLength","viewBox","viewTarget","xChannelSelector","yChannelSelector","zoomAndPan"].map((e=>[e.toLowerCase(),e]))),pe=new Set(["style","script","xmp","iframe","noembed","noframes","plaintext","noscript"]);function fe(e){return e.replace(/"/g,"&quot;")}const Ee=new Set(["area","base","basefont","br","col","command","embed","frame","hr","img","input","isindex","keygen","link","meta","param","source","track","wbr"]);function me(e,t={}){const r="length"in e?e:[e];let n="";for(let e=0;e<r.length;e++)n+=Ae(r[e],t);return n}const Te=me;function Ae(e,t){switch(e.type){case d:return me(e.children,t);case _:case f:return`<${e.data}>`;case E:return`\x3c!--${e.data}--\x3e`;case g:return function(e){return`<![CDATA[${e.children[0].data}]]>`}(e);case m:case T:case A:return function(e,t){var r;"foreign"===t.xmlMode&&(e.name=null!==(r=he.get(e.name))&&void 0!==r?r:e.name,e.parent&&ge.has(e.parent.name)&&(t={...t,xmlMode:!1})),!t.xmlMode&&_e.has(e.name)&&(t={...t,xmlMode:"foreign"});let n=`<${e.name}`;const s=function(e,t){var r;if(!e)return;const n=!1===(null!==(r=t.encodeEntities)&&void 0!==r?r:t.decodeEntities)?fe:t.xmlMode||"utf8"!==t.encodeEntities?ie:oe;return Object.keys(e).map((r=>{var s,i;const a=null!==(s=e[r])&&void 0!==s?s:"";return"foreign"===t.xmlMode&&(r=null!==(i=de.get(r))&&void 0!==i?i:r),t.emptyAttrs||t.xmlMode||""!==a?`${r}="${n(a)}"`:r})).join(" ")}(e.attribs,t);return s&&(n+=` ${s}`),0===e.children.length&&(t.xmlMode?!1!==t.selfClosingTags:t.selfClosingTags&&Ee.has(e.name))?(t.xmlMode||(n+=" "),n+="/>"):(n+=">",e.children.length>0&&(n+=me(e.children,t)),!t.xmlMode&&Ee.has(e.name)||(n+=`</${e.name}>`)),n}(e,t);case p:return function(e,t){var r;let n=e.data||"";return!1===(null!==(r=t.encodeEntities)&&void 0!==r?r:t.decodeEntities)||!t.xmlMode&&e.parent&&pe.has(e.parent.name)||(n=t.xmlMode||"utf8"!==t.encodeEntities?ie(n):ce(n)),n}(e,t)}}const ge=new Set(["mi","mo","mn","ms","mtext","annotation-xml","foreignObject","desc","title"]),_e=new Set(["svg","math"]);function be(e,t){return Te(e,t)}function Se(e,t){return v(e)?e.children.map((e=>be(e,t))).join(""):""}function Ne(e){return Array.isArray(e)?e.map(Ne).join(""):L(e)?"br"===e.name?"\n":Ne(e.children):k(e)?Ne(e.children):w(e)?e.data:""}function Ie(e){return Array.isArray(e)?e.map(Ie).join(""):v(e)&&!P(e)?Ie(e.children):w(e)?e.data:""}function Ce(e){return Array.isArray(e)?e.map(Ce).join(""):v(e)&&(e.type===u.Tag||k(e))?Ce(e.children):w(e)?e.data:""}function ye(e){return v(e)?e.children:[]}function De(e){return e.parent||null}function Oe(e){const t=De(e);if(null!=t)return ye(t);const r=[e];let{prev:n,next:s}=e;for(;null!=n;)r.unshift(n),({prev:n}=n);for(;null!=s;)r.push(s),({next:s}=s);return r}function Re(e,t){var r;return null===(r=e.attribs)||void 0===r?void 0:r[t]}function Le(e,t){return null!=e.attribs&&Object.prototype.hasOwnProperty.call(e.attribs,t)&&null!=e.attribs[t]}function ke(e){return e.name}function we(e){let{next:t}=e;for(;null!==t&&!L(t);)({next:t}=t);return t}function Pe(e){let{prev:t}=e;for(;null!==t&&!L(t);)({prev:t}=t);return t}function Me(e){if(e.prev&&(e.prev.next=e.next),e.next&&(e.next.prev=e.prev),e.parent){const t=e.parent.children,r=t.lastIndexOf(e);r>=0&&t.splice(r,1)}e.next=null,e.prev=null,e.parent=null}function Be(e,t){const r=t.prev=e.prev;r&&(r.next=t);const n=t.next=e.next;n&&(n.prev=t);const s=t.parent=e.parent;if(s){const r=s.children;r[r.lastIndexOf(e)]=t,e.parent=null}}function ve(e,t){if(Me(t),t.next=null,t.parent=e,e.children.push(t)>1){const r=e.children[e.children.length-2];r.next=t,t.prev=r}else t.prev=null}function xe(e,t){Me(t);const{parent:r}=e,n=e.next;if(t.next=n,t.prev=e,e.next=t,t.parent=r,n){if(n.prev=t,r){const e=r.children;e.splice(e.lastIndexOf(n),0,t)}}else r&&r.children.push(t)}function Ue(e,t){if(Me(t),t.parent=e,t.prev=null,1!==e.children.unshift(t)){const r=e.children[1];r.prev=t,t.next=r}else t.next=null}function Fe(e,t){Me(t);const{parent:r}=e;if(r){const n=r.children;n.splice(n.indexOf(e),0,t)}e.prev&&(e.prev.next=t),t.parent=r,t.prev=e.prev,t.next=e,e.prev=t}function He(e,t,r=!0,n=1/0){return Ge(e,Array.isArray(t)?t:[t],r,n)}function Ge(e,t,r,n){const s=[],i=[Array.isArray(t)?t:[t]],a=[0];for(;;){if(a[0]>=i[0].length){if(1===a.length)return s;i.shift(),a.shift();continue}const t=i[0][a[0]++];if(e(t)&&(s.push(t),--n<=0))return s;r&&v(t)&&t.children.length>0&&(a.unshift(0),i.unshift(t.children))}}function qe(e,t){return t.find(e)}function Ye(e,t,r=!0){const n=Array.isArray(t)?t:[t];for(let t=0;t<n.length;t++){const s=n[t];if(L(s)&&e(s))return s;if(r&&v(s)&&s.children.length>0){const t=Ye(e,s.children,!0);if(t)return t}}return null}function Ve(e,t){return(Array.isArray(t)?t:[t]).some((t=>L(t)&&e(t)||v(t)&&Ve(e,t.children)))}function je(e,t){const r=[],n=[Array.isArray(t)?t:[t]],s=[0];for(;;){if(s[0]>=n[0].length){if(1===n.length)return r;n.shift(),s.shift();continue}const t=n[0][s[0]++];L(t)&&e(t)&&r.push(t),v(t)&&t.children.length>0&&(s.unshift(0),n.unshift(t.children))}}const We={tag_name:e=>"function"==typeof e?t=>L(t)&&e(t.name):"*"===e?L:t=>L(t)&&t.name===e,tag_type:e=>"function"==typeof e?t=>e(t.type):t=>t.type===e,tag_contains:e=>"function"==typeof e?t=>w(t)&&e(t.data):t=>w(t)&&t.data===e};function Qe(e,t){return"function"==typeof t?r=>L(r)&&t(r.attribs[e]):r=>L(r)&&r.attribs[e]===t}function Ke(e,t){return r=>e(r)||t(r)}function Xe(e){const t=Object.keys(e).map((t=>{const r=e[t];return Object.prototype.hasOwnProperty.call(We,t)?We[t](r):Qe(t,r)}));return 0===t.length?null:t.reduce(Ke)}function $e(e,t){const r=Xe(e);return!r||r(t)}function ze(e,t,r,n=1/0){const s=Xe(e);return s?He(s,t,r,n):[]}function Je(e,t,r=!0){return Array.isArray(t)||(t=[t]),Ye(Qe("id",e),t,r)}function Ze(e,t,r=!0,n=1/0){return He(We.tag_name(e),t,r,n)}function et(e,t,r=!0,n=1/0){return He(Qe("class",e),t,r,n)}function tt(e,t,r=!0,n=1/0){return He(We.tag_type(e),t,r,n)}function rt(e){let t=e.length;for(;--t>=0;){const r=e[t];if(t>0&&e.lastIndexOf(r,t-1)>=0)e.splice(t,1);else for(let n=r.parent;n;n=n.parent)if(e.includes(n)){e.splice(t,1);break}}return e}var nt;function st(e,t){const r=[],n=[];if(e===t)return 0;let s=v(e)?e:e.parent;for(;s;)r.unshift(s),s=s.parent;for(s=v(t)?t:t.parent;s;)n.unshift(s),s=s.parent;const i=Math.min(r.length,n.length);let a=0;for(;a<i&&r[a]===n[a];)a++;if(0===a)return nt.DISCONNECTED;const o=r[a-1],c=o.children,l=r[a],u=n[a];return c.indexOf(l)>c.indexOf(u)?o===t?nt.FOLLOWING|nt.CONTAINED_BY:nt.FOLLOWING:o===e?nt.PRECEDING|nt.CONTAINS:nt.PRECEDING}function it(e){return(e=e.filter(((e,t,r)=>!r.includes(e,t+1)))).sort(((e,t)=>{const r=st(e,t);return r&nt.PRECEDING?-1:r&nt.FOLLOWING?1:0})),e}function at(e){const t=ut(pt,e);return t?"feed"===t.name?function(e){var t;const r=e.children,n={type:"atom",items:Ze("entry",r).map((e=>{var t;const{children:r}=e,n={media:lt(r)};dt(n,"id","id",r),dt(n,"title","title",r);const s=null===(t=ut("link",r))||void 0===t?void 0:t.attribs.href;s&&(n.link=s);const i=ht("summary",r)||ht("content",r);i&&(n.description=i);const a=ht("updated",r);return a&&(n.pubDate=new Date(a)),n}))};dt(n,"id","id",r),dt(n,"title","title",r);const s=null===(t=ut("link",r))||void 0===t?void 0:t.attribs.href;s&&(n.link=s),dt(n,"description","subtitle",r);const i=ht("updated",r);return i&&(n.updated=new Date(i)),dt(n,"author","email",r,!0),n}(t):function(e){var t,r;const n=null!==(r=null===(t=ut("channel",e.children))||void 0===t?void 0:t.children)&&void 0!==r?r:[],s={type:e.name.substr(0,3),id:"",items:Ze("item",e.children).map((e=>{const{children:t}=e,r={media:lt(t)};dt(r,"id","guid",t),dt(r,"title","title",t),dt(r,"link","link",t),dt(r,"description","description",t);const n=ht("pubDate",t)||ht("dc:date",t);return n&&(r.pubDate=new Date(n)),r}))};dt(s,"title","title",n),dt(s,"link","link",n),dt(s,"description","description",n);const i=ht("lastBuildDate",n);return i&&(s.updated=new Date(i)),dt(s,"author","managingEditor",n,!0),s}(t):null}!function(e){e[e.DISCONNECTED=1]="DISCONNECTED",e[e.PRECEDING=2]="PRECEDING",e[e.FOLLOWING=4]="FOLLOWING",e[e.CONTAINS=8]="CONTAINS",e[e.CONTAINED_BY=16]="CONTAINED_BY"}(nt||(nt={}));const ot=["url","type","lang"],ct=["fileSize","bitrate","framerate","samplingrate","channels","duration","height","width"];function lt(e){return Ze("media:content",e).map((e=>{const{attribs:t}=e,r={medium:t.medium,isDefault:!!t.isDefault};for(const e of ot)t[e]&&(r[e]=t[e]);for(const e of ct)t[e]&&(r[e]=parseInt(t[e],10));return t.expression&&(r.expression=t.expression),r}))}function ut(e,t){return Ze(e,t,!0,1)[0]}function ht(e,t,r=!1){return Ie(Ze(e,t,r,1)).trim()}function dt(e,t,r,n,s=!1){const i=ht(r,n,s);i&&(e[t]=i)}function pt(e){return"rss"===e||"feed"===e||"rdf:RDF"===e}const ft={_useHtmlParser2:!1};function Et(e,t){if(!e)return null!=t?t:ft;const r={_useHtmlParser2:!!e.xmlMode,...t,...e};return e.xml?(r._useHtmlParser2=!0,r.xmlMode=!0,!0!==e.xml&&Object.assign(r,e.xml)):e.xmlMode&&(r._useHtmlParser2=!0),r}function mt(e,t,r){return e?e(null!=t?t:e._root.children,null,void 0,r).toString():""}function Tt(e,t){return mt(this,function(e){return"object"==typeof e&&null!=e&&!("length"in e)&&!("type"in e)}(e)?void(t=e):e,{...null==this?void 0:this._options,...Et(t)})}function At(e){return mt(this,e,{...this._options,xmlMode:!0})}function gt(e){const t=null!=e?e:this?this.root():[];let r="";for(let e=0;e<t.length;e++)r+=Ie(t[e]);return r}function _t(e,t,r="boolean"==typeof t&&t){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(r=t);const n=this.load(e,this._options,!1);return r||n("script").remove(),[...n.root()[0].children]}function bt(){return this(this._root)}function St(e,t){if(t===e)return!1;let r=t;for(;r&&r!==r.parent;)if(r=r.parent,r===e)return!0;return!1}function Nt(e){return this.root().extract(e)}function It(e,t){if(!Ct(e)||!Ct(t))return;let r=e.length;const n=+t.length;for(let s=0;s<n;s++)e[r++]=t[s];return e.length=r,e}function Ct(e){if(Array.isArray(e))return!0;if("object"!=typeof e||null===e||!("length"in e)||"number"!=typeof e.length||e.length<0)return!1;for(let t=0;t<e.length;t++)if(!(t in e))return!1;return!0}function yt(e){return null!=e.cheerio}function Dt(e,t){const r=e.length;for(let n=0;n<r;n++)t(e[n],n);return e}var Ot;function Rt(e){const t=e.indexOf("<");if(t<0||t>e.length-3)return!1;const r=e.charCodeAt(t+1);return(r>=Ot.LowerA&&r<=Ot.LowerZ||r>=Ot.UpperA&&r<=Ot.UpperZ||r===Ot.Exclamation)&&e.includes(">",t+2)}!function(e){e[e.LowerA=97]="LowerA",e[e.LowerZ=122]="LowerZ",e[e.UpperA=65]="UpperA",e[e.UpperZ=90]="UpperZ",e[e.Exclamation=33]="Exclamation"}(Ot||(Ot={}));const Lt=Object.prototype.hasOwnProperty,kt=/\s+/,wt="data-",Pt=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,Mt=/^{[^]*}$|^\[[^]*]$/;function Bt(e,t,r){var n;if(e&&L(e))return null!==(n=e.attribs)&&void 0!==n||(e.attribs={}),t?Lt.call(e.attribs,t)?!r&&Pt.test(t)?t:e.attribs[t]:"option"===e.name&&"value"===t?gt(e.children):"input"!==e.name||"radio"!==e.attribs.type&&"checkbox"!==e.attribs.type||"value"!==t?void 0:"on":e.attribs}function vt(e,t,r){null===r?jt(e,t):e.attribs[t]=`${r}`}function xt(e,t){if("object"==typeof e||void 0!==t){if("function"==typeof t){if("string"!=typeof e)throw new Error("Bad combination of arguments.");return Dt(this,((r,n)=>{L(r)&&vt(r,e,t.call(r,n,r.attribs[e]))}))}return Dt(this,(r=>{if(L(r))if("object"==typeof e)for(const t of Object.keys(e))vt(r,t,e[t]);else vt(r,e,t)}))}return arguments.length>1?this:Bt(this[0],e,this.options.xmlMode)}function Ut(e,t,r){return t in e?e[t]:!r&&Pt.test(t)?void 0!==Bt(e,t,!1):Bt(e,t,r)}function Ft(e,t,r,n){t in e?e[t]=r:vt(e,t,!n&&Pt.test(t)?r?"":null:`${r}`)}function Ht(e,t){var r;if("string"==typeof e&&void 0===t){const t=this[0];if(!t||!L(t))return;switch(e){case"style":{const e=this.css(),t=Object.keys(e);for(let r=0;r<t.length;r++)e[r]=t[r];return e.length=t.length,e}case"tagName":case"nodeName":return t.name.toUpperCase();case"href":case"src":{const n=null===(r=t.attribs)||void 0===r?void 0:r[e];return"undefined"==typeof URL||("href"!==e||"a"!==t.tagName&&"link"!==t.tagName)&&("src"!==e||"img"!==t.tagName&&"iframe"!==t.tagName&&"audio"!==t.tagName&&"video"!==t.tagName&&"source"!==t.tagName)||void 0===n||!this.options.baseURI?n:new URL(n,this.options.baseURI).href}case"innerText":return Ce(t);case"textContent":return Ie(t);case"outerHTML":return this.clone().wrap("<container />").parent().html();case"innerHTML":return this.html();default:return Ut(t,e,this.options.xmlMode)}}if("object"==typeof e||void 0!==t){if("function"==typeof t){if("object"==typeof e)throw new TypeError("Bad combination of arguments.");return Dt(this,((r,n)=>{L(r)&&Ft(r,e,t.call(r,n,Ut(r,e,this.options.xmlMode)),this.options.xmlMode)}))}return Dt(this,(r=>{if(L(r))if("object"==typeof e)for(const t of Object.keys(e))Ft(r,t,e[t],this.options.xmlMode);else Ft(r,e,t,this.options.xmlMode)}))}}function Gt(e,t,r){var n;null!==(n=e.data)&&void 0!==n||(e.data={}),"object"==typeof t?Object.assign(e.data,t):"string"==typeof t&&void 0!==r&&(e.data[t]=r)}function qt(e){if("null"===e)return null;if("true"===e)return!0;if("false"===e)return!1;const t=Number(e);if(e===String(t))return t;if(Mt.test(e))try{return JSON.parse(e)}catch{}return e}function Yt(e,t){var r;const n=this[0];if(!n||!L(n))return;const s=n;return null!==(r=s.data)&&void 0!==r||(s.data={}),null==e?function(e){for(const t of Object.keys(e.attribs)){if(!t.startsWith(wt))continue;const r=t.slice(wt.length).replace(/[._-](\w|$)/g,((e,t)=>t.toUpperCase()));Lt.call(e.data,r)||(e.data[r]=qt(e.attribs[t]))}return e.data}(s):"object"==typeof e||void 0!==t?(Dt(this,(r=>{L(r)&&("object"==typeof e?Gt(r,e):Gt(r,e,t))})),this):function(e,t){const r=wt+t.replace(/[A-Z]/g,"-$&").toLowerCase(),n=e.data;return Lt.call(n,t)?n[t]:Lt.call(e.attribs,r)?n[t]=qt(e.attribs[r]):void 0}(s,e)}function Vt(e){const t=0===arguments.length,r=this[0];if(!r||!L(r))return t?void 0:this;switch(r.name){case"textarea":return this.text(e);case"select":{const r=this.find("option:selected");if(!t){if(null==this.attr("multiple")&&"object"==typeof e)return this;this.find("option").removeAttr("selected");const t="object"==typeof e?e:[e];for(const e of t)this.find(`option[value="${e}"]`).attr("selected","");return this}return this.attr("multiple")?r.toArray().map((e=>gt(e.children))):r.attr("value")}case"input":case"option":return t?this.attr("value"):this.attr("value",e)}}function jt(e,t){e.attribs&&Lt.call(e.attribs,t)&&delete e.attribs[t]}function Wt(e){return e?e.trim().split(kt):[]}function Qt(e){const t=Wt(e);for(const e of t)Dt(this,(t=>{L(t)&&jt(t,e)}));return this}function Kt(e){return this.toArray().some((t=>{const r=L(t)&&t.attribs.class;let n=-1;if(r&&e.length>0)for(;(n=r.indexOf(e,n+1))>-1;){const t=n+e.length;if((0===n||kt.test(r[n-1]))&&(t===r.length||kt.test(r[t])))return!0}return!1}))}function Xt(e){if("function"==typeof e)return Dt(this,((t,r)=>{if(L(t)){const n=t.attribs.class||"";Xt.call([t],e.call(t,r,n))}}));if(!e||"string"!=typeof e)return this;const t=e.split(kt),r=this.length;for(let e=0;e<r;e++){const r=this[e];if(!L(r))continue;const n=Bt(r,"class",!1);if(n){let e=` ${n} `;for(const r of t){const t=`${r} `;e.includes(` ${t}`)||(e+=t)}vt(r,"class",e.trim())}else vt(r,"class",t.join(" ").trim())}return this}function $t(e){if("function"==typeof e)return Dt(this,((t,r)=>{L(t)&&$t.call([t],e.call(t,r,t.attribs.class||""))}));const t=Wt(e),r=t.length,n=0===arguments.length;return Dt(this,(e=>{if(L(e))if(n)e.attribs.class="";else{const n=Wt(e.attribs.class);let s=!1;for(let e=0;e<r;e++){const r=n.indexOf(t[e]);r>=0&&(n.splice(r,1),s=!0,e--)}s&&(e.attribs.class=n.join(" "))}}))}function zt(e,t){if("function"==typeof e)return Dt(this,((r,n)=>{L(r)&&zt.call([r],e.call(r,n,r.attribs.class||"",t),t)}));if(!e||"string"!=typeof e)return this;const r=e.split(kt),n=r.length,s="boolean"==typeof t?t?1:-1:0,i=this.length;for(let e=0;e<i;e++){const t=this[e];if(!L(t))continue;const i=Wt(t.attribs.class);for(let e=0;e<n;e++){const t=i.indexOf(r[e]);s>=0&&t<0?i.push(r[e]):s<=0&&t>=0&&i.splice(t,1)}t.attribs.class=i.join(" ")}return this}var Jt,Zt;!function(e){e.Attribute="attribute",e.Pseudo="pseudo",e.PseudoElement="pseudo-element",e.Tag="tag",e.Universal="universal",e.Adjacent="adjacent",e.Child="child",e.Descendant="descendant",e.Parent="parent",e.Sibling="sibling",e.ColumnCombinator="column-combinator"}(Jt||(Jt={})),function(e){e.Any="any",e.Element="element",e.End="end",e.Equals="equals",e.Exists="exists",e.Hyphen="hyphen",e.Not="not",e.Start="start"}(Zt||(Zt={}));const er=/^[^\\#]?(?:\\(?:[\da-f]{1,6}\s?|.)|[\w\-\u00b0-\uFFFF])+/,tr=/\\([\da-f]{1,6}\s?|(\s)|.)/gi,rr=new Map([[126,Zt.Element],[94,Zt.Start],[36,Zt.End],[42,Zt.Any],[33,Zt.Not],[124,Zt.Hyphen]]),nr=new Set(["has","not","matches","is","where","host","host-context"]);function sr(e){switch(e.type){case Jt.Adjacent:case Jt.Child:case Jt.Descendant:case Jt.Parent:case Jt.Sibling:case Jt.ColumnCombinator:return!0;default:return!1}}const ir=new Set(["contains","icontains"]);function ar(e,t,r){const n=parseInt(t,16)-65536;return n!=n||r?t:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)}function or(e){return e.replace(tr,ar)}function cr(e){return 39===e||34===e}function lr(e){return 32===e||9===e||10===e||12===e||13===e}function ur(e){const t=[],r=hr(t,`${e}`,0);if(r<e.length)throw new Error(`Unmatched selector: ${e.slice(r)}`);return t}function hr(e,t,r){let n=[];function s(e){const n=t.slice(r+e).match(er);if(!n)throw new Error(`Expected name, found ${t.slice(r)}`);const[s]=n;return r+=e+s.length,or(s)}function i(e){for(r+=e;r<t.length&&lr(t.charCodeAt(r));)r++}function a(){const e=r+=1;let n=1;for(;n>0&&r<t.length;r++)40!==t.charCodeAt(r)||o(r)?41!==t.charCodeAt(r)||o(r)||n--:n++;if(n)throw new Error("Parenthesis not matched");return or(t.slice(e,r-1))}function o(e){let r=0;for(;92===t.charCodeAt(--e);)r++;return!(1&~r)}function c(){if(n.length>0&&sr(n[n.length-1]))throw new Error("Did not expect successive traversals.")}function l(e){n.length>0&&n[n.length-1].type===Jt.Descendant?n[n.length-1].type=e:(c(),n.push({type:e}))}function u(e,t){n.push({type:Jt.Attribute,name:e,action:t,value:s(1),namespace:null,ignoreCase:"quirks"})}function h(){if(n.length&&n[n.length-1].type===Jt.Descendant&&n.pop(),0===n.length)throw new Error("Empty sub-selector");e.push(n)}if(i(0),t.length===r)return r;e:for(;r<t.length;){const e=t.charCodeAt(r);switch(e){case 32:case 9:case 10:case 12:case 13:0!==n.length&&n[0].type===Jt.Descendant||(c(),n.push({type:Jt.Descendant})),i(1);break;case 62:l(Jt.Child),i(1);break;case 60:l(Jt.Parent),i(1);break;case 126:l(Jt.Sibling),i(1);break;case 43:l(Jt.Adjacent),i(1);break;case 46:u("class",Zt.Element);break;case 35:u("id",Zt.Equals);break;case 91:{let e;i(1);let a=null;124===t.charCodeAt(r)?e=s(1):t.startsWith("*|",r)?(a="*",e=s(2)):(e=s(0),124===t.charCodeAt(r)&&61!==t.charCodeAt(r+1)&&(a=e,e=s(1))),i(0);let c=Zt.Exists;const l=rr.get(t.charCodeAt(r));if(l){if(c=l,61!==t.charCodeAt(r+1))throw new Error("Expected `=`");i(2)}else 61===t.charCodeAt(r)&&(c=Zt.Equals,i(1));let u="",h=null;if("exists"!==c){if(cr(t.charCodeAt(r))){const e=t.charCodeAt(r);let n=r+1;for(;n<t.length&&(t.charCodeAt(n)!==e||o(n));)n+=1;if(t.charCodeAt(n)!==e)throw new Error("Attribute value didn't end");u=or(t.slice(r+1,n)),r=n+1}else{const e=r;for(;r<t.length&&(!lr(t.charCodeAt(r))&&93!==t.charCodeAt(r)||o(r));)r+=1;u=or(t.slice(e,r))}i(0);const e=32|t.charCodeAt(r);115===e?(h=!1,i(1)):105===e&&(h=!0,i(1))}if(93!==t.charCodeAt(r))throw new Error("Attribute selector didn't terminate");r+=1;const d={type:Jt.Attribute,name:e,action:c,value:u,namespace:a,ignoreCase:h};n.push(d);break}case 58:{if(58===t.charCodeAt(r+1)){n.push({type:Jt.PseudoElement,name:s(2).toLowerCase(),data:40===t.charCodeAt(r)?a():null});continue}const e=s(1).toLowerCase();let i=null;if(40===t.charCodeAt(r))if(nr.has(e)){if(cr(t.charCodeAt(r+1)))throw new Error(`Pseudo-selector ${e} cannot be quoted`);if(i=[],r=hr(i,t,r+1),41!==t.charCodeAt(r))throw new Error(`Missing closing parenthesis in :${e} (${t})`);r+=1}else{if(i=a(),ir.has(e)){const e=i.charCodeAt(0);e===i.charCodeAt(i.length-1)&&cr(e)&&(i=i.slice(1,-1))}i=or(i)}n.push({type:Jt.Pseudo,name:e,data:i});break}case 44:h(),n=[],i(1);break;default:{if(t.startsWith("/*",r)){const e=t.indexOf("*/",r+2);if(e<0)throw new Error("Comment was not terminated");r=e+2,0===n.length&&i(0);break}let a,o=null;if(42===e)r+=1,a="*";else if(124===e){if(a="",124===t.charCodeAt(r+1)){l(Jt.ColumnCombinator),i(2);break}}else{if(!er.test(t.slice(r)))break e;a=s(0)}124===t.charCodeAt(r)&&124!==t.charCodeAt(r+1)&&(o=a,42===t.charCodeAt(r+1)?(a="*",r+=2):a=s(1)),n.push("*"===a?{type:Jt.Universal,namespace:o}:{type:Jt.Tag,name:a,namespace:o})}}}return h(),r}var dr=r(264);const pr=new Map([[Jt.Universal,50],[Jt.Tag,30],[Jt.Attribute,1],[Jt.Pseudo,0]]);function fr(e){return!pr.has(e.type)}const Er=new Map([[Zt.Exists,10],[Zt.Equals,8],[Zt.Not,7],[Zt.Start,6],[Zt.End,6],[Zt.Any,5]]);function mr(e){const t=e.map(Tr);for(let r=1;r<e.length;r++){const n=t[r];if(!(n<0))for(let s=r-1;s>=0&&n<t[s];s--){const r=e[s+1];e[s+1]=e[s],e[s]=r,t[s+1]=t[s],t[s]=n}}}function Tr(e){var t,r;let n=null!==(t=pr.get(e.type))&&void 0!==t?t:-1;return e.type===Jt.Attribute?(n=null!==(r=Er.get(e.action))&&void 0!==r?r:4,e.action===Zt.Equals&&"id"===e.name&&(n=9),e.ignoreCase&&(n>>=1)):e.type===Jt.Pseudo&&(e.data?"has"===e.name||"contains"===e.name?n=0:Array.isArray(e.data)?(n=Math.min(...e.data.map((e=>Math.min(...e.map(Tr))))),n<0&&(n=0)):n=2:n=3),n}const Ar=/[-[\]{}()*+?.,\\^$|#\s]/g;function gr(e){return e.replace(Ar,"\\$&")}const _r=new Set(["accept","accept-charset","align","alink","axis","bgcolor","charset","checked","clear","codetype","color","compact","declare","defer","dir","direction","disabled","enctype","face","frame","hreflang","http-equiv","lang","language","link","media","method","multiple","nohref","noresize","noshade","nowrap","readonly","rel","rev","rules","scope","scrolling","selected","shape","target","text","type","valign","valuetype","vlink"]);function br(e,t){return"boolean"==typeof e.ignoreCase?e.ignoreCase:"quirks"===e.ignoreCase?!!t.quirksMode:!t.xmlMode&&_r.has(e.name)}const Sr={equals(e,t,r){const{adapter:n}=r,{name:s}=t;let{value:i}=t;return br(t,r)?(i=i.toLowerCase(),t=>{const r=n.getAttributeValue(t,s);return null!=r&&r.length===i.length&&r.toLowerCase()===i&&e(t)}):t=>n.getAttributeValue(t,s)===i&&e(t)},hyphen(e,t,r){const{adapter:n}=r,{name:s}=t;let{value:i}=t;const a=i.length;return br(t,r)?(i=i.toLowerCase(),function(t){const r=n.getAttributeValue(t,s);return null!=r&&(r.length===a||"-"===r.charAt(a))&&r.substr(0,a).toLowerCase()===i&&e(t)}):function(t){const r=n.getAttributeValue(t,s);return null!=r&&(r.length===a||"-"===r.charAt(a))&&r.substr(0,a)===i&&e(t)}},element(e,t,r){const{adapter:n}=r,{name:s,value:i}=t;if(/\s/.test(i))return dr.falseFunc;const a=new RegExp(`(?:^|\\s)${gr(i)}(?:$|\\s)`,br(t,r)?"i":"");return function(t){const r=n.getAttributeValue(t,s);return null!=r&&r.length>=i.length&&a.test(r)&&e(t)}},exists:(e,{name:t},{adapter:r})=>n=>r.hasAttrib(n,t)&&e(n),start(e,t,r){const{adapter:n}=r,{name:s}=t;let{value:i}=t;const a=i.length;return 0===a?dr.falseFunc:br(t,r)?(i=i.toLowerCase(),t=>{const r=n.getAttributeValue(t,s);return null!=r&&r.length>=a&&r.substr(0,a).toLowerCase()===i&&e(t)}):t=>{var r;return!!(null===(r=n.getAttributeValue(t,s))||void 0===r?void 0:r.startsWith(i))&&e(t)}},end(e,t,r){const{adapter:n}=r,{name:s}=t;let{value:i}=t;const a=-i.length;return 0===a?dr.falseFunc:br(t,r)?(i=i.toLowerCase(),t=>{var r;return(null===(r=n.getAttributeValue(t,s))||void 0===r?void 0:r.substr(a).toLowerCase())===i&&e(t)}):t=>{var r;return!!(null===(r=n.getAttributeValue(t,s))||void 0===r?void 0:r.endsWith(i))&&e(t)}},any(e,t,r){const{adapter:n}=r,{name:s,value:i}=t;if(""===i)return dr.falseFunc;if(br(t,r)){const t=new RegExp(gr(i),"i");return function(r){const a=n.getAttributeValue(r,s);return null!=a&&a.length>=i.length&&t.test(a)&&e(r)}}return t=>{var r;return!!(null===(r=n.getAttributeValue(t,s))||void 0===r?void 0:r.includes(i))&&e(t)}},not(e,t,r){const{adapter:n}=r,{name:s}=t;let{value:i}=t;return""===i?t=>!!n.getAttributeValue(t,s)&&e(t):br(t,r)?(i=i.toLowerCase(),t=>{const r=n.getAttributeValue(t,s);return(null==r||r.length!==i.length||r.toLowerCase()!==i)&&e(t)}):t=>n.getAttributeValue(t,s)!==i&&e(t)}},Nr=new Set([9,10,12,13,32]),Ir="0".charCodeAt(0),Cr="9".charCodeAt(0);function yr(e){return function(e){const t=e[0],r=e[1]-1;if(r<0&&t<=0)return dr.falseFunc;if(-1===t)return e=>e<=r;if(0===t)return e=>e===r;if(1===t)return r<0?dr.trueFunc:e=>e>=r;const n=Math.abs(t),s=(r%n+n)%n;return t>1?e=>e>=r&&e%n===s:e=>e<=r&&e%n===s}(function(e){if("even"===(e=e.trim().toLowerCase()))return[2,0];if("odd"===e)return[2,1];let t=0,r=0,n=i(),s=a();if(t<e.length&&"n"===e.charAt(t)&&(t++,r=n*(null!=s?s:1),o(),t<e.length?(n=i(),o(),s=a()):n=s=0),null===s||t<e.length)throw new Error(`n-th rule couldn't be parsed ('${e}')`);return[r,n*s];function i(){return"-"===e.charAt(t)?(t++,-1):("+"===e.charAt(t)&&t++,1)}function a(){const r=t;let n=0;for(;t<e.length&&e.charCodeAt(t)>=Ir&&e.charCodeAt(t)<=Cr;)n=10*n+(e.charCodeAt(t)-Ir),t++;return t===r?null:n}function o(){for(;t<e.length&&Nr.has(e.charCodeAt(t));)t++}}(e))}function Dr(e,t){return r=>{const n=t.getParent(r);return null!=n&&t.isTag(n)&&e(r)}}const Or={contains:(e,t,{adapter:r})=>function(n){return e(n)&&r.getText(n).includes(t)},icontains(e,t,{adapter:r}){const n=t.toLowerCase();return function(t){return e(t)&&r.getText(t).toLowerCase().includes(n)}},"nth-child"(e,t,{adapter:r,equals:n}){const s=yr(t);return s===dr.falseFunc?dr.falseFunc:s===dr.trueFunc?Dr(e,r):function(t){const i=r.getSiblings(t);let a=0;for(let e=0;e<i.length&&!n(t,i[e]);e++)r.isTag(i[e])&&a++;return s(a)&&e(t)}},"nth-last-child"(e,t,{adapter:r,equals:n}){const s=yr(t);return s===dr.falseFunc?dr.falseFunc:s===dr.trueFunc?Dr(e,r):function(t){const i=r.getSiblings(t);let a=0;for(let e=i.length-1;e>=0&&!n(t,i[e]);e--)r.isTag(i[e])&&a++;return s(a)&&e(t)}},"nth-of-type"(e,t,{adapter:r,equals:n}){const s=yr(t);return s===dr.falseFunc?dr.falseFunc:s===dr.trueFunc?Dr(e,r):function(t){const i=r.getSiblings(t);let a=0;for(let e=0;e<i.length;e++){const s=i[e];if(n(t,s))break;r.isTag(s)&&r.getName(s)===r.getName(t)&&a++}return s(a)&&e(t)}},"nth-last-of-type"(e,t,{adapter:r,equals:n}){const s=yr(t);return s===dr.falseFunc?dr.falseFunc:s===dr.trueFunc?Dr(e,r):function(t){const i=r.getSiblings(t);let a=0;for(let e=i.length-1;e>=0;e--){const s=i[e];if(n(t,s))break;r.isTag(s)&&r.getName(s)===r.getName(t)&&a++}return s(a)&&e(t)}},root:(e,t,{adapter:r})=>t=>{const n=r.getParent(t);return(null==n||!r.isTag(n))&&e(t)},scope(e,t,r,n){const{equals:s}=r;return n&&0!==n.length?1===n.length?t=>s(n[0],t)&&e(t):t=>n.includes(t)&&e(t):Or.root(e,t,r)},hover:Rr("isHovered"),visited:Rr("isVisited"),active:Rr("isActive")};function Rr(e){return function(t,r,{adapter:n}){const s=n[e];return"function"!=typeof s?dr.falseFunc:function(e){return s(e)&&t(e)}}}const Lr={empty:(e,{adapter:t})=>!t.getChildren(e).some((e=>t.isTag(e)||""!==t.getText(e))),"first-child"(e,{adapter:t,equals:r}){if(t.prevElementSibling)return null==t.prevElementSibling(e);const n=t.getSiblings(e).find((e=>t.isTag(e)));return null!=n&&r(e,n)},"last-child"(e,{adapter:t,equals:r}){const n=t.getSiblings(e);for(let s=n.length-1;s>=0;s--){if(r(e,n[s]))return!0;if(t.isTag(n[s]))break}return!1},"first-of-type"(e,{adapter:t,equals:r}){const n=t.getSiblings(e),s=t.getName(e);for(let i=0;i<n.length;i++){const a=n[i];if(r(e,a))return!0;if(t.isTag(a)&&t.getName(a)===s)break}return!1},"last-of-type"(e,{adapter:t,equals:r}){const n=t.getSiblings(e),s=t.getName(e);for(let i=n.length-1;i>=0;i--){const a=n[i];if(r(e,a))return!0;if(t.isTag(a)&&t.getName(a)===s)break}return!1},"only-of-type"(e,{adapter:t,equals:r}){const n=t.getName(e);return t.getSiblings(e).every((s=>r(e,s)||!t.isTag(s)||t.getName(s)!==n))},"only-child":(e,{adapter:t,equals:r})=>t.getSiblings(e).every((n=>r(e,n)||!t.isTag(n)))};function kr(e,t,r,n){if(null===r){if(e.length>n)throw new Error(`Pseudo-class :${t} requires an argument`)}else if(e.length===n)throw new Error(`Pseudo-class :${t} doesn't have any arguments`)}const wr={"any-link":":is(a, area, link)[href]",link:":any-link:not(:visited)",disabled:":is(\n        :is(button, input, select, textarea, optgroup, option)[disabled],\n        optgroup[disabled] > option,\n        fieldset[disabled]:not(fieldset[disabled] legend:first-of-type *)\n    )",enabled:":not(:disabled)",checked:":is(:is(input[type=radio], input[type=checkbox])[checked], option:selected)",required:":is(input, select, textarea)[required]",optional:":is(input, select, textarea):not([required])",selected:"option:is([selected], select:not([multiple]):not(:has(> option[selected])) > :first-of-type)",checkbox:"[type=checkbox]",file:"[type=file]",password:"[type=password]",radio:"[type=radio]",reset:"[type=reset]",image:"[type=image]",submit:"[type=submit]",parent:":not(:empty)",header:":is(h1, h2, h3, h4, h5, h6)",button:":is(button, input[type=button])",input:":is(input, textarea, select, button)",text:"input:is(:not([type!='']), [type=text])"},Pr={};function Mr(e,t){return e===dr.falseFunc?dr.falseFunc:r=>t.isTag(r)&&e(r)}function Br(e,t){const r=t.getSiblings(e);if(r.length<=1)return[];const n=r.indexOf(e);return n<0||n===r.length-1?[]:r.slice(n+1).filter(t.isTag)}function vr(e){return{xmlMode:!!e.xmlMode,lowerCaseAttributeNames:!!e.lowerCaseAttributeNames,lowerCaseTags:!!e.lowerCaseTags,quirksMode:!!e.quirksMode,cacheResults:!!e.cacheResults,pseudos:e.pseudos,adapter:e.adapter,equals:e.equals}}const xr=(e,t,r,n,s)=>{const i=s(t,vr(r),n);return i===dr.trueFunc?e:i===dr.falseFunc?dr.falseFunc:t=>i(t)&&e(t)},Ur={is:xr,matches:xr,where:xr,not(e,t,r,n,s){const i=s(t,vr(r),n);return i===dr.falseFunc?e:i===dr.trueFunc?dr.falseFunc:t=>!i(t)&&e(t)},has(e,t,r,n,s){const{adapter:i}=r,a=vr(r);a.relativeSelector=!0;const o=t.some((e=>e.some(fr)))?[Pr]:void 0,c=s(t,a,o);if(c===dr.falseFunc)return dr.falseFunc;const l=Mr(c,i);if(o&&c!==dr.trueFunc){const{shouldTestNextSiblings:t=!1}=c;return r=>{if(!e(r))return!1;o[0]=r;const n=i.getChildren(r),s=t?[...n,...Br(r,i)]:n;return i.existsOne(l,s)}}return t=>e(t)&&i.existsOne(l,i.getChildren(t))}};function Fr(e,t){const r=t.getParent(e);return r&&t.isTag(r)?r:null}function Hr(e,t,r){return jr("string"==typeof e?ur(e):e,t,r)}function Gr(e){return e.type===Jt.Pseudo&&("scope"===e.name||Array.isArray(e.data)&&e.data.some((e=>e.some(Gr))))}const qr={type:Jt.Descendant},Yr={type:"_flexibleDescendant"},Vr={type:Jt.Pseudo,name:"scope",data:null};function jr(e,t,r){var n;e.forEach(mr),r=null!==(n=t.context)&&void 0!==n?n:r;const s=Array.isArray(r),i=r&&(Array.isArray(r)?r:[r]);if(!1!==t.relativeSelector)!function(e,{adapter:t},r){const n=!!(null==r?void 0:r.every((e=>{const r=t.isTag(e)&&t.getParent(e);return e===Pr||r&&t.isTag(r)})));for(const t of e){if(t.length>0&&fr(t[0])&&t[0].type!==Jt.Descendant);else{if(!n||t.some(Gr))continue;t.unshift(qr)}t.unshift(Vr)}}(e,t,i);else if(e.some((e=>e.length>0&&fr(e[0]))))throw new Error("Relative selectors are not allowed when the `relativeSelector` option is disabled");let a=!1;const o=e.map((e=>{if(e.length>=2){const[t,r]=e;t.type!==Jt.Pseudo||"scope"!==t.name||(s&&r.type===Jt.Descendant?e[1]=Yr:r.type!==Jt.Adjacent&&r.type!==Jt.Sibling||(a=!0))}return function(e,t,r){var n;return e.reduce(((e,n)=>e===dr.falseFunc?dr.falseFunc:function(e,t,r,n,s){const{adapter:i,equals:a}=r;switch(t.type){case Jt.PseudoElement:throw new Error("Pseudo-elements are not supported by css-select");case Jt.ColumnCombinator:throw new Error("Column combinators are not yet supported by css-select");case Jt.Attribute:if(null!=t.namespace)throw new Error("Namespaced attributes are not yet supported by css-select");return r.xmlMode&&!r.lowerCaseAttributeNames||(t.name=t.name.toLowerCase()),Sr[t.action](e,t,r);case Jt.Pseudo:return function(e,t,r,n,s){var i;const{name:a,data:o}=t;if(Array.isArray(o)){if(!(a in Ur))throw new Error(`Unknown pseudo-class :${a}(${o})`);return Ur[a](e,o,r,n,s)}const c=null===(i=r.pseudos)||void 0===i?void 0:i[a],l="string"==typeof c?c:wr[a];if("string"==typeof l){if(null!=o)throw new Error(`Pseudo ${a} doesn't have any arguments`);const t=ur(l);return Ur.is(e,t,r,n,s)}if("function"==typeof c)return kr(c,a,o,1),t=>c(t,o)&&e(t);if(a in Or)return Or[a](e,o,r,n);if(a in Lr){const t=Lr[a];return kr(t,a,o,2),n=>t(n,r,o)&&e(n)}throw new Error(`Unknown pseudo-class :${a}`)}(e,t,r,n,s);case Jt.Tag:{if(null!=t.namespace)throw new Error("Namespaced tag names are not yet supported by css-select");let{name:n}=t;return r.xmlMode&&!r.lowerCaseTags||(n=n.toLowerCase()),function(t){return i.getName(t)===n&&e(t)}}case Jt.Descendant:{if(!1===r.cacheResults||"undefined"==typeof WeakSet)return function(t){let r=t;for(;r=Fr(r,i);)if(e(r))return!0;return!1};const t=new WeakSet;return function(r){let n=r;for(;n=Fr(n,i);)if(!t.has(n)){if(i.isTag(n)&&e(n))return!0;t.add(n)}return!1}}case"_flexibleDescendant":return function(t){let r=t;do{if(e(r))return!0}while(r=Fr(r,i));return!1};case Jt.Parent:return function(t){return i.getChildren(t).some((t=>i.isTag(t)&&e(t)))};case Jt.Child:return function(t){const r=i.getParent(t);return null!=r&&i.isTag(r)&&e(r)};case Jt.Sibling:return function(t){const r=i.getSiblings(t);for(let n=0;n<r.length;n++){const s=r[n];if(a(t,s))break;if(i.isTag(s)&&e(s))return!0}return!1};case Jt.Adjacent:return i.prevElementSibling?function(t){const r=i.prevElementSibling(t);return null!=r&&e(r)}:function(t){const r=i.getSiblings(t);let n;for(let e=0;e<r.length;e++){const s=r[e];if(a(t,s))break;i.isTag(s)&&(n=s)}return!!n&&e(n)};case Jt.Universal:if(null!=t.namespace&&"*"!==t.namespace)throw new Error("Namespaced universal selectors are not yet supported by css-select");return e}}(e,n,t,r,jr)),null!==(n=t.rootFunc)&&void 0!==n?n:dr.trueFunc)}(e,t,i)})).reduce(Wr,dr.falseFunc);return o.shouldTestNextSiblings=a,o}function Wr(e,t){return t===dr.falseFunc||e===dr.trueFunc?e:e===dr.falseFunc||t===dr.trueFunc?t:function(r){return e(r)||t(r)}}const Qr=(e,t)=>e===t,Kr={adapter:n,equals:Qr};function Xr(e){var t,r,s,i;const a=null!=e?e:Kr;return null!==(t=a.adapter)&&void 0!==t||(a.adapter=n),null!==(r=a.equals)&&void 0!==r||(a.equals=null!==(i=null===(s=a.adapter)||void 0===s?void 0:s.equals)&&void 0!==i?i:Qr),a}function $r(e){return function(t,r,n){const s=Xr(r);return e(t,s,n)}}$r((function(e,t,r){return Mr(Hr(e,t,r),t.adapter)})),$r(Hr);const zr=$r(jr);function Jr(e){return function(t,r,n){const s=Xr(n);"function"!=typeof t&&(t=Hr(t,s,r));const i=Zr(r,s.adapter,t.shouldTestNextSiblings);return e(t,i,s)}}function Zr(e,t,r=!1){return r&&(e=function(e,t){const r=Array.isArray(e)?e.slice(0):[e],n=r.length;for(let e=0;e<n;e++){const n=Br(r[e],t);r.push(...n)}return r}(e,t)),Array.isArray(e)?t.removeSubsets(e):t.getChildren(e)}Jr(((e,t,r)=>e!==dr.falseFunc&&t&&0!==t.length?r.adapter.findAll(e,t):[])),Jr(((e,t,r)=>e!==dr.falseFunc&&t&&0!==t.length?r.adapter.findOne(e,t):null));const en=new Set(["first","last","eq","gt","nth","lt","even","odd"]);function tn(e){return"pseudo"===e.type&&(!!en.has(e.name)||!("not"!==e.name||!Array.isArray(e.data))&&e.data.some((e=>e.some(tn))))}function rn(e){const t=[],r=[];for(const n of e)n.some(tn)?t.push(n):r.push(n);return[r,t]}const nn={type:Jt.Universal,namespace:null},sn={type:Jt.Pseudo,name:"scope",data:null};function an(e,t,r={}){return on([e],t,r)}function on(e,t,r={}){if("function"==typeof t)return e.some(t);const[n,s]=rn(ur(t));return n.length>0&&e.some(zr(n,r))||s.some((t=>un(t,e,r).length>0))}function cn(e,t,r={}){return ln(ur(e),t,r)}function ln(e,t,r){if(0===t.length)return[];const[n,s]=rn(e);let i;if(n.length){const e=fn(t,n,r);if(0===s.length)return e;e.length&&(i=new Set(e))}for(let e=0;e<s.length&&(null==i?void 0:i.size)!==t.length;e++){const n=s[e];if(0===(i?t.filter((e=>L(e)&&!i.has(e))):t).length)break;const a=un(n,t,r);if(a.length)if(i)a.forEach((e=>i.add(e)));else{if(e===s.length-1)return a;i=new Set(a)}}return void 0!==i?i.size===t.length?t:t.filter((e=>i.has(e))):[]}function un(e,t,r){var n;if(e.some(sr)){const s=null!==(n=r.root)&&void 0!==n?n:function(e){for(;e.parent;)e=e.parent;return e}(t[0]),i={...r,context:t,relativeSelector:!1};return e.push(sn),hn(s,e,i,!0,t.length)}return hn(t,e,r,!1,t.length)}function hn(e,t,r,s,i){const a=t.findIndex(tn),o=t.slice(0,a),c=t[a],l=t.length-1===a?i:1/0,u=function(e,t,r){const n=null!=t?parseInt(t,10):NaN;switch(e){case"first":return 1;case"nth":case"eq":return isFinite(n)?n>=0?n+1:1/0:0;case"lt":return isFinite(n)?n>=0?Math.min(n,r):1/0:0;case"gt":return isFinite(n)?1/0:0;case"odd":return 2*r;case"even":return 2*r-1;case"last":case"not":return 1/0}}(c.name,c.data,l);if(0===u)return[];const h=(0!==o.length||Array.isArray(e)?0===o.length?(Array.isArray(e)?e:[e]).filter(L):s||o.some(sr)?dn(e,[o],r,u):fn(e,[o],r):ye(e).filter(L)).slice(0,u);let d=function(e,t,r,n){const s="string"==typeof r?parseInt(r,10):NaN;switch(e){case"first":case"lt":return t;case"last":return t.length>0?[t[t.length-1]]:t;case"nth":case"eq":return isFinite(s)&&Math.abs(s)<t.length?[s<0?t[t.length+s]:t[s]]:[];case"gt":return isFinite(s)?t.slice(s+1):[];case"even":return t.filter(((e,t)=>t%2==0));case"odd":return t.filter(((e,t)=>t%2==1));case"not":{const e=new Set(ln(r,t,n));return t.filter((t=>!e.has(t)))}}}(c.name,h,c.data,r);if(0===d.length||t.length===a+1)return d;const p=t.slice(a+1),f=p.some(sr);if(f){if(sr(p[0])){const{type:e}=p[0];e!==Jt.Sibling&&e!==Jt.Adjacent||(d=Zr(d,n,!0)),p.unshift(nn)}r={...r,relativeSelector:!1,rootFunc:e=>d.includes(e)}}else r.rootFunc&&r.rootFunc!==dr.trueFunc&&(r={...r,rootFunc:dr.trueFunc});return p.some(tn)?hn(d,p,r,!1,i):f?dn(d,[p],r,i):fn(d,[p],r)}function dn(e,t,r,n){return pn(e,zr(t,r,e),n)}function pn(e,t,r=1/0){return Ge((e=>L(e)&&t(e)),Zr(e,n,t.shouldTestNextSiblings),!0,r)}function fn(e,t,r){const n=(Array.isArray(e)?e:[e]).filter(L);if(0===n.length)return n;const s=zr(t,r);return s===dr.trueFunc?n:n.filter(s)}const En=/^\s*[+~]/;function mn(e){if(!e)return this._make([]);if("string"!=typeof e){const t=yt(e)?e.toArray():[e],r=this.toArray();return this._make(t.filter((e=>r.some((t=>St(t,e))))))}return this._findBySelector(e,Number.POSITIVE_INFINITY)}function Tn(e,t){var r;const n=this.toArray(),s=En.test(e)?n:this.children().toArray(),i={context:n,root:null===(r=this._root)||void 0===r?void 0:r[0],xmlMode:this.options.xmlMode,lowerCaseTags:this.options.lowerCaseTags,lowerCaseAttributeNames:this.options.lowerCaseAttributeNames,pseudos:this.options.pseudos,quirksMode:this.options.quirksMode};return this._make(function(e,t,r={},n=1/0){if("function"==typeof e)return pn(t,e);const[s,i]=rn(ur(e)),a=i.map((e=>hn(t,e,r,!0,n)));return s.length&&a.push(dn(t,s,r,n)),0===a.length?[]:1===a.length?a[0]:it(a.reduce(((e,t)=>[...e,...t])))}(e,s,i,t))}function An(e){return function(t,...r){return function(n){var s;let i=e(t,this);return n&&(i=Hn(i,n,this.options.xmlMode,null===(s=this._root)||void 0===s?void 0:s[0])),this._make(this.length>1&&i.length>1?r.reduce(((e,t)=>t(e)),i):i)}}}const gn=An(((e,t)=>{let r=[];for(let n=0;n<t.length;n++){const s=e(t[n]);s.length>0&&(r=r.concat(s))}return r})),_n=An(((e,t)=>{const r=[];for(let n=0;n<t.length;n++){const s=e(t[n]);null!==s&&r.push(s)}return r}));function bn(e,...t){let r=null;const n=An(((e,t)=>{const n=[];return Dt(t,(t=>{for(let s;(s=e(t))&&!(null==r?void 0:r(s,n.length));t=s)n.push(s)})),n}))(e,...t);return function(e,t){r="string"==typeof e?t=>an(t,e,this.options):e?Un(e):null;const s=n.call(this,t);return r=null,s}}function Sn(e){return e.length>1?Array.from(new Set(e)):e}const Nn=_n((({parent:e})=>e&&!B(e)?e:null),Sn),In=gn((e=>{const t=[];for(;e.parent&&!B(e.parent);)t.push(e.parent),e=e.parent;return t}),it,(e=>e.reverse())),Cn=bn((({parent:e})=>e&&!B(e)?e:null),it,(e=>e.reverse()));function yn(e){var t;const r=[];if(!e)return this._make(r);const n={xmlMode:this.options.xmlMode,root:null===(t=this._root)||void 0===t?void 0:t[0]},s="string"==typeof e?t=>an(t,e,n):Un(e);return Dt(this,(e=>{for(!e||B(e)||L(e)||(e=e.parent);e&&L(e);){if(s(e,0)){r.includes(e)||r.push(e);break}e=e.parent}})),this._make(r)}const Dn=_n((e=>we(e))),On=gn((e=>{const t=[];for(;e.next;)L(e=e.next)&&t.push(e);return t}),Sn),Rn=bn((e=>we(e)),Sn),Ln=_n((e=>Pe(e))),kn=gn((e=>{const t=[];for(;e.prev;)L(e=e.prev)&&t.push(e);return t}),Sn),wn=bn((e=>Pe(e)),Sn),Pn=gn((e=>Oe(e).filter((t=>L(t)&&t!==e))),it),Mn=gn((e=>ye(e).filter(L)),Sn);function Bn(){const e=this.toArray().reduce(((e,t)=>v(t)?e.concat(t.children):e),[]);return this._make(e)}function vn(e){let t=0;const r=this.length;for(;t<r&&!1!==e.call(this[t],t,this[t]);)++t;return this}function xn(e){let t=[];for(let r=0;r<this.length;r++){const n=this[r],s=e.call(n,r,n);null!=s&&(t=t.concat(s))}return this._make(t)}function Un(e){return"function"==typeof e?(t,r)=>e.call(t,r,t):yt(e)?t=>Array.prototype.includes.call(e,t):function(t){return e===t}}function Fn(e){var t;return this._make(Hn(this.toArray(),e,this.options.xmlMode,null===(t=this._root)||void 0===t?void 0:t[0]))}function Hn(e,t,r,n){return"string"==typeof t?cn(t,e,{xmlMode:r,root:n}):e.filter(Un(t))}function Gn(e){const t=this.toArray();return"string"==typeof e?on(t.filter(L),e,this.options):!!e&&t.some(Un(e))}function qn(e){let t=this.toArray();if("string"==typeof e){const r=new Set(cn(e,t,this.options));t=t.filter((e=>!r.has(e)))}else{const r=Un(e);t=t.filter(((e,t)=>!r(e,t)))}return this._make(t)}function Yn(e){return this.filter("string"==typeof e?`:has(${e})`:(t,r)=>this._make(r).find(e).length>0)}function Vn(){return this.length>1?this._make(this[0]):this}function jn(){return this.length>0?this._make(this[this.length-1]):this}function Wn(e){var t;return 0===(e=+e)&&this.length<=1?this:(e<0&&(e=this.length+e),this._make(null!==(t=this[e])&&void 0!==t?t:[]))}function Qn(e){return null==e?this.toArray():this[e<0?this.length+e:e]}function Kn(){return Array.prototype.slice.call(this)}function Xn(e){let t,r;return null==e?(t=this.parent().children(),r=this[0]):"string"==typeof e?(t=this._make(e),r=this[0]):(t=this,r=yt(e)?e[0]:e),Array.prototype.indexOf.call(t,r)}function $n(e,t){return this._make(Array.prototype.slice.call(this,e,t))}function zn(){var e;return null!==(e=this.prevObject)&&void 0!==e?e:this._make([])}function Jn(e,t){const r=this._make(e,t),n=it([...this.get(),...r.get()]);return this._make(n)}function Zn(e){return this.prevObject?this.add(e?this.prevObject.filter(e):this.prevObject):this}function es(e,t){const r=Array.isArray(e)?e:[e];t?t.children=r:t=null;for(let e=0;e<r.length;e++){const n=r[e];n.parent&&n.parent.children!==r&&Me(n),t?(n.prev=r[e-1]||null,n.next=r[e+1]||null):n.prev=n.next=null,n.parent=t}return t}function ts(e,t){if(null==e)return[];if("string"==typeof e)return this._parse(e,this.options,!1,null).children.slice(0);if("length"in e){if(1===e.length)return this._makeDomArray(e[0],t);const r=[];for(let n=0;n<e.length;n++){const s=e[n];if("object"==typeof s){if(null==s)continue;if(!("length"in s)){r.push(t?x(s,!0):s);continue}}r.push(...this._makeDomArray(s,t))}return r}return[t?x(e,!0):e]}function rs(e){return function(...t){const r=this.length-1;return Dt(this,((n,s)=>{if(!v(n))return;const i="function"==typeof t[0]?t[0].call(n,s,this._render(n.children)):t,a=this._makeDomArray(i,s<r);e(a,n.children,n)}))}}function ns(e,t,r,n,s){var i,a;const o=[t,r,...n],c=0===t?null:e[t-1],l=t+r>=e.length?null:e[t+r];for(let e=0;e<n.length;++e){const r=n[e],u=r.parent;if(u){const e=u.children.indexOf(r);e>-1&&(u.children.splice(e,1),s===u&&t>e&&o[0]--)}r.parent=s,r.prev&&(r.prev.next=null!==(i=r.next)&&void 0!==i?i:null),r.next&&(r.next.prev=null!==(a=r.prev)&&void 0!==a?a:null),r.prev=0===e?c:n[e-1],r.next=e===n.length-1?l:n[e+1]}return c&&(c.next=n[0]),l&&(l.prev=n[n.length-1]),e.splice(...o)}function ss(e){return(yt(e)?e:this._make(e)).append(this),this}function is(e){return(yt(e)?e:this._make(e)).prepend(this),this}const as=rs(((e,t,r)=>{ns(t,t.length,0,e,r)})),os=rs(((e,t,r)=>{ns(t,0,0,e,r)}));function cs(e){return function(t){const r=this.length-1,n=this.parents().last();for(let s=0;s<this.length;s++){const i=this[s],a="function"==typeof t?t.call(i,s,i):"string"!=typeof t||Rt(t)?t:n.find(t).clone(),[o]=this._makeDomArray(a,s<r);if(!o||!v(o))continue;let c=o,l=0;for(;l<c.children.length;){const e=c.children[l];L(e)?(c=e,l=0):l++}e(i,c,[o])}return this}}const ls=cs(((e,t,r)=>{const{parent:n}=e;if(!n)return;const s=n.children,i=s.indexOf(e);es([e],t),ns(s,i,0,r,n)})),us=cs(((e,t,r)=>{v(e)&&(es(e.children,t),es(r,e))}));function hs(e){return this.parent(e).not("body").each(((e,t)=>{this._make(t).replaceWith(t.children)})),this}function ds(e){const t=this[0];if(t){const r=this._make("function"==typeof e?e.call(t,0,t):e).insertBefore(t);let n;for(let e=0;e<r.length;e++)"tag"===r[e].type&&(n=r[e]);let s=0;for(;n&&s<n.children.length;){const e=n.children[s];"tag"===e.type?(n=e,s=0):s++}n&&this._make(n).append(this)}return this}function ps(...e){const t=this.length-1;return Dt(this,((r,n)=>{if(!v(r)||!r.parent)return;const s=r.parent.children,i=s.indexOf(r);if(i<0)return;const a="function"==typeof e[0]?e[0].call(r,n,this._render(r.children)):e;ns(s,i+1,0,this._makeDomArray(a,n<t),r.parent)}))}function fs(e){"string"==typeof e&&(e=this._make(e)),this.remove();const t=[];for(const r of this._makeDomArray(e)){const e=this.clone().toArray(),{parent:n}=r;if(!n)continue;const s=n.children,i=s.indexOf(r);i<0||(ns(s,i+1,0,e,n),t.push(...e))}return this._make(t)}function Es(...e){const t=this.length-1;return Dt(this,((r,n)=>{if(!v(r)||!r.parent)return;const s=r.parent.children,i=s.indexOf(r);if(i<0)return;const a="function"==typeof e[0]?e[0].call(r,n,this._render(r.children)):e;ns(s,i,0,this._makeDomArray(a,n<t),r.parent)}))}function ms(e){const t=this._make(e);this.remove();const r=[];return Dt(t,(e=>{const t=this.clone().toArray(),{parent:n}=e;if(!n)return;const s=n.children,i=s.indexOf(e);i<0||(ns(s,i,0,t,n),r.push(...t))})),this._make(r)}function Ts(e){return Dt(e?this.filter(e):this,(e=>{Me(e),e.prev=e.next=e.parent=null})),this}function As(e){return Dt(this,((t,r)=>{const{parent:n}=t;if(!n)return;const s=n.children,i="function"==typeof e?e.call(t,r,t):e,a=this._makeDomArray(i);es(a,null);const o=s.indexOf(t);ns(s,o,1,a,n),a.includes(t)||(t.parent=t.prev=t.next=null)}))}function gs(){return Dt(this,(e=>{if(v(e)){for(const t of e.children)t.next=t.prev=t.parent=null;e.children.length=0}}))}function _s(e){if(void 0===e){const e=this[0];return e&&v(e)?this._render(e.children):null}return Dt(this,(t=>{if(v(t)){for(const e of t.children)e.next=e.prev=e.parent=null;es(yt(e)?e.toArray():this._parse(`${e}`,this.options,!1,t).children,t)}}))}function bs(){return this._render(this)}function Ss(e){return void 0===e?gt(this):Dt(this,"function"==typeof e?(t,r)=>this._make(t).text(e.call(t,r,gt([t]))):t=>{if(v(t)){for(const e of t.children)e.next=e.prev=e.parent=null;es(new N(`${e}`),t)}})}function Ns(){const e=Array.prototype.map.call(this.get(),(e=>x(e,!0))),t=new O(e);for(const r of e)r.parent=t;return this._make(e)}function Is(e,t){return null!=e&&null!=t||"object"==typeof e&&!Array.isArray(e)?Dt(this,((r,n)=>{L(r)&&Cs(r,e,t,n)})):0!==this.length?ys(this[0],e):void 0}function Cs(e,t,r,n){if("string"==typeof t){const i=ys(e),a="function"==typeof r?r.call(e,n,i[t]):r;""===a?delete i[t]:null!=a&&(i[t]=a),e.attribs.style=(s=i,Object.keys(s).reduce(((e,t)=>`${e}${e?" ":""}${t}: ${s[t]};`),""))}else if("object"==typeof t){const r=Object.keys(t);for(let n=0;n<r.length;n++){const s=r[n];Cs(e,s,t[s],n)}}var s}function ys(e,t){if(!e||!L(e))return;const r=function(e){if(!(e=(e||"").trim()))return{};const t={};let r;for(const n of e.split(";")){const e=n.indexOf(":");if(e<1||e===n.length-1){const e=n.trimEnd();e.length>0&&void 0!==r&&(t[r]+=`;${e}`)}else r=n.slice(0,e).trim(),t[r]=n.slice(e+1).trim()}return t}(e.attribs.style);if("string"==typeof t)return r[t];if(Array.isArray(t)){const e={};for(const n of t)null!=r[n]&&(e[n]=r[n]);return e}return r}const Ds="input,select,textarea,keygen",Os=/%20/g,Rs=/\r?\n/g;function Ls(){const e=this.serializeArray().map((e=>`${encodeURIComponent(e.name)}=${encodeURIComponent(e.value)}`));return e.join("&").replace(Os,"+")}function ks(){return this.map(((e,t)=>{const r=this._make(t);return L(t)&&"form"===t.name?r.find(Ds).toArray():r.filter(Ds).toArray()})).filter('[name!=""]:enabled:not(:submit, :button, :image, :reset, :file):matches([checked], :not(:checkbox, :radio))').map(((e,t)=>{var r;const n=this._make(t),s=n.attr("name"),i=null!==(r=n.val())&&void 0!==r?r:"";return Array.isArray(i)?i.map((e=>({name:s,value:e.replace(Rs,"\r\n")}))):{name:s,value:i.replace(Rs,"\r\n")}})).toArray()}function ws(e){var t;return"string"==typeof e?{selector:e,value:"textContent"}:{selector:e.selector,value:null!==(t=e.value)&&void 0!==t?t:"textContent"}}function Ps(e){const t={};for(const r in e){const n=e[r],s=Array.isArray(n),{selector:i,value:a}=ws(s?n[0]:n),o="function"==typeof a?a:"string"==typeof a?e=>this._make(e).prop(a):e=>this._make(e).extract(a);if(s)t[r]=this._findBySelector(i,Number.POSITIVE_INFINITY).map(((e,n)=>o(n,r,t))).get();else{const e=this._findBySelector(i,1);t[r]=e.length>0?o(e[0],r,t):void 0}}return t}class Ms{constructor(e,t,r){if(this.length=0,this.options=r,this._root=t,e){for(let t=0;t<e.length;t++)this[t]=e[t];this.length=e.length}}}Ms.prototype.cheerio="[cheerio object]",Ms.prototype.splice=Array.prototype.splice,Ms.prototype[Symbol.iterator]=Array.prototype[Symbol.iterator],Object.assign(Ms.prototype,i,a,o,c,l,h);const Bs=new Set([65534,65535,131070,131071,196606,196607,262142,262143,327678,327679,393214,393215,458750,458751,524286,524287,589822,589823,655358,655359,720894,720895,786430,786431,851966,851967,917502,917503,983038,983039,1048574,1048575,1114110,1114111]),vs="�";var xs;!function(e){e[e.EOF=-1]="EOF",e[e.NULL=0]="NULL",e[e.TABULATION=9]="TABULATION",e[e.CARRIAGE_RETURN=13]="CARRIAGE_RETURN",e[e.LINE_FEED=10]="LINE_FEED",e[e.FORM_FEED=12]="FORM_FEED",e[e.SPACE=32]="SPACE",e[e.EXCLAMATION_MARK=33]="EXCLAMATION_MARK",e[e.QUOTATION_MARK=34]="QUOTATION_MARK",e[e.AMPERSAND=38]="AMPERSAND",e[e.APOSTROPHE=39]="APOSTROPHE",e[e.HYPHEN_MINUS=45]="HYPHEN_MINUS",e[e.SOLIDUS=47]="SOLIDUS",e[e.DIGIT_0=48]="DIGIT_0",e[e.DIGIT_9=57]="DIGIT_9",e[e.SEMICOLON=59]="SEMICOLON",e[e.LESS_THAN_SIGN=60]="LESS_THAN_SIGN",e[e.EQUALS_SIGN=61]="EQUALS_SIGN",e[e.GREATER_THAN_SIGN=62]="GREATER_THAN_SIGN",e[e.QUESTION_MARK=63]="QUESTION_MARK",e[e.LATIN_CAPITAL_A=65]="LATIN_CAPITAL_A",e[e.LATIN_CAPITAL_Z=90]="LATIN_CAPITAL_Z",e[e.RIGHT_SQUARE_BRACKET=93]="RIGHT_SQUARE_BRACKET",e[e.GRAVE_ACCENT=96]="GRAVE_ACCENT",e[e.LATIN_SMALL_A=97]="LATIN_SMALL_A",e[e.LATIN_SMALL_Z=122]="LATIN_SMALL_Z"}(xs||(xs={}));const Us="[CDATA[",Fs="doctype",Hs="script";function Gs(e){return e>=55296&&e<=57343}function qs(e){return 32!==e&&10!==e&&13!==e&&9!==e&&12!==e&&e>=1&&e<=31||e>=127&&e<=159}function Ys(e){return e>=64976&&e<=65007||Bs.has(e)}var Vs,js;!function(e){e.controlCharacterInInputStream="control-character-in-input-stream",e.noncharacterInInputStream="noncharacter-in-input-stream",e.surrogateInInputStream="surrogate-in-input-stream",e.nonVoidHtmlElementStartTagWithTrailingSolidus="non-void-html-element-start-tag-with-trailing-solidus",e.endTagWithAttributes="end-tag-with-attributes",e.endTagWithTrailingSolidus="end-tag-with-trailing-solidus",e.unexpectedSolidusInTag="unexpected-solidus-in-tag",e.unexpectedNullCharacter="unexpected-null-character",e.unexpectedQuestionMarkInsteadOfTagName="unexpected-question-mark-instead-of-tag-name",e.invalidFirstCharacterOfTagName="invalid-first-character-of-tag-name",e.unexpectedEqualsSignBeforeAttributeName="unexpected-equals-sign-before-attribute-name",e.missingEndTagName="missing-end-tag-name",e.unexpectedCharacterInAttributeName="unexpected-character-in-attribute-name",e.unknownNamedCharacterReference="unknown-named-character-reference",e.missingSemicolonAfterCharacterReference="missing-semicolon-after-character-reference",e.unexpectedCharacterAfterDoctypeSystemIdentifier="unexpected-character-after-doctype-system-identifier",e.unexpectedCharacterInUnquotedAttributeValue="unexpected-character-in-unquoted-attribute-value",e.eofBeforeTagName="eof-before-tag-name",e.eofInTag="eof-in-tag",e.missingAttributeValue="missing-attribute-value",e.missingWhitespaceBetweenAttributes="missing-whitespace-between-attributes",e.missingWhitespaceAfterDoctypePublicKeyword="missing-whitespace-after-doctype-public-keyword",e.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers="missing-whitespace-between-doctype-public-and-system-identifiers",e.missingWhitespaceAfterDoctypeSystemKeyword="missing-whitespace-after-doctype-system-keyword",e.missingQuoteBeforeDoctypePublicIdentifier="missing-quote-before-doctype-public-identifier",e.missingQuoteBeforeDoctypeSystemIdentifier="missing-quote-before-doctype-system-identifier",e.missingDoctypePublicIdentifier="missing-doctype-public-identifier",e.missingDoctypeSystemIdentifier="missing-doctype-system-identifier",e.abruptDoctypePublicIdentifier="abrupt-doctype-public-identifier",e.abruptDoctypeSystemIdentifier="abrupt-doctype-system-identifier",e.cdataInHtmlContent="cdata-in-html-content",e.incorrectlyOpenedComment="incorrectly-opened-comment",e.eofInScriptHtmlCommentLikeText="eof-in-script-html-comment-like-text",e.eofInDoctype="eof-in-doctype",e.nestedComment="nested-comment",e.abruptClosingOfEmptyComment="abrupt-closing-of-empty-comment",e.eofInComment="eof-in-comment",e.incorrectlyClosedComment="incorrectly-closed-comment",e.eofInCdata="eof-in-cdata",e.absenceOfDigitsInNumericCharacterReference="absence-of-digits-in-numeric-character-reference",e.nullCharacterReference="null-character-reference",e.surrogateCharacterReference="surrogate-character-reference",e.characterReferenceOutsideUnicodeRange="character-reference-outside-unicode-range",e.controlCharacterReference="control-character-reference",e.noncharacterCharacterReference="noncharacter-character-reference",e.missingWhitespaceBeforeDoctypeName="missing-whitespace-before-doctype-name",e.missingDoctypeName="missing-doctype-name",e.invalidCharacterSequenceAfterDoctypeName="invalid-character-sequence-after-doctype-name",e.duplicateAttribute="duplicate-attribute",e.nonConformingDoctype="non-conforming-doctype",e.missingDoctype="missing-doctype",e.misplacedDoctype="misplaced-doctype",e.endTagWithoutMatchingOpenElement="end-tag-without-matching-open-element",e.closingOfElementWithOpenChildElements="closing-of-element-with-open-child-elements",e.disallowedContentInNoscriptInHead="disallowed-content-in-noscript-in-head",e.openElementsLeftAfterEof="open-elements-left-after-eof",e.abandonedHeadElementChild="abandoned-head-element-child",e.misplacedStartTagForHeadElement="misplaced-start-tag-for-head-element",e.nestedNoscriptInHead="nested-noscript-in-head",e.eofInElementThatCanContainOnlyText="eof-in-element-that-can-contain-only-text"}(Vs||(Vs={}));class Ws{constructor(e){this.handler=e,this.html="",this.pos=-1,this.lastGapPos=-2,this.gapStack=[],this.skipNextNewLine=!1,this.lastChunkWritten=!1,this.endOfChunkHit=!1,this.bufferWaterline=65536,this.isEol=!1,this.lineStartPos=0,this.droppedBufferSize=0,this.line=1,this.lastErrOffset=-1}get col(){return this.pos-this.lineStartPos+Number(this.lastGapPos!==this.pos)}get offset(){return this.droppedBufferSize+this.pos}getError(e,t){const{line:r,col:n,offset:s}=this,i=n+t,a=s+t;return{code:e,startLine:r,endLine:r,startCol:i,endCol:i,startOffset:a,endOffset:a}}_err(e){this.handler.onParseError&&this.lastErrOffset!==this.offset&&(this.lastErrOffset=this.offset,this.handler.onParseError(this.getError(e,0)))}_addGap(){this.gapStack.push(this.lastGapPos),this.lastGapPos=this.pos}_processSurrogate(e){if(this.pos!==this.html.length-1){const t=this.html.charCodeAt(this.pos+1);if(function(e){return e>=56320&&e<=57343}(t))return this.pos++,this._addGap(),1024*(e-55296)+9216+t}else if(!this.lastChunkWritten)return this.endOfChunkHit=!0,xs.EOF;return this._err(Vs.surrogateInInputStream),e}willDropParsedChunk(){return this.pos>this.bufferWaterline}dropParsedChunk(){this.willDropParsedChunk()&&(this.html=this.html.substring(this.pos),this.lineStartPos-=this.pos,this.droppedBufferSize+=this.pos,this.pos=0,this.lastGapPos=-2,this.gapStack.length=0)}write(e,t){this.html.length>0?this.html+=e:this.html=e,this.endOfChunkHit=!1,this.lastChunkWritten=t}insertHtmlAtCurrentPos(e){this.html=this.html.substring(0,this.pos+1)+e+this.html.substring(this.pos+1),this.endOfChunkHit=!1}startsWith(e,t){if(this.pos+e.length>this.html.length)return this.endOfChunkHit=!this.lastChunkWritten,!1;if(t)return this.html.startsWith(e,this.pos);for(let t=0;t<e.length;t++)if((32|this.html.charCodeAt(this.pos+t))!==e.charCodeAt(t))return!1;return!0}peek(e){const t=this.pos+e;if(t>=this.html.length)return this.endOfChunkHit=!this.lastChunkWritten,xs.EOF;const r=this.html.charCodeAt(t);return r===xs.CARRIAGE_RETURN?xs.LINE_FEED:r}advance(){if(this.pos++,this.isEol&&(this.isEol=!1,this.line++,this.lineStartPos=this.pos),this.pos>=this.html.length)return this.endOfChunkHit=!this.lastChunkWritten,xs.EOF;let e=this.html.charCodeAt(this.pos);return e===xs.CARRIAGE_RETURN?(this.isEol=!0,this.skipNextNewLine=!0,xs.LINE_FEED):e===xs.LINE_FEED&&(this.isEol=!0,this.skipNextNewLine)?(this.line--,this.skipNextNewLine=!1,this._addGap(),this.advance()):(this.skipNextNewLine=!1,Gs(e)&&(e=this._processSurrogate(e)),null===this.handler.onParseError||e>31&&e<127||e===xs.LINE_FEED||e===xs.CARRIAGE_RETURN||e>159&&e<64976||this._checkForProblematicCharacters(e),e)}_checkForProblematicCharacters(e){qs(e)?this._err(Vs.controlCharacterInInputStream):Ys(e)&&this._err(Vs.noncharacterInInputStream)}retreat(e){for(this.pos-=e;this.pos<this.lastGapPos;)this.lastGapPos=this.gapStack.pop(),this.pos--;this.isEol=!1}}function Qs(e,t){for(let r=e.attrs.length-1;r>=0;r--)if(e.attrs[r].name===t)return e.attrs[r].value;return null}!function(e){e[e.CHARACTER=0]="CHARACTER",e[e.NULL_CHARACTER=1]="NULL_CHARACTER",e[e.WHITESPACE_CHARACTER=2]="WHITESPACE_CHARACTER",e[e.START_TAG=3]="START_TAG",e[e.END_TAG=4]="END_TAG",e[e.COMMENT=5]="COMMENT",e[e.DOCTYPE=6]="DOCTYPE",e[e.EOF=7]="EOF",e[e.HIBERNATION=8]="HIBERNATION"}(js||(js={}));const Ks=new Uint16Array('ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'.split("").map((e=>e.charCodeAt(0))));const Xs=new Map([[0,65533],[128,8364],[130,8218],[131,402],[132,8222],[133,8230],[134,8224],[135,8225],[136,710],[137,8240],[138,352],[139,8249],[140,338],[142,381],[145,8216],[146,8217],[147,8220],[148,8221],[149,8226],[150,8211],[151,8212],[152,732],[153,8482],[154,353],[155,8250],[156,339],[158,382],[159,376]]);var $s,zs,Js,Zs,ei,ti,ri,ni,si;function ii(e){return e>=$s.ZERO&&e<=$s.NINE}String.fromCodePoint,function(e){e[e.NUM=35]="NUM",e[e.SEMI=59]="SEMI",e[e.EQUALS=61]="EQUALS",e[e.ZERO=48]="ZERO",e[e.NINE=57]="NINE",e[e.LOWER_A=97]="LOWER_A",e[e.LOWER_F=102]="LOWER_F",e[e.LOWER_X=120]="LOWER_X",e[e.LOWER_Z=122]="LOWER_Z",e[e.UPPER_A=65]="UPPER_A",e[e.UPPER_F=70]="UPPER_F",e[e.UPPER_Z=90]="UPPER_Z"}($s||($s={})),function(e){e[e.VALUE_LENGTH=49152]="VALUE_LENGTH",e[e.BRANCH_LENGTH=16256]="BRANCH_LENGTH",e[e.JUMP_TABLE=127]="JUMP_TABLE"}(zs||(zs={})),function(e){e[e.EntityStart=0]="EntityStart",e[e.NumericStart=1]="NumericStart",e[e.NumericDecimal=2]="NumericDecimal",e[e.NumericHex=3]="NumericHex",e[e.NamedEntity=4]="NamedEntity"}(Js||(Js={})),function(e){e[e.Legacy=0]="Legacy",e[e.Strict=1]="Strict",e[e.Attribute=2]="Attribute"}(Zs||(Zs={}));class ai{constructor(e,t,r){this.decodeTree=e,this.emitCodePoint=t,this.errors=r,this.state=Js.EntityStart,this.consumed=1,this.result=0,this.treeIndex=0,this.excess=1,this.decodeMode=Zs.Strict}startEntity(e){this.decodeMode=e,this.state=Js.EntityStart,this.result=0,this.treeIndex=0,this.excess=1,this.consumed=1}write(e,t){switch(this.state){case Js.EntityStart:return e.charCodeAt(t)===$s.NUM?(this.state=Js.NumericStart,this.consumed+=1,this.stateNumericStart(e,t+1)):(this.state=Js.NamedEntity,this.stateNamedEntity(e,t));case Js.NumericStart:return this.stateNumericStart(e,t);case Js.NumericDecimal:return this.stateNumericDecimal(e,t);case Js.NumericHex:return this.stateNumericHex(e,t);case Js.NamedEntity:return this.stateNamedEntity(e,t)}}stateNumericStart(e,t){return t>=e.length?-1:(32|e.charCodeAt(t))===$s.LOWER_X?(this.state=Js.NumericHex,this.consumed+=1,this.stateNumericHex(e,t+1)):(this.state=Js.NumericDecimal,this.stateNumericDecimal(e,t))}addToNumericResult(e,t,r,n){if(t!==r){const s=r-t;this.result=this.result*Math.pow(n,s)+Number.parseInt(e.substr(t,s),n),this.consumed+=s}}stateNumericHex(e,t){const r=t;for(;t<e.length;){const s=e.charCodeAt(t);if(!(ii(s)||(n=s,n>=$s.UPPER_A&&n<=$s.UPPER_F||n>=$s.LOWER_A&&n<=$s.LOWER_F)))return this.addToNumericResult(e,r,t,16),this.emitNumericEntity(s,3);t+=1}var n;return this.addToNumericResult(e,r,t,16),-1}stateNumericDecimal(e,t){const r=t;for(;t<e.length;){const n=e.charCodeAt(t);if(!ii(n))return this.addToNumericResult(e,r,t,10),this.emitNumericEntity(n,2);t+=1}return this.addToNumericResult(e,r,t,10),-1}emitNumericEntity(e,t){var r;if(this.consumed<=t)return null===(r=this.errors)||void 0===r||r.absenceOfDigitsInNumericCharacterReference(this.consumed),0;if(e===$s.SEMI)this.consumed+=1;else if(this.decodeMode===Zs.Strict)return 0;return this.emitCodePoint(function(e){var t;return e>=55296&&e<=57343||e>1114111?65533:null!==(t=Xs.get(e))&&void 0!==t?t:e}(this.result),this.consumed),this.errors&&(e!==$s.SEMI&&this.errors.missingSemicolonAfterCharacterReference(),this.errors.validateNumericCharacterReference(this.result)),this.consumed}stateNamedEntity(e,t){const{decodeTree:r}=this;let n=r[this.treeIndex],s=(n&zs.VALUE_LENGTH)>>14;for(;t<e.length;t++,this.excess++){const a=e.charCodeAt(t);if(this.treeIndex=oi(r,n,this.treeIndex+Math.max(1,s),a),this.treeIndex<0)return 0===this.result||this.decodeMode===Zs.Attribute&&(0===s||((i=a)===$s.EQUALS||function(e){return e>=$s.UPPER_A&&e<=$s.UPPER_Z||e>=$s.LOWER_A&&e<=$s.LOWER_Z||ii(e)}(i)))?0:this.emitNotTerminatedNamedEntity();if(n=r[this.treeIndex],s=(n&zs.VALUE_LENGTH)>>14,0!==s){if(a===$s.SEMI)return this.emitNamedEntityData(this.treeIndex,s,this.consumed+this.excess);this.decodeMode!==Zs.Strict&&(this.result=this.treeIndex,this.consumed+=this.excess,this.excess=0)}}var i;return-1}emitNotTerminatedNamedEntity(){var e;const{result:t,decodeTree:r}=this,n=(r[t]&zs.VALUE_LENGTH)>>14;return this.emitNamedEntityData(t,n,this.consumed),null===(e=this.errors)||void 0===e||e.missingSemicolonAfterCharacterReference(),this.consumed}emitNamedEntityData(e,t,r){const{decodeTree:n}=this;return this.emitCodePoint(1===t?n[e]&~zs.VALUE_LENGTH:n[e+1],r),3===t&&this.emitCodePoint(n[e+2],r),r}end(){var e;switch(this.state){case Js.NamedEntity:return 0===this.result||this.decodeMode===Zs.Attribute&&this.result!==this.treeIndex?0:this.emitNotTerminatedNamedEntity();case Js.NumericDecimal:return this.emitNumericEntity(0,2);case Js.NumericHex:return this.emitNumericEntity(0,3);case Js.NumericStart:return null===(e=this.errors)||void 0===e||e.absenceOfDigitsInNumericCharacterReference(this.consumed),0;case Js.EntityStart:return 0}}}function oi(e,t,r,n){const s=(t&zs.BRANCH_LENGTH)>>7,i=t&zs.JUMP_TABLE;if(0===s)return 0!==i&&n===i?r:-1;if(i){const t=n-i;return t<0||t>=s?-1:e[r+t]-1}let a=r,o=a+s-1;for(;a<=o;){const t=a+o>>>1,r=e[t];if(r<n)a=t+1;else{if(!(r>n))return e[t+s];o=t-1}}return-1}!function(e){e.HTML="http://www.w3.org/1999/xhtml",e.MATHML="http://www.w3.org/1998/Math/MathML",e.SVG="http://www.w3.org/2000/svg",e.XLINK="http://www.w3.org/1999/xlink",e.XML="http://www.w3.org/XML/1998/namespace",e.XMLNS="http://www.w3.org/2000/xmlns/"}(ei||(ei={})),function(e){e.TYPE="type",e.ACTION="action",e.ENCODING="encoding",e.PROMPT="prompt",e.NAME="name",e.COLOR="color",e.FACE="face",e.SIZE="size"}(ti||(ti={})),function(e){e.NO_QUIRKS="no-quirks",e.QUIRKS="quirks",e.LIMITED_QUIRKS="limited-quirks"}(ri||(ri={})),function(e){e.A="a",e.ADDRESS="address",e.ANNOTATION_XML="annotation-xml",e.APPLET="applet",e.AREA="area",e.ARTICLE="article",e.ASIDE="aside",e.B="b",e.BASE="base",e.BASEFONT="basefont",e.BGSOUND="bgsound",e.BIG="big",e.BLOCKQUOTE="blockquote",e.BODY="body",e.BR="br",e.BUTTON="button",e.CAPTION="caption",e.CENTER="center",e.CODE="code",e.COL="col",e.COLGROUP="colgroup",e.DD="dd",e.DESC="desc",e.DETAILS="details",e.DIALOG="dialog",e.DIR="dir",e.DIV="div",e.DL="dl",e.DT="dt",e.EM="em",e.EMBED="embed",e.FIELDSET="fieldset",e.FIGCAPTION="figcaption",e.FIGURE="figure",e.FONT="font",e.FOOTER="footer",e.FOREIGN_OBJECT="foreignObject",e.FORM="form",e.FRAME="frame",e.FRAMESET="frameset",e.H1="h1",e.H2="h2",e.H3="h3",e.H4="h4",e.H5="h5",e.H6="h6",e.HEAD="head",e.HEADER="header",e.HGROUP="hgroup",e.HR="hr",e.HTML="html",e.I="i",e.IMG="img",e.IMAGE="image",e.INPUT="input",e.IFRAME="iframe",e.KEYGEN="keygen",e.LABEL="label",e.LI="li",e.LINK="link",e.LISTING="listing",e.MAIN="main",e.MALIGNMARK="malignmark",e.MARQUEE="marquee",e.MATH="math",e.MENU="menu",e.META="meta",e.MGLYPH="mglyph",e.MI="mi",e.MO="mo",e.MN="mn",e.MS="ms",e.MTEXT="mtext",e.NAV="nav",e.NOBR="nobr",e.NOFRAMES="noframes",e.NOEMBED="noembed",e.NOSCRIPT="noscript",e.OBJECT="object",e.OL="ol",e.OPTGROUP="optgroup",e.OPTION="option",e.P="p",e.PARAM="param",e.PLAINTEXT="plaintext",e.PRE="pre",e.RB="rb",e.RP="rp",e.RT="rt",e.RTC="rtc",e.RUBY="ruby",e.S="s",e.SCRIPT="script",e.SEARCH="search",e.SECTION="section",e.SELECT="select",e.SOURCE="source",e.SMALL="small",e.SPAN="span",e.STRIKE="strike",e.STRONG="strong",e.STYLE="style",e.SUB="sub",e.SUMMARY="summary",e.SUP="sup",e.TABLE="table",e.TBODY="tbody",e.TEMPLATE="template",e.TEXTAREA="textarea",e.TFOOT="tfoot",e.TD="td",e.TH="th",e.THEAD="thead",e.TITLE="title",e.TR="tr",e.TRACK="track",e.TT="tt",e.U="u",e.UL="ul",e.SVG="svg",e.VAR="var",e.WBR="wbr",e.XMP="xmp"}(ni||(ni={})),function(e){e[e.UNKNOWN=0]="UNKNOWN",e[e.A=1]="A",e[e.ADDRESS=2]="ADDRESS",e[e.ANNOTATION_XML=3]="ANNOTATION_XML",e[e.APPLET=4]="APPLET",e[e.AREA=5]="AREA",e[e.ARTICLE=6]="ARTICLE",e[e.ASIDE=7]="ASIDE",e[e.B=8]="B",e[e.BASE=9]="BASE",e[e.BASEFONT=10]="BASEFONT",e[e.BGSOUND=11]="BGSOUND",e[e.BIG=12]="BIG",e[e.BLOCKQUOTE=13]="BLOCKQUOTE",e[e.BODY=14]="BODY",e[e.BR=15]="BR",e[e.BUTTON=16]="BUTTON",e[e.CAPTION=17]="CAPTION",e[e.CENTER=18]="CENTER",e[e.CODE=19]="CODE",e[e.COL=20]="COL",e[e.COLGROUP=21]="COLGROUP",e[e.DD=22]="DD",e[e.DESC=23]="DESC",e[e.DETAILS=24]="DETAILS",e[e.DIALOG=25]="DIALOG",e[e.DIR=26]="DIR",e[e.DIV=27]="DIV",e[e.DL=28]="DL",e[e.DT=29]="DT",e[e.EM=30]="EM",e[e.EMBED=31]="EMBED",e[e.FIELDSET=32]="FIELDSET",e[e.FIGCAPTION=33]="FIGCAPTION",e[e.FIGURE=34]="FIGURE",e[e.FONT=35]="FONT",e[e.FOOTER=36]="FOOTER",e[e.FOREIGN_OBJECT=37]="FOREIGN_OBJECT",e[e.FORM=38]="FORM",e[e.FRAME=39]="FRAME",e[e.FRAMESET=40]="FRAMESET",e[e.H1=41]="H1",e[e.H2=42]="H2",e[e.H3=43]="H3",e[e.H4=44]="H4",e[e.H5=45]="H5",e[e.H6=46]="H6",e[e.HEAD=47]="HEAD",e[e.HEADER=48]="HEADER",e[e.HGROUP=49]="HGROUP",e[e.HR=50]="HR",e[e.HTML=51]="HTML",e[e.I=52]="I",e[e.IMG=53]="IMG",e[e.IMAGE=54]="IMAGE",e[e.INPUT=55]="INPUT",e[e.IFRAME=56]="IFRAME",e[e.KEYGEN=57]="KEYGEN",e[e.LABEL=58]="LABEL",e[e.LI=59]="LI",e[e.LINK=60]="LINK",e[e.LISTING=61]="LISTING",e[e.MAIN=62]="MAIN",e[e.MALIGNMARK=63]="MALIGNMARK",e[e.MARQUEE=64]="MARQUEE",e[e.MATH=65]="MATH",e[e.MENU=66]="MENU",e[e.META=67]="META",e[e.MGLYPH=68]="MGLYPH",e[e.MI=69]="MI",e[e.MO=70]="MO",e[e.MN=71]="MN",e[e.MS=72]="MS",e[e.MTEXT=73]="MTEXT",e[e.NAV=74]="NAV",e[e.NOBR=75]="NOBR",e[e.NOFRAMES=76]="NOFRAMES",e[e.NOEMBED=77]="NOEMBED",e[e.NOSCRIPT=78]="NOSCRIPT",e[e.OBJECT=79]="OBJECT",e[e.OL=80]="OL",e[e.OPTGROUP=81]="OPTGROUP",e[e.OPTION=82]="OPTION",e[e.P=83]="P",e[e.PARAM=84]="PARAM",e[e.PLAINTEXT=85]="PLAINTEXT",e[e.PRE=86]="PRE",e[e.RB=87]="RB",e[e.RP=88]="RP",e[e.RT=89]="RT",e[e.RTC=90]="RTC",e[e.RUBY=91]="RUBY",e[e.S=92]="S",e[e.SCRIPT=93]="SCRIPT",e[e.SEARCH=94]="SEARCH",e[e.SECTION=95]="SECTION",e[e.SELECT=96]="SELECT",e[e.SOURCE=97]="SOURCE",e[e.SMALL=98]="SMALL",e[e.SPAN=99]="SPAN",e[e.STRIKE=100]="STRIKE",e[e.STRONG=101]="STRONG",e[e.STYLE=102]="STYLE",e[e.SUB=103]="SUB",e[e.SUMMARY=104]="SUMMARY",e[e.SUP=105]="SUP",e[e.TABLE=106]="TABLE",e[e.TBODY=107]="TBODY",e[e.TEMPLATE=108]="TEMPLATE",e[e.TEXTAREA=109]="TEXTAREA",e[e.TFOOT=110]="TFOOT",e[e.TD=111]="TD",e[e.TH=112]="TH",e[e.THEAD=113]="THEAD",e[e.TITLE=114]="TITLE",e[e.TR=115]="TR",e[e.TRACK=116]="TRACK",e[e.TT=117]="TT",e[e.U=118]="U",e[e.UL=119]="UL",e[e.SVG=120]="SVG",e[e.VAR=121]="VAR",e[e.WBR=122]="WBR",e[e.XMP=123]="XMP"}(si||(si={}));const ci=new Map([[ni.A,si.A],[ni.ADDRESS,si.ADDRESS],[ni.ANNOTATION_XML,si.ANNOTATION_XML],[ni.APPLET,si.APPLET],[ni.AREA,si.AREA],[ni.ARTICLE,si.ARTICLE],[ni.ASIDE,si.ASIDE],[ni.B,si.B],[ni.BASE,si.BASE],[ni.BASEFONT,si.BASEFONT],[ni.BGSOUND,si.BGSOUND],[ni.BIG,si.BIG],[ni.BLOCKQUOTE,si.BLOCKQUOTE],[ni.BODY,si.BODY],[ni.BR,si.BR],[ni.BUTTON,si.BUTTON],[ni.CAPTION,si.CAPTION],[ni.CENTER,si.CENTER],[ni.CODE,si.CODE],[ni.COL,si.COL],[ni.COLGROUP,si.COLGROUP],[ni.DD,si.DD],[ni.DESC,si.DESC],[ni.DETAILS,si.DETAILS],[ni.DIALOG,si.DIALOG],[ni.DIR,si.DIR],[ni.DIV,si.DIV],[ni.DL,si.DL],[ni.DT,si.DT],[ni.EM,si.EM],[ni.EMBED,si.EMBED],[ni.FIELDSET,si.FIELDSET],[ni.FIGCAPTION,si.FIGCAPTION],[ni.FIGURE,si.FIGURE],[ni.FONT,si.FONT],[ni.FOOTER,si.FOOTER],[ni.FOREIGN_OBJECT,si.FOREIGN_OBJECT],[ni.FORM,si.FORM],[ni.FRAME,si.FRAME],[ni.FRAMESET,si.FRAMESET],[ni.H1,si.H1],[ni.H2,si.H2],[ni.H3,si.H3],[ni.H4,si.H4],[ni.H5,si.H5],[ni.H6,si.H6],[ni.HEAD,si.HEAD],[ni.HEADER,si.HEADER],[ni.HGROUP,si.HGROUP],[ni.HR,si.HR],[ni.HTML,si.HTML],[ni.I,si.I],[ni.IMG,si.IMG],[ni.IMAGE,si.IMAGE],[ni.INPUT,si.INPUT],[ni.IFRAME,si.IFRAME],[ni.KEYGEN,si.KEYGEN],[ni.LABEL,si.LABEL],[ni.LI,si.LI],[ni.LINK,si.LINK],[ni.LISTING,si.LISTING],[ni.MAIN,si.MAIN],[ni.MALIGNMARK,si.MALIGNMARK],[ni.MARQUEE,si.MARQUEE],[ni.MATH,si.MATH],[ni.MENU,si.MENU],[ni.META,si.META],[ni.MGLYPH,si.MGLYPH],[ni.MI,si.MI],[ni.MO,si.MO],[ni.MN,si.MN],[ni.MS,si.MS],[ni.MTEXT,si.MTEXT],[ni.NAV,si.NAV],[ni.NOBR,si.NOBR],[ni.NOFRAMES,si.NOFRAMES],[ni.NOEMBED,si.NOEMBED],[ni.NOSCRIPT,si.NOSCRIPT],[ni.OBJECT,si.OBJECT],[ni.OL,si.OL],[ni.OPTGROUP,si.OPTGROUP],[ni.OPTION,si.OPTION],[ni.P,si.P],[ni.PARAM,si.PARAM],[ni.PLAINTEXT,si.PLAINTEXT],[ni.PRE,si.PRE],[ni.RB,si.RB],[ni.RP,si.RP],[ni.RT,si.RT],[ni.RTC,si.RTC],[ni.RUBY,si.RUBY],[ni.S,si.S],[ni.SCRIPT,si.SCRIPT],[ni.SEARCH,si.SEARCH],[ni.SECTION,si.SECTION],[ni.SELECT,si.SELECT],[ni.SOURCE,si.SOURCE],[ni.SMALL,si.SMALL],[ni.SPAN,si.SPAN],[ni.STRIKE,si.STRIKE],[ni.STRONG,si.STRONG],[ni.STYLE,si.STYLE],[ni.SUB,si.SUB],[ni.SUMMARY,si.SUMMARY],[ni.SUP,si.SUP],[ni.TABLE,si.TABLE],[ni.TBODY,si.TBODY],[ni.TEMPLATE,si.TEMPLATE],[ni.TEXTAREA,si.TEXTAREA],[ni.TFOOT,si.TFOOT],[ni.TD,si.TD],[ni.TH,si.TH],[ni.THEAD,si.THEAD],[ni.TITLE,si.TITLE],[ni.TR,si.TR],[ni.TRACK,si.TRACK],[ni.TT,si.TT],[ni.U,si.U],[ni.UL,si.UL],[ni.SVG,si.SVG],[ni.VAR,si.VAR],[ni.WBR,si.WBR],[ni.XMP,si.XMP]]);function li(e){var t;return null!==(t=ci.get(e))&&void 0!==t?t:si.UNKNOWN}const ui=si,hi={[ei.HTML]:new Set([ui.ADDRESS,ui.APPLET,ui.AREA,ui.ARTICLE,ui.ASIDE,ui.BASE,ui.BASEFONT,ui.BGSOUND,ui.BLOCKQUOTE,ui.BODY,ui.BR,ui.BUTTON,ui.CAPTION,ui.CENTER,ui.COL,ui.COLGROUP,ui.DD,ui.DETAILS,ui.DIR,ui.DIV,ui.DL,ui.DT,ui.EMBED,ui.FIELDSET,ui.FIGCAPTION,ui.FIGURE,ui.FOOTER,ui.FORM,ui.FRAME,ui.FRAMESET,ui.H1,ui.H2,ui.H3,ui.H4,ui.H5,ui.H6,ui.HEAD,ui.HEADER,ui.HGROUP,ui.HR,ui.HTML,ui.IFRAME,ui.IMG,ui.INPUT,ui.LI,ui.LINK,ui.LISTING,ui.MAIN,ui.MARQUEE,ui.MENU,ui.META,ui.NAV,ui.NOEMBED,ui.NOFRAMES,ui.NOSCRIPT,ui.OBJECT,ui.OL,ui.P,ui.PARAM,ui.PLAINTEXT,ui.PRE,ui.SCRIPT,ui.SECTION,ui.SELECT,ui.SOURCE,ui.STYLE,ui.SUMMARY,ui.TABLE,ui.TBODY,ui.TD,ui.TEMPLATE,ui.TEXTAREA,ui.TFOOT,ui.TH,ui.THEAD,ui.TITLE,ui.TR,ui.TRACK,ui.UL,ui.WBR,ui.XMP]),[ei.MATHML]:new Set([ui.MI,ui.MO,ui.MN,ui.MS,ui.MTEXT,ui.ANNOTATION_XML]),[ei.SVG]:new Set([ui.TITLE,ui.FOREIGN_OBJECT,ui.DESC]),[ei.XLINK]:new Set,[ei.XML]:new Set,[ei.XMLNS]:new Set},di=new Set([ui.H1,ui.H2,ui.H3,ui.H4,ui.H5,ui.H6]),pi=new Set([ni.STYLE,ni.SCRIPT,ni.XMP,ni.IFRAME,ni.NOEMBED,ni.NOFRAMES,ni.PLAINTEXT]);var fi;!function(e){e[e.DATA=0]="DATA",e[e.RCDATA=1]="RCDATA",e[e.RAWTEXT=2]="RAWTEXT",e[e.SCRIPT_DATA=3]="SCRIPT_DATA",e[e.PLAINTEXT=4]="PLAINTEXT",e[e.TAG_OPEN=5]="TAG_OPEN",e[e.END_TAG_OPEN=6]="END_TAG_OPEN",e[e.TAG_NAME=7]="TAG_NAME",e[e.RCDATA_LESS_THAN_SIGN=8]="RCDATA_LESS_THAN_SIGN",e[e.RCDATA_END_TAG_OPEN=9]="RCDATA_END_TAG_OPEN",e[e.RCDATA_END_TAG_NAME=10]="RCDATA_END_TAG_NAME",e[e.RAWTEXT_LESS_THAN_SIGN=11]="RAWTEXT_LESS_THAN_SIGN",e[e.RAWTEXT_END_TAG_OPEN=12]="RAWTEXT_END_TAG_OPEN",e[e.RAWTEXT_END_TAG_NAME=13]="RAWTEXT_END_TAG_NAME",e[e.SCRIPT_DATA_LESS_THAN_SIGN=14]="SCRIPT_DATA_LESS_THAN_SIGN",e[e.SCRIPT_DATA_END_TAG_OPEN=15]="SCRIPT_DATA_END_TAG_OPEN",e[e.SCRIPT_DATA_END_TAG_NAME=16]="SCRIPT_DATA_END_TAG_NAME",e[e.SCRIPT_DATA_ESCAPE_START=17]="SCRIPT_DATA_ESCAPE_START",e[e.SCRIPT_DATA_ESCAPE_START_DASH=18]="SCRIPT_DATA_ESCAPE_START_DASH",e[e.SCRIPT_DATA_ESCAPED=19]="SCRIPT_DATA_ESCAPED",e[e.SCRIPT_DATA_ESCAPED_DASH=20]="SCRIPT_DATA_ESCAPED_DASH",e[e.SCRIPT_DATA_ESCAPED_DASH_DASH=21]="SCRIPT_DATA_ESCAPED_DASH_DASH",e[e.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN=22]="SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN",e[e.SCRIPT_DATA_ESCAPED_END_TAG_OPEN=23]="SCRIPT_DATA_ESCAPED_END_TAG_OPEN",e[e.SCRIPT_DATA_ESCAPED_END_TAG_NAME=24]="SCRIPT_DATA_ESCAPED_END_TAG_NAME",e[e.SCRIPT_DATA_DOUBLE_ESCAPE_START=25]="SCRIPT_DATA_DOUBLE_ESCAPE_START",e[e.SCRIPT_DATA_DOUBLE_ESCAPED=26]="SCRIPT_DATA_DOUBLE_ESCAPED",e[e.SCRIPT_DATA_DOUBLE_ESCAPED_DASH=27]="SCRIPT_DATA_DOUBLE_ESCAPED_DASH",e[e.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH=28]="SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH",e[e.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN=29]="SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN",e[e.SCRIPT_DATA_DOUBLE_ESCAPE_END=30]="SCRIPT_DATA_DOUBLE_ESCAPE_END",e[e.BEFORE_ATTRIBUTE_NAME=31]="BEFORE_ATTRIBUTE_NAME",e[e.ATTRIBUTE_NAME=32]="ATTRIBUTE_NAME",e[e.AFTER_ATTRIBUTE_NAME=33]="AFTER_ATTRIBUTE_NAME",e[e.BEFORE_ATTRIBUTE_VALUE=34]="BEFORE_ATTRIBUTE_VALUE",e[e.ATTRIBUTE_VALUE_DOUBLE_QUOTED=35]="ATTRIBUTE_VALUE_DOUBLE_QUOTED",e[e.ATTRIBUTE_VALUE_SINGLE_QUOTED=36]="ATTRIBUTE_VALUE_SINGLE_QUOTED",e[e.ATTRIBUTE_VALUE_UNQUOTED=37]="ATTRIBUTE_VALUE_UNQUOTED",e[e.AFTER_ATTRIBUTE_VALUE_QUOTED=38]="AFTER_ATTRIBUTE_VALUE_QUOTED",e[e.SELF_CLOSING_START_TAG=39]="SELF_CLOSING_START_TAG",e[e.BOGUS_COMMENT=40]="BOGUS_COMMENT",e[e.MARKUP_DECLARATION_OPEN=41]="MARKUP_DECLARATION_OPEN",e[e.COMMENT_START=42]="COMMENT_START",e[e.COMMENT_START_DASH=43]="COMMENT_START_DASH",e[e.COMMENT=44]="COMMENT",e[e.COMMENT_LESS_THAN_SIGN=45]="COMMENT_LESS_THAN_SIGN",e[e.COMMENT_LESS_THAN_SIGN_BANG=46]="COMMENT_LESS_THAN_SIGN_BANG",e[e.COMMENT_LESS_THAN_SIGN_BANG_DASH=47]="COMMENT_LESS_THAN_SIGN_BANG_DASH",e[e.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH=48]="COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH",e[e.COMMENT_END_DASH=49]="COMMENT_END_DASH",e[e.COMMENT_END=50]="COMMENT_END",e[e.COMMENT_END_BANG=51]="COMMENT_END_BANG",e[e.DOCTYPE=52]="DOCTYPE",e[e.BEFORE_DOCTYPE_NAME=53]="BEFORE_DOCTYPE_NAME",e[e.DOCTYPE_NAME=54]="DOCTYPE_NAME",e[e.AFTER_DOCTYPE_NAME=55]="AFTER_DOCTYPE_NAME",e[e.AFTER_DOCTYPE_PUBLIC_KEYWORD=56]="AFTER_DOCTYPE_PUBLIC_KEYWORD",e[e.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER=57]="BEFORE_DOCTYPE_PUBLIC_IDENTIFIER",e[e.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED=58]="DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED",e[e.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED=59]="DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED",e[e.AFTER_DOCTYPE_PUBLIC_IDENTIFIER=60]="AFTER_DOCTYPE_PUBLIC_IDENTIFIER",e[e.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS=61]="BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS",e[e.AFTER_DOCTYPE_SYSTEM_KEYWORD=62]="AFTER_DOCTYPE_SYSTEM_KEYWORD",e[e.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER=63]="BEFORE_DOCTYPE_SYSTEM_IDENTIFIER",e[e.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED=64]="DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED",e[e.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED=65]="DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED",e[e.AFTER_DOCTYPE_SYSTEM_IDENTIFIER=66]="AFTER_DOCTYPE_SYSTEM_IDENTIFIER",e[e.BOGUS_DOCTYPE=67]="BOGUS_DOCTYPE",e[e.CDATA_SECTION=68]="CDATA_SECTION",e[e.CDATA_SECTION_BRACKET=69]="CDATA_SECTION_BRACKET",e[e.CDATA_SECTION_END=70]="CDATA_SECTION_END",e[e.CHARACTER_REFERENCE=71]="CHARACTER_REFERENCE",e[e.AMBIGUOUS_AMPERSAND=72]="AMBIGUOUS_AMPERSAND"}(fi||(fi={}));const Ei={DATA:fi.DATA,RCDATA:fi.RCDATA,RAWTEXT:fi.RAWTEXT,SCRIPT_DATA:fi.SCRIPT_DATA,PLAINTEXT:fi.PLAINTEXT,CDATA_SECTION:fi.CDATA_SECTION};function mi(e){return e>=xs.LATIN_CAPITAL_A&&e<=xs.LATIN_CAPITAL_Z}function Ti(e){return function(e){return e>=xs.LATIN_SMALL_A&&e<=xs.LATIN_SMALL_Z}(e)||mi(e)}function Ai(e){return Ti(e)||function(e){return e>=xs.DIGIT_0&&e<=xs.DIGIT_9}(e)}function gi(e){return e+32}function _i(e){return e===xs.SPACE||e===xs.LINE_FEED||e===xs.TABULATION||e===xs.FORM_FEED}function bi(e){return _i(e)||e===xs.SOLIDUS||e===xs.GREATER_THAN_SIGN}class Si{constructor(e,t){this.options=e,this.handler=t,this.paused=!1,this.inLoop=!1,this.inForeignNode=!1,this.lastStartTagName="",this.active=!1,this.state=fi.DATA,this.returnState=fi.DATA,this.entityStartPos=0,this.consumedAfterSnapshot=-1,this.currentCharacterToken=null,this.currentToken=null,this.currentAttr={name:"",value:""},this.preprocessor=new Ws(t),this.currentLocation=this.getCurrentLocation(-1),this.entityDecoder=new ai(Ks,((e,t)=>{this.preprocessor.pos=this.entityStartPos+t-1,this._flushCodePointConsumedAsCharacterReference(e)}),t.onParseError?{missingSemicolonAfterCharacterReference:()=>{this._err(Vs.missingSemicolonAfterCharacterReference,1)},absenceOfDigitsInNumericCharacterReference:e=>{this._err(Vs.absenceOfDigitsInNumericCharacterReference,this.entityStartPos-this.preprocessor.pos+e)},validateNumericCharacterReference:e=>{const t=function(e){return e===xs.NULL?Vs.nullCharacterReference:e>1114111?Vs.characterReferenceOutsideUnicodeRange:Gs(e)?Vs.surrogateCharacterReference:Ys(e)?Vs.noncharacterCharacterReference:qs(e)||e===xs.CARRIAGE_RETURN?Vs.controlCharacterReference:null}(e);t&&this._err(t,1)}}:void 0)}_err(e,t=0){var r,n;null===(n=(r=this.handler).onParseError)||void 0===n||n.call(r,this.preprocessor.getError(e,t))}getCurrentLocation(e){return this.options.sourceCodeLocationInfo?{startLine:this.preprocessor.line,startCol:this.preprocessor.col-e,startOffset:this.preprocessor.offset-e,endLine:-1,endCol:-1,endOffset:-1}:null}_runParsingLoop(){if(!this.inLoop){for(this.inLoop=!0;this.active&&!this.paused;){this.consumedAfterSnapshot=0;const e=this._consume();this._ensureHibernation()||this._callState(e)}this.inLoop=!1}}pause(){this.paused=!0}resume(e){if(!this.paused)throw new Error("Parser was already resumed");this.paused=!1,this.inLoop||(this._runParsingLoop(),this.paused||null==e||e())}write(e,t,r){this.active=!0,this.preprocessor.write(e,t),this._runParsingLoop(),this.paused||null==r||r()}insertHtmlAtCurrentPos(e){this.active=!0,this.preprocessor.insertHtmlAtCurrentPos(e),this._runParsingLoop()}_ensureHibernation(){return!!this.preprocessor.endOfChunkHit&&(this.preprocessor.retreat(this.consumedAfterSnapshot),this.consumedAfterSnapshot=0,this.active=!1,!0)}_consume(){return this.consumedAfterSnapshot++,this.preprocessor.advance()}_advanceBy(e){this.consumedAfterSnapshot+=e;for(let t=0;t<e;t++)this.preprocessor.advance()}_consumeSequenceIfMatch(e,t){return!!this.preprocessor.startsWith(e,t)&&(this._advanceBy(e.length-1),!0)}_createStartTagToken(){this.currentToken={type:js.START_TAG,tagName:"",tagID:si.UNKNOWN,selfClosing:!1,ackSelfClosing:!1,attrs:[],location:this.getCurrentLocation(1)}}_createEndTagToken(){this.currentToken={type:js.END_TAG,tagName:"",tagID:si.UNKNOWN,selfClosing:!1,ackSelfClosing:!1,attrs:[],location:this.getCurrentLocation(2)}}_createCommentToken(e){this.currentToken={type:js.COMMENT,data:"",location:this.getCurrentLocation(e)}}_createDoctypeToken(e){this.currentToken={type:js.DOCTYPE,name:e,forceQuirks:!1,publicId:null,systemId:null,location:this.currentLocation}}_createCharacterToken(e,t){this.currentCharacterToken={type:e,chars:t,location:this.currentLocation}}_createAttr(e){this.currentAttr={name:e,value:""},this.currentLocation=this.getCurrentLocation(0)}_leaveAttrName(){var e,t;const r=this.currentToken;null===Qs(r,this.currentAttr.name)?(r.attrs.push(this.currentAttr),r.location&&this.currentLocation&&((null!==(e=(t=r.location).attrs)&&void 0!==e?e:t.attrs=Object.create(null))[this.currentAttr.name]=this.currentLocation,this._leaveAttrValue())):this._err(Vs.duplicateAttribute)}_leaveAttrValue(){this.currentLocation&&(this.currentLocation.endLine=this.preprocessor.line,this.currentLocation.endCol=this.preprocessor.col,this.currentLocation.endOffset=this.preprocessor.offset)}prepareToken(e){this._emitCurrentCharacterToken(e.location),this.currentToken=null,e.location&&(e.location.endLine=this.preprocessor.line,e.location.endCol=this.preprocessor.col+1,e.location.endOffset=this.preprocessor.offset+1),this.currentLocation=this.getCurrentLocation(-1)}emitCurrentTagToken(){const e=this.currentToken;this.prepareToken(e),e.tagID=li(e.tagName),e.type===js.START_TAG?(this.lastStartTagName=e.tagName,this.handler.onStartTag(e)):(e.attrs.length>0&&this._err(Vs.endTagWithAttributes),e.selfClosing&&this._err(Vs.endTagWithTrailingSolidus),this.handler.onEndTag(e)),this.preprocessor.dropParsedChunk()}emitCurrentComment(e){this.prepareToken(e),this.handler.onComment(e),this.preprocessor.dropParsedChunk()}emitCurrentDoctype(e){this.prepareToken(e),this.handler.onDoctype(e),this.preprocessor.dropParsedChunk()}_emitCurrentCharacterToken(e){if(this.currentCharacterToken){switch(e&&this.currentCharacterToken.location&&(this.currentCharacterToken.location.endLine=e.startLine,this.currentCharacterToken.location.endCol=e.startCol,this.currentCharacterToken.location.endOffset=e.startOffset),this.currentCharacterToken.type){case js.CHARACTER:this.handler.onCharacter(this.currentCharacterToken);break;case js.NULL_CHARACTER:this.handler.onNullCharacter(this.currentCharacterToken);break;case js.WHITESPACE_CHARACTER:this.handler.onWhitespaceCharacter(this.currentCharacterToken)}this.currentCharacterToken=null}}_emitEOFToken(){const e=this.getCurrentLocation(0);e&&(e.endLine=e.startLine,e.endCol=e.startCol,e.endOffset=e.startOffset),this._emitCurrentCharacterToken(e),this.handler.onEof({type:js.EOF,location:e}),this.active=!1}_appendCharToCurrentCharacterToken(e,t){if(this.currentCharacterToken){if(this.currentCharacterToken.type===e)return void(this.currentCharacterToken.chars+=t);this.currentLocation=this.getCurrentLocation(0),this._emitCurrentCharacterToken(this.currentLocation),this.preprocessor.dropParsedChunk()}this._createCharacterToken(e,t)}_emitCodePoint(e){const t=_i(e)?js.WHITESPACE_CHARACTER:e===xs.NULL?js.NULL_CHARACTER:js.CHARACTER;this._appendCharToCurrentCharacterToken(t,String.fromCodePoint(e))}_emitChars(e){this._appendCharToCurrentCharacterToken(js.CHARACTER,e)}_startCharacterReference(){this.returnState=this.state,this.state=fi.CHARACTER_REFERENCE,this.entityStartPos=this.preprocessor.pos,this.entityDecoder.startEntity(this._isCharacterReferenceInAttribute()?Zs.Attribute:Zs.Legacy)}_isCharacterReferenceInAttribute(){return this.returnState===fi.ATTRIBUTE_VALUE_DOUBLE_QUOTED||this.returnState===fi.ATTRIBUTE_VALUE_SINGLE_QUOTED||this.returnState===fi.ATTRIBUTE_VALUE_UNQUOTED}_flushCodePointConsumedAsCharacterReference(e){this._isCharacterReferenceInAttribute()?this.currentAttr.value+=String.fromCodePoint(e):this._emitCodePoint(e)}_callState(e){switch(this.state){case fi.DATA:this._stateData(e);break;case fi.RCDATA:this._stateRcdata(e);break;case fi.RAWTEXT:this._stateRawtext(e);break;case fi.SCRIPT_DATA:this._stateScriptData(e);break;case fi.PLAINTEXT:this._statePlaintext(e);break;case fi.TAG_OPEN:this._stateTagOpen(e);break;case fi.END_TAG_OPEN:this._stateEndTagOpen(e);break;case fi.TAG_NAME:this._stateTagName(e);break;case fi.RCDATA_LESS_THAN_SIGN:this._stateRcdataLessThanSign(e);break;case fi.RCDATA_END_TAG_OPEN:this._stateRcdataEndTagOpen(e);break;case fi.RCDATA_END_TAG_NAME:this._stateRcdataEndTagName(e);break;case fi.RAWTEXT_LESS_THAN_SIGN:this._stateRawtextLessThanSign(e);break;case fi.RAWTEXT_END_TAG_OPEN:this._stateRawtextEndTagOpen(e);break;case fi.RAWTEXT_END_TAG_NAME:this._stateRawtextEndTagName(e);break;case fi.SCRIPT_DATA_LESS_THAN_SIGN:this._stateScriptDataLessThanSign(e);break;case fi.SCRIPT_DATA_END_TAG_OPEN:this._stateScriptDataEndTagOpen(e);break;case fi.SCRIPT_DATA_END_TAG_NAME:this._stateScriptDataEndTagName(e);break;case fi.SCRIPT_DATA_ESCAPE_START:this._stateScriptDataEscapeStart(e);break;case fi.SCRIPT_DATA_ESCAPE_START_DASH:this._stateScriptDataEscapeStartDash(e);break;case fi.SCRIPT_DATA_ESCAPED:this._stateScriptDataEscaped(e);break;case fi.SCRIPT_DATA_ESCAPED_DASH:this._stateScriptDataEscapedDash(e);break;case fi.SCRIPT_DATA_ESCAPED_DASH_DASH:this._stateScriptDataEscapedDashDash(e);break;case fi.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN:this._stateScriptDataEscapedLessThanSign(e);break;case fi.SCRIPT_DATA_ESCAPED_END_TAG_OPEN:this._stateScriptDataEscapedEndTagOpen(e);break;case fi.SCRIPT_DATA_ESCAPED_END_TAG_NAME:this._stateScriptDataEscapedEndTagName(e);break;case fi.SCRIPT_DATA_DOUBLE_ESCAPE_START:this._stateScriptDataDoubleEscapeStart(e);break;case fi.SCRIPT_DATA_DOUBLE_ESCAPED:this._stateScriptDataDoubleEscaped(e);break;case fi.SCRIPT_DATA_DOUBLE_ESCAPED_DASH:this._stateScriptDataDoubleEscapedDash(e);break;case fi.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH:this._stateScriptDataDoubleEscapedDashDash(e);break;case fi.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN:this._stateScriptDataDoubleEscapedLessThanSign(e);break;case fi.SCRIPT_DATA_DOUBLE_ESCAPE_END:this._stateScriptDataDoubleEscapeEnd(e);break;case fi.BEFORE_ATTRIBUTE_NAME:this._stateBeforeAttributeName(e);break;case fi.ATTRIBUTE_NAME:this._stateAttributeName(e);break;case fi.AFTER_ATTRIBUTE_NAME:this._stateAfterAttributeName(e);break;case fi.BEFORE_ATTRIBUTE_VALUE:this._stateBeforeAttributeValue(e);break;case fi.ATTRIBUTE_VALUE_DOUBLE_QUOTED:this._stateAttributeValueDoubleQuoted(e);break;case fi.ATTRIBUTE_VALUE_SINGLE_QUOTED:this._stateAttributeValueSingleQuoted(e);break;case fi.ATTRIBUTE_VALUE_UNQUOTED:this._stateAttributeValueUnquoted(e);break;case fi.AFTER_ATTRIBUTE_VALUE_QUOTED:this._stateAfterAttributeValueQuoted(e);break;case fi.SELF_CLOSING_START_TAG:this._stateSelfClosingStartTag(e);break;case fi.BOGUS_COMMENT:this._stateBogusComment(e);break;case fi.MARKUP_DECLARATION_OPEN:this._stateMarkupDeclarationOpen(e);break;case fi.COMMENT_START:this._stateCommentStart(e);break;case fi.COMMENT_START_DASH:this._stateCommentStartDash(e);break;case fi.COMMENT:this._stateComment(e);break;case fi.COMMENT_LESS_THAN_SIGN:this._stateCommentLessThanSign(e);break;case fi.COMMENT_LESS_THAN_SIGN_BANG:this._stateCommentLessThanSignBang(e);break;case fi.COMMENT_LESS_THAN_SIGN_BANG_DASH:this._stateCommentLessThanSignBangDash(e);break;case fi.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH:this._stateCommentLessThanSignBangDashDash(e);break;case fi.COMMENT_END_DASH:this._stateCommentEndDash(e);break;case fi.COMMENT_END:this._stateCommentEnd(e);break;case fi.COMMENT_END_BANG:this._stateCommentEndBang(e);break;case fi.DOCTYPE:this._stateDoctype(e);break;case fi.BEFORE_DOCTYPE_NAME:this._stateBeforeDoctypeName(e);break;case fi.DOCTYPE_NAME:this._stateDoctypeName(e);break;case fi.AFTER_DOCTYPE_NAME:this._stateAfterDoctypeName(e);break;case fi.AFTER_DOCTYPE_PUBLIC_KEYWORD:this._stateAfterDoctypePublicKeyword(e);break;case fi.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER:this._stateBeforeDoctypePublicIdentifier(e);break;case fi.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED:this._stateDoctypePublicIdentifierDoubleQuoted(e);break;case fi.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED:this._stateDoctypePublicIdentifierSingleQuoted(e);break;case fi.AFTER_DOCTYPE_PUBLIC_IDENTIFIER:this._stateAfterDoctypePublicIdentifier(e);break;case fi.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS:this._stateBetweenDoctypePublicAndSystemIdentifiers(e);break;case fi.AFTER_DOCTYPE_SYSTEM_KEYWORD:this._stateAfterDoctypeSystemKeyword(e);break;case fi.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER:this._stateBeforeDoctypeSystemIdentifier(e);break;case fi.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED:this._stateDoctypeSystemIdentifierDoubleQuoted(e);break;case fi.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED:this._stateDoctypeSystemIdentifierSingleQuoted(e);break;case fi.AFTER_DOCTYPE_SYSTEM_IDENTIFIER:this._stateAfterDoctypeSystemIdentifier(e);break;case fi.BOGUS_DOCTYPE:this._stateBogusDoctype(e);break;case fi.CDATA_SECTION:this._stateCdataSection(e);break;case fi.CDATA_SECTION_BRACKET:this._stateCdataSectionBracket(e);break;case fi.CDATA_SECTION_END:this._stateCdataSectionEnd(e);break;case fi.CHARACTER_REFERENCE:this._stateCharacterReference();break;case fi.AMBIGUOUS_AMPERSAND:this._stateAmbiguousAmpersand(e);break;default:throw new Error("Unknown state")}}_stateData(e){switch(e){case xs.LESS_THAN_SIGN:this.state=fi.TAG_OPEN;break;case xs.AMPERSAND:this._startCharacterReference();break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this._emitCodePoint(e);break;case xs.EOF:this._emitEOFToken();break;default:this._emitCodePoint(e)}}_stateRcdata(e){switch(e){case xs.AMPERSAND:this._startCharacterReference();break;case xs.LESS_THAN_SIGN:this.state=fi.RCDATA_LESS_THAN_SIGN;break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this._emitChars(vs);break;case xs.EOF:this._emitEOFToken();break;default:this._emitCodePoint(e)}}_stateRawtext(e){switch(e){case xs.LESS_THAN_SIGN:this.state=fi.RAWTEXT_LESS_THAN_SIGN;break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this._emitChars(vs);break;case xs.EOF:this._emitEOFToken();break;default:this._emitCodePoint(e)}}_stateScriptData(e){switch(e){case xs.LESS_THAN_SIGN:this.state=fi.SCRIPT_DATA_LESS_THAN_SIGN;break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this._emitChars(vs);break;case xs.EOF:this._emitEOFToken();break;default:this._emitCodePoint(e)}}_statePlaintext(e){switch(e){case xs.NULL:this._err(Vs.unexpectedNullCharacter),this._emitChars(vs);break;case xs.EOF:this._emitEOFToken();break;default:this._emitCodePoint(e)}}_stateTagOpen(e){if(Ti(e))this._createStartTagToken(),this.state=fi.TAG_NAME,this._stateTagName(e);else switch(e){case xs.EXCLAMATION_MARK:this.state=fi.MARKUP_DECLARATION_OPEN;break;case xs.SOLIDUS:this.state=fi.END_TAG_OPEN;break;case xs.QUESTION_MARK:this._err(Vs.unexpectedQuestionMarkInsteadOfTagName),this._createCommentToken(1),this.state=fi.BOGUS_COMMENT,this._stateBogusComment(e);break;case xs.EOF:this._err(Vs.eofBeforeTagName),this._emitChars("<"),this._emitEOFToken();break;default:this._err(Vs.invalidFirstCharacterOfTagName),this._emitChars("<"),this.state=fi.DATA,this._stateData(e)}}_stateEndTagOpen(e){if(Ti(e))this._createEndTagToken(),this.state=fi.TAG_NAME,this._stateTagName(e);else switch(e){case xs.GREATER_THAN_SIGN:this._err(Vs.missingEndTagName),this.state=fi.DATA;break;case xs.EOF:this._err(Vs.eofBeforeTagName),this._emitChars("</"),this._emitEOFToken();break;default:this._err(Vs.invalidFirstCharacterOfTagName),this._createCommentToken(2),this.state=fi.BOGUS_COMMENT,this._stateBogusComment(e)}}_stateTagName(e){const t=this.currentToken;switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:this.state=fi.BEFORE_ATTRIBUTE_NAME;break;case xs.SOLIDUS:this.state=fi.SELF_CLOSING_START_TAG;break;case xs.GREATER_THAN_SIGN:this.state=fi.DATA,this.emitCurrentTagToken();break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),t.tagName+=vs;break;case xs.EOF:this._err(Vs.eofInTag),this._emitEOFToken();break;default:t.tagName+=String.fromCodePoint(mi(e)?gi(e):e)}}_stateRcdataLessThanSign(e){e===xs.SOLIDUS?this.state=fi.RCDATA_END_TAG_OPEN:(this._emitChars("<"),this.state=fi.RCDATA,this._stateRcdata(e))}_stateRcdataEndTagOpen(e){Ti(e)?(this.state=fi.RCDATA_END_TAG_NAME,this._stateRcdataEndTagName(e)):(this._emitChars("</"),this.state=fi.RCDATA,this._stateRcdata(e))}handleSpecialEndTag(e){if(!this.preprocessor.startsWith(this.lastStartTagName,!1))return!this._ensureHibernation();switch(this._createEndTagToken(),this.currentToken.tagName=this.lastStartTagName,this.preprocessor.peek(this.lastStartTagName.length)){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:return this._advanceBy(this.lastStartTagName.length),this.state=fi.BEFORE_ATTRIBUTE_NAME,!1;case xs.SOLIDUS:return this._advanceBy(this.lastStartTagName.length),this.state=fi.SELF_CLOSING_START_TAG,!1;case xs.GREATER_THAN_SIGN:return this._advanceBy(this.lastStartTagName.length),this.emitCurrentTagToken(),this.state=fi.DATA,!1;default:return!this._ensureHibernation()}}_stateRcdataEndTagName(e){this.handleSpecialEndTag(e)&&(this._emitChars("</"),this.state=fi.RCDATA,this._stateRcdata(e))}_stateRawtextLessThanSign(e){e===xs.SOLIDUS?this.state=fi.RAWTEXT_END_TAG_OPEN:(this._emitChars("<"),this.state=fi.RAWTEXT,this._stateRawtext(e))}_stateRawtextEndTagOpen(e){Ti(e)?(this.state=fi.RAWTEXT_END_TAG_NAME,this._stateRawtextEndTagName(e)):(this._emitChars("</"),this.state=fi.RAWTEXT,this._stateRawtext(e))}_stateRawtextEndTagName(e){this.handleSpecialEndTag(e)&&(this._emitChars("</"),this.state=fi.RAWTEXT,this._stateRawtext(e))}_stateScriptDataLessThanSign(e){switch(e){case xs.SOLIDUS:this.state=fi.SCRIPT_DATA_END_TAG_OPEN;break;case xs.EXCLAMATION_MARK:this.state=fi.SCRIPT_DATA_ESCAPE_START,this._emitChars("<!");break;default:this._emitChars("<"),this.state=fi.SCRIPT_DATA,this._stateScriptData(e)}}_stateScriptDataEndTagOpen(e){Ti(e)?(this.state=fi.SCRIPT_DATA_END_TAG_NAME,this._stateScriptDataEndTagName(e)):(this._emitChars("</"),this.state=fi.SCRIPT_DATA,this._stateScriptData(e))}_stateScriptDataEndTagName(e){this.handleSpecialEndTag(e)&&(this._emitChars("</"),this.state=fi.SCRIPT_DATA,this._stateScriptData(e))}_stateScriptDataEscapeStart(e){e===xs.HYPHEN_MINUS?(this.state=fi.SCRIPT_DATA_ESCAPE_START_DASH,this._emitChars("-")):(this.state=fi.SCRIPT_DATA,this._stateScriptData(e))}_stateScriptDataEscapeStartDash(e){e===xs.HYPHEN_MINUS?(this.state=fi.SCRIPT_DATA_ESCAPED_DASH_DASH,this._emitChars("-")):(this.state=fi.SCRIPT_DATA,this._stateScriptData(e))}_stateScriptDataEscaped(e){switch(e){case xs.HYPHEN_MINUS:this.state=fi.SCRIPT_DATA_ESCAPED_DASH,this._emitChars("-");break;case xs.LESS_THAN_SIGN:this.state=fi.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this._emitChars(vs);break;case xs.EOF:this._err(Vs.eofInScriptHtmlCommentLikeText),this._emitEOFToken();break;default:this._emitCodePoint(e)}}_stateScriptDataEscapedDash(e){switch(e){case xs.HYPHEN_MINUS:this.state=fi.SCRIPT_DATA_ESCAPED_DASH_DASH,this._emitChars("-");break;case xs.LESS_THAN_SIGN:this.state=fi.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this.state=fi.SCRIPT_DATA_ESCAPED,this._emitChars(vs);break;case xs.EOF:this._err(Vs.eofInScriptHtmlCommentLikeText),this._emitEOFToken();break;default:this.state=fi.SCRIPT_DATA_ESCAPED,this._emitCodePoint(e)}}_stateScriptDataEscapedDashDash(e){switch(e){case xs.HYPHEN_MINUS:this._emitChars("-");break;case xs.LESS_THAN_SIGN:this.state=fi.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;break;case xs.GREATER_THAN_SIGN:this.state=fi.SCRIPT_DATA,this._emitChars(">");break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this.state=fi.SCRIPT_DATA_ESCAPED,this._emitChars(vs);break;case xs.EOF:this._err(Vs.eofInScriptHtmlCommentLikeText),this._emitEOFToken();break;default:this.state=fi.SCRIPT_DATA_ESCAPED,this._emitCodePoint(e)}}_stateScriptDataEscapedLessThanSign(e){e===xs.SOLIDUS?this.state=fi.SCRIPT_DATA_ESCAPED_END_TAG_OPEN:Ti(e)?(this._emitChars("<"),this.state=fi.SCRIPT_DATA_DOUBLE_ESCAPE_START,this._stateScriptDataDoubleEscapeStart(e)):(this._emitChars("<"),this.state=fi.SCRIPT_DATA_ESCAPED,this._stateScriptDataEscaped(e))}_stateScriptDataEscapedEndTagOpen(e){Ti(e)?(this.state=fi.SCRIPT_DATA_ESCAPED_END_TAG_NAME,this._stateScriptDataEscapedEndTagName(e)):(this._emitChars("</"),this.state=fi.SCRIPT_DATA_ESCAPED,this._stateScriptDataEscaped(e))}_stateScriptDataEscapedEndTagName(e){this.handleSpecialEndTag(e)&&(this._emitChars("</"),this.state=fi.SCRIPT_DATA_ESCAPED,this._stateScriptDataEscaped(e))}_stateScriptDataDoubleEscapeStart(e){if(this.preprocessor.startsWith(Hs,!1)&&bi(this.preprocessor.peek(6))){this._emitCodePoint(e);for(let e=0;e<6;e++)this._emitCodePoint(this._consume());this.state=fi.SCRIPT_DATA_DOUBLE_ESCAPED}else this._ensureHibernation()||(this.state=fi.SCRIPT_DATA_ESCAPED,this._stateScriptDataEscaped(e))}_stateScriptDataDoubleEscaped(e){switch(e){case xs.HYPHEN_MINUS:this.state=fi.SCRIPT_DATA_DOUBLE_ESCAPED_DASH,this._emitChars("-");break;case xs.LESS_THAN_SIGN:this.state=fi.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN,this._emitChars("<");break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this._emitChars(vs);break;case xs.EOF:this._err(Vs.eofInScriptHtmlCommentLikeText),this._emitEOFToken();break;default:this._emitCodePoint(e)}}_stateScriptDataDoubleEscapedDash(e){switch(e){case xs.HYPHEN_MINUS:this.state=fi.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH,this._emitChars("-");break;case xs.LESS_THAN_SIGN:this.state=fi.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN,this._emitChars("<");break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this.state=fi.SCRIPT_DATA_DOUBLE_ESCAPED,this._emitChars(vs);break;case xs.EOF:this._err(Vs.eofInScriptHtmlCommentLikeText),this._emitEOFToken();break;default:this.state=fi.SCRIPT_DATA_DOUBLE_ESCAPED,this._emitCodePoint(e)}}_stateScriptDataDoubleEscapedDashDash(e){switch(e){case xs.HYPHEN_MINUS:this._emitChars("-");break;case xs.LESS_THAN_SIGN:this.state=fi.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN,this._emitChars("<");break;case xs.GREATER_THAN_SIGN:this.state=fi.SCRIPT_DATA,this._emitChars(">");break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this.state=fi.SCRIPT_DATA_DOUBLE_ESCAPED,this._emitChars(vs);break;case xs.EOF:this._err(Vs.eofInScriptHtmlCommentLikeText),this._emitEOFToken();break;default:this.state=fi.SCRIPT_DATA_DOUBLE_ESCAPED,this._emitCodePoint(e)}}_stateScriptDataDoubleEscapedLessThanSign(e){e===xs.SOLIDUS?(this.state=fi.SCRIPT_DATA_DOUBLE_ESCAPE_END,this._emitChars("/")):(this.state=fi.SCRIPT_DATA_DOUBLE_ESCAPED,this._stateScriptDataDoubleEscaped(e))}_stateScriptDataDoubleEscapeEnd(e){if(this.preprocessor.startsWith(Hs,!1)&&bi(this.preprocessor.peek(6))){this._emitCodePoint(e);for(let e=0;e<6;e++)this._emitCodePoint(this._consume());this.state=fi.SCRIPT_DATA_ESCAPED}else this._ensureHibernation()||(this.state=fi.SCRIPT_DATA_DOUBLE_ESCAPED,this._stateScriptDataDoubleEscaped(e))}_stateBeforeAttributeName(e){switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:break;case xs.SOLIDUS:case xs.GREATER_THAN_SIGN:case xs.EOF:this.state=fi.AFTER_ATTRIBUTE_NAME,this._stateAfterAttributeName(e);break;case xs.EQUALS_SIGN:this._err(Vs.unexpectedEqualsSignBeforeAttributeName),this._createAttr("="),this.state=fi.ATTRIBUTE_NAME;break;default:this._createAttr(""),this.state=fi.ATTRIBUTE_NAME,this._stateAttributeName(e)}}_stateAttributeName(e){switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:case xs.SOLIDUS:case xs.GREATER_THAN_SIGN:case xs.EOF:this._leaveAttrName(),this.state=fi.AFTER_ATTRIBUTE_NAME,this._stateAfterAttributeName(e);break;case xs.EQUALS_SIGN:this._leaveAttrName(),this.state=fi.BEFORE_ATTRIBUTE_VALUE;break;case xs.QUOTATION_MARK:case xs.APOSTROPHE:case xs.LESS_THAN_SIGN:this._err(Vs.unexpectedCharacterInAttributeName),this.currentAttr.name+=String.fromCodePoint(e);break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this.currentAttr.name+=vs;break;default:this.currentAttr.name+=String.fromCodePoint(mi(e)?gi(e):e)}}_stateAfterAttributeName(e){switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:break;case xs.SOLIDUS:this.state=fi.SELF_CLOSING_START_TAG;break;case xs.EQUALS_SIGN:this.state=fi.BEFORE_ATTRIBUTE_VALUE;break;case xs.GREATER_THAN_SIGN:this.state=fi.DATA,this.emitCurrentTagToken();break;case xs.EOF:this._err(Vs.eofInTag),this._emitEOFToken();break;default:this._createAttr(""),this.state=fi.ATTRIBUTE_NAME,this._stateAttributeName(e)}}_stateBeforeAttributeValue(e){switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:break;case xs.QUOTATION_MARK:this.state=fi.ATTRIBUTE_VALUE_DOUBLE_QUOTED;break;case xs.APOSTROPHE:this.state=fi.ATTRIBUTE_VALUE_SINGLE_QUOTED;break;case xs.GREATER_THAN_SIGN:this._err(Vs.missingAttributeValue),this.state=fi.DATA,this.emitCurrentTagToken();break;default:this.state=fi.ATTRIBUTE_VALUE_UNQUOTED,this._stateAttributeValueUnquoted(e)}}_stateAttributeValueDoubleQuoted(e){switch(e){case xs.QUOTATION_MARK:this.state=fi.AFTER_ATTRIBUTE_VALUE_QUOTED;break;case xs.AMPERSAND:this._startCharacterReference();break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this.currentAttr.value+=vs;break;case xs.EOF:this._err(Vs.eofInTag),this._emitEOFToken();break;default:this.currentAttr.value+=String.fromCodePoint(e)}}_stateAttributeValueSingleQuoted(e){switch(e){case xs.APOSTROPHE:this.state=fi.AFTER_ATTRIBUTE_VALUE_QUOTED;break;case xs.AMPERSAND:this._startCharacterReference();break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this.currentAttr.value+=vs;break;case xs.EOF:this._err(Vs.eofInTag),this._emitEOFToken();break;default:this.currentAttr.value+=String.fromCodePoint(e)}}_stateAttributeValueUnquoted(e){switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:this._leaveAttrValue(),this.state=fi.BEFORE_ATTRIBUTE_NAME;break;case xs.AMPERSAND:this._startCharacterReference();break;case xs.GREATER_THAN_SIGN:this._leaveAttrValue(),this.state=fi.DATA,this.emitCurrentTagToken();break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this.currentAttr.value+=vs;break;case xs.QUOTATION_MARK:case xs.APOSTROPHE:case xs.LESS_THAN_SIGN:case xs.EQUALS_SIGN:case xs.GRAVE_ACCENT:this._err(Vs.unexpectedCharacterInUnquotedAttributeValue),this.currentAttr.value+=String.fromCodePoint(e);break;case xs.EOF:this._err(Vs.eofInTag),this._emitEOFToken();break;default:this.currentAttr.value+=String.fromCodePoint(e)}}_stateAfterAttributeValueQuoted(e){switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:this._leaveAttrValue(),this.state=fi.BEFORE_ATTRIBUTE_NAME;break;case xs.SOLIDUS:this._leaveAttrValue(),this.state=fi.SELF_CLOSING_START_TAG;break;case xs.GREATER_THAN_SIGN:this._leaveAttrValue(),this.state=fi.DATA,this.emitCurrentTagToken();break;case xs.EOF:this._err(Vs.eofInTag),this._emitEOFToken();break;default:this._err(Vs.missingWhitespaceBetweenAttributes),this.state=fi.BEFORE_ATTRIBUTE_NAME,this._stateBeforeAttributeName(e)}}_stateSelfClosingStartTag(e){switch(e){case xs.GREATER_THAN_SIGN:this.currentToken.selfClosing=!0,this.state=fi.DATA,this.emitCurrentTagToken();break;case xs.EOF:this._err(Vs.eofInTag),this._emitEOFToken();break;default:this._err(Vs.unexpectedSolidusInTag),this.state=fi.BEFORE_ATTRIBUTE_NAME,this._stateBeforeAttributeName(e)}}_stateBogusComment(e){const t=this.currentToken;switch(e){case xs.GREATER_THAN_SIGN:this.state=fi.DATA,this.emitCurrentComment(t);break;case xs.EOF:this.emitCurrentComment(t),this._emitEOFToken();break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),t.data+=vs;break;default:t.data+=String.fromCodePoint(e)}}_stateMarkupDeclarationOpen(e){this._consumeSequenceIfMatch("--",!0)?(this._createCommentToken(3),this.state=fi.COMMENT_START):this._consumeSequenceIfMatch(Fs,!1)?(this.currentLocation=this.getCurrentLocation(8),this.state=fi.DOCTYPE):this._consumeSequenceIfMatch(Us,!0)?this.inForeignNode?this.state=fi.CDATA_SECTION:(this._err(Vs.cdataInHtmlContent),this._createCommentToken(8),this.currentToken.data="[CDATA[",this.state=fi.BOGUS_COMMENT):this._ensureHibernation()||(this._err(Vs.incorrectlyOpenedComment),this._createCommentToken(2),this.state=fi.BOGUS_COMMENT,this._stateBogusComment(e))}_stateCommentStart(e){switch(e){case xs.HYPHEN_MINUS:this.state=fi.COMMENT_START_DASH;break;case xs.GREATER_THAN_SIGN:{this._err(Vs.abruptClosingOfEmptyComment),this.state=fi.DATA;const e=this.currentToken;this.emitCurrentComment(e);break}default:this.state=fi.COMMENT,this._stateComment(e)}}_stateCommentStartDash(e){const t=this.currentToken;switch(e){case xs.HYPHEN_MINUS:this.state=fi.COMMENT_END;break;case xs.GREATER_THAN_SIGN:this._err(Vs.abruptClosingOfEmptyComment),this.state=fi.DATA,this.emitCurrentComment(t);break;case xs.EOF:this._err(Vs.eofInComment),this.emitCurrentComment(t),this._emitEOFToken();break;default:t.data+="-",this.state=fi.COMMENT,this._stateComment(e)}}_stateComment(e){const t=this.currentToken;switch(e){case xs.HYPHEN_MINUS:this.state=fi.COMMENT_END_DASH;break;case xs.LESS_THAN_SIGN:t.data+="<",this.state=fi.COMMENT_LESS_THAN_SIGN;break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),t.data+=vs;break;case xs.EOF:this._err(Vs.eofInComment),this.emitCurrentComment(t),this._emitEOFToken();break;default:t.data+=String.fromCodePoint(e)}}_stateCommentLessThanSign(e){const t=this.currentToken;switch(e){case xs.EXCLAMATION_MARK:t.data+="!",this.state=fi.COMMENT_LESS_THAN_SIGN_BANG;break;case xs.LESS_THAN_SIGN:t.data+="<";break;default:this.state=fi.COMMENT,this._stateComment(e)}}_stateCommentLessThanSignBang(e){e===xs.HYPHEN_MINUS?this.state=fi.COMMENT_LESS_THAN_SIGN_BANG_DASH:(this.state=fi.COMMENT,this._stateComment(e))}_stateCommentLessThanSignBangDash(e){e===xs.HYPHEN_MINUS?this.state=fi.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH:(this.state=fi.COMMENT_END_DASH,this._stateCommentEndDash(e))}_stateCommentLessThanSignBangDashDash(e){e!==xs.GREATER_THAN_SIGN&&e!==xs.EOF&&this._err(Vs.nestedComment),this.state=fi.COMMENT_END,this._stateCommentEnd(e)}_stateCommentEndDash(e){const t=this.currentToken;switch(e){case xs.HYPHEN_MINUS:this.state=fi.COMMENT_END;break;case xs.EOF:this._err(Vs.eofInComment),this.emitCurrentComment(t),this._emitEOFToken();break;default:t.data+="-",this.state=fi.COMMENT,this._stateComment(e)}}_stateCommentEnd(e){const t=this.currentToken;switch(e){case xs.GREATER_THAN_SIGN:this.state=fi.DATA,this.emitCurrentComment(t);break;case xs.EXCLAMATION_MARK:this.state=fi.COMMENT_END_BANG;break;case xs.HYPHEN_MINUS:t.data+="-";break;case xs.EOF:this._err(Vs.eofInComment),this.emitCurrentComment(t),this._emitEOFToken();break;default:t.data+="--",this.state=fi.COMMENT,this._stateComment(e)}}_stateCommentEndBang(e){const t=this.currentToken;switch(e){case xs.HYPHEN_MINUS:t.data+="--!",this.state=fi.COMMENT_END_DASH;break;case xs.GREATER_THAN_SIGN:this._err(Vs.incorrectlyClosedComment),this.state=fi.DATA,this.emitCurrentComment(t);break;case xs.EOF:this._err(Vs.eofInComment),this.emitCurrentComment(t),this._emitEOFToken();break;default:t.data+="--!",this.state=fi.COMMENT,this._stateComment(e)}}_stateDoctype(e){switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:this.state=fi.BEFORE_DOCTYPE_NAME;break;case xs.GREATER_THAN_SIGN:this.state=fi.BEFORE_DOCTYPE_NAME,this._stateBeforeDoctypeName(e);break;case xs.EOF:{this._err(Vs.eofInDoctype),this._createDoctypeToken(null);const e=this.currentToken;e.forceQuirks=!0,this.emitCurrentDoctype(e),this._emitEOFToken();break}default:this._err(Vs.missingWhitespaceBeforeDoctypeName),this.state=fi.BEFORE_DOCTYPE_NAME,this._stateBeforeDoctypeName(e)}}_stateBeforeDoctypeName(e){if(mi(e))this._createDoctypeToken(String.fromCharCode(gi(e))),this.state=fi.DOCTYPE_NAME;else switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this._createDoctypeToken(vs),this.state=fi.DOCTYPE_NAME;break;case xs.GREATER_THAN_SIGN:{this._err(Vs.missingDoctypeName),this._createDoctypeToken(null);const e=this.currentToken;e.forceQuirks=!0,this.emitCurrentDoctype(e),this.state=fi.DATA;break}case xs.EOF:{this._err(Vs.eofInDoctype),this._createDoctypeToken(null);const e=this.currentToken;e.forceQuirks=!0,this.emitCurrentDoctype(e),this._emitEOFToken();break}default:this._createDoctypeToken(String.fromCodePoint(e)),this.state=fi.DOCTYPE_NAME}}_stateDoctypeName(e){const t=this.currentToken;switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:this.state=fi.AFTER_DOCTYPE_NAME;break;case xs.GREATER_THAN_SIGN:this.state=fi.DATA,this.emitCurrentDoctype(t);break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),t.name+=vs;break;case xs.EOF:this._err(Vs.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:t.name+=String.fromCodePoint(mi(e)?gi(e):e)}}_stateAfterDoctypeName(e){const t=this.currentToken;switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:break;case xs.GREATER_THAN_SIGN:this.state=fi.DATA,this.emitCurrentDoctype(t);break;case xs.EOF:this._err(Vs.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._consumeSequenceIfMatch("public",!1)?this.state=fi.AFTER_DOCTYPE_PUBLIC_KEYWORD:this._consumeSequenceIfMatch("system",!1)?this.state=fi.AFTER_DOCTYPE_SYSTEM_KEYWORD:this._ensureHibernation()||(this._err(Vs.invalidCharacterSequenceAfterDoctypeName),t.forceQuirks=!0,this.state=fi.BOGUS_DOCTYPE,this._stateBogusDoctype(e))}}_stateAfterDoctypePublicKeyword(e){const t=this.currentToken;switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:this.state=fi.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;break;case xs.QUOTATION_MARK:this._err(Vs.missingWhitespaceAfterDoctypePublicKeyword),t.publicId="",this.state=fi.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;break;case xs.APOSTROPHE:this._err(Vs.missingWhitespaceAfterDoctypePublicKeyword),t.publicId="",this.state=fi.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;break;case xs.GREATER_THAN_SIGN:this._err(Vs.missingDoctypePublicIdentifier),t.forceQuirks=!0,this.state=fi.DATA,this.emitCurrentDoctype(t);break;case xs.EOF:this._err(Vs.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(Vs.missingQuoteBeforeDoctypePublicIdentifier),t.forceQuirks=!0,this.state=fi.BOGUS_DOCTYPE,this._stateBogusDoctype(e)}}_stateBeforeDoctypePublicIdentifier(e){const t=this.currentToken;switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:break;case xs.QUOTATION_MARK:t.publicId="",this.state=fi.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;break;case xs.APOSTROPHE:t.publicId="",this.state=fi.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;break;case xs.GREATER_THAN_SIGN:this._err(Vs.missingDoctypePublicIdentifier),t.forceQuirks=!0,this.state=fi.DATA,this.emitCurrentDoctype(t);break;case xs.EOF:this._err(Vs.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(Vs.missingQuoteBeforeDoctypePublicIdentifier),t.forceQuirks=!0,this.state=fi.BOGUS_DOCTYPE,this._stateBogusDoctype(e)}}_stateDoctypePublicIdentifierDoubleQuoted(e){const t=this.currentToken;switch(e){case xs.QUOTATION_MARK:this.state=fi.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),t.publicId+=vs;break;case xs.GREATER_THAN_SIGN:this._err(Vs.abruptDoctypePublicIdentifier),t.forceQuirks=!0,this.emitCurrentDoctype(t),this.state=fi.DATA;break;case xs.EOF:this._err(Vs.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:t.publicId+=String.fromCodePoint(e)}}_stateDoctypePublicIdentifierSingleQuoted(e){const t=this.currentToken;switch(e){case xs.APOSTROPHE:this.state=fi.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),t.publicId+=vs;break;case xs.GREATER_THAN_SIGN:this._err(Vs.abruptDoctypePublicIdentifier),t.forceQuirks=!0,this.emitCurrentDoctype(t),this.state=fi.DATA;break;case xs.EOF:this._err(Vs.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:t.publicId+=String.fromCodePoint(e)}}_stateAfterDoctypePublicIdentifier(e){const t=this.currentToken;switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:this.state=fi.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;break;case xs.GREATER_THAN_SIGN:this.state=fi.DATA,this.emitCurrentDoctype(t);break;case xs.QUOTATION_MARK:this._err(Vs.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers),t.systemId="",this.state=fi.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;break;case xs.APOSTROPHE:this._err(Vs.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers),t.systemId="",this.state=fi.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;break;case xs.EOF:this._err(Vs.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(Vs.missingQuoteBeforeDoctypeSystemIdentifier),t.forceQuirks=!0,this.state=fi.BOGUS_DOCTYPE,this._stateBogusDoctype(e)}}_stateBetweenDoctypePublicAndSystemIdentifiers(e){const t=this.currentToken;switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:break;case xs.GREATER_THAN_SIGN:this.emitCurrentDoctype(t),this.state=fi.DATA;break;case xs.QUOTATION_MARK:t.systemId="",this.state=fi.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;break;case xs.APOSTROPHE:t.systemId="",this.state=fi.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;break;case xs.EOF:this._err(Vs.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(Vs.missingQuoteBeforeDoctypeSystemIdentifier),t.forceQuirks=!0,this.state=fi.BOGUS_DOCTYPE,this._stateBogusDoctype(e)}}_stateAfterDoctypeSystemKeyword(e){const t=this.currentToken;switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:this.state=fi.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;break;case xs.QUOTATION_MARK:this._err(Vs.missingWhitespaceAfterDoctypeSystemKeyword),t.systemId="",this.state=fi.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;break;case xs.APOSTROPHE:this._err(Vs.missingWhitespaceAfterDoctypeSystemKeyword),t.systemId="",this.state=fi.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;break;case xs.GREATER_THAN_SIGN:this._err(Vs.missingDoctypeSystemIdentifier),t.forceQuirks=!0,this.state=fi.DATA,this.emitCurrentDoctype(t);break;case xs.EOF:this._err(Vs.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(Vs.missingQuoteBeforeDoctypeSystemIdentifier),t.forceQuirks=!0,this.state=fi.BOGUS_DOCTYPE,this._stateBogusDoctype(e)}}_stateBeforeDoctypeSystemIdentifier(e){const t=this.currentToken;switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:break;case xs.QUOTATION_MARK:t.systemId="",this.state=fi.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;break;case xs.APOSTROPHE:t.systemId="",this.state=fi.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;break;case xs.GREATER_THAN_SIGN:this._err(Vs.missingDoctypeSystemIdentifier),t.forceQuirks=!0,this.state=fi.DATA,this.emitCurrentDoctype(t);break;case xs.EOF:this._err(Vs.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(Vs.missingQuoteBeforeDoctypeSystemIdentifier),t.forceQuirks=!0,this.state=fi.BOGUS_DOCTYPE,this._stateBogusDoctype(e)}}_stateDoctypeSystemIdentifierDoubleQuoted(e){const t=this.currentToken;switch(e){case xs.QUOTATION_MARK:this.state=fi.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),t.systemId+=vs;break;case xs.GREATER_THAN_SIGN:this._err(Vs.abruptDoctypeSystemIdentifier),t.forceQuirks=!0,this.emitCurrentDoctype(t),this.state=fi.DATA;break;case xs.EOF:this._err(Vs.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:t.systemId+=String.fromCodePoint(e)}}_stateDoctypeSystemIdentifierSingleQuoted(e){const t=this.currentToken;switch(e){case xs.APOSTROPHE:this.state=fi.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),t.systemId+=vs;break;case xs.GREATER_THAN_SIGN:this._err(Vs.abruptDoctypeSystemIdentifier),t.forceQuirks=!0,this.emitCurrentDoctype(t),this.state=fi.DATA;break;case xs.EOF:this._err(Vs.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:t.systemId+=String.fromCodePoint(e)}}_stateAfterDoctypeSystemIdentifier(e){const t=this.currentToken;switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:break;case xs.GREATER_THAN_SIGN:this.emitCurrentDoctype(t),this.state=fi.DATA;break;case xs.EOF:this._err(Vs.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(Vs.unexpectedCharacterAfterDoctypeSystemIdentifier),this.state=fi.BOGUS_DOCTYPE,this._stateBogusDoctype(e)}}_stateBogusDoctype(e){const t=this.currentToken;switch(e){case xs.GREATER_THAN_SIGN:this.emitCurrentDoctype(t),this.state=fi.DATA;break;case xs.NULL:this._err(Vs.unexpectedNullCharacter);break;case xs.EOF:this.emitCurrentDoctype(t),this._emitEOFToken()}}_stateCdataSection(e){switch(e){case xs.RIGHT_SQUARE_BRACKET:this.state=fi.CDATA_SECTION_BRACKET;break;case xs.EOF:this._err(Vs.eofInCdata),this._emitEOFToken();break;default:this._emitCodePoint(e)}}_stateCdataSectionBracket(e){e===xs.RIGHT_SQUARE_BRACKET?this.state=fi.CDATA_SECTION_END:(this._emitChars("]"),this.state=fi.CDATA_SECTION,this._stateCdataSection(e))}_stateCdataSectionEnd(e){switch(e){case xs.GREATER_THAN_SIGN:this.state=fi.DATA;break;case xs.RIGHT_SQUARE_BRACKET:this._emitChars("]");break;default:this._emitChars("]]"),this.state=fi.CDATA_SECTION,this._stateCdataSection(e)}}_stateCharacterReference(){let e=this.entityDecoder.write(this.preprocessor.html,this.preprocessor.pos);if(e<0){if(!this.preprocessor.lastChunkWritten)return this.active=!1,this.preprocessor.pos=this.preprocessor.html.length-1,this.consumedAfterSnapshot=0,void(this.preprocessor.endOfChunkHit=!0);e=this.entityDecoder.end()}0===e?(this.preprocessor.pos=this.entityStartPos,this._flushCodePointConsumedAsCharacterReference(xs.AMPERSAND),this.state=!this._isCharacterReferenceInAttribute()&&Ai(this.preprocessor.peek(1))?fi.AMBIGUOUS_AMPERSAND:this.returnState):this.state=this.returnState}_stateAmbiguousAmpersand(e){Ai(e)?this._flushCodePointConsumedAsCharacterReference(e):(e===xs.SEMICOLON&&this._err(Vs.unknownNamedCharacterReference),this.state=this.returnState,this._callState(e))}}const Ni=new Set([si.DD,si.DT,si.LI,si.OPTGROUP,si.OPTION,si.P,si.RB,si.RP,si.RT,si.RTC]),Ii=new Set([...Ni,si.CAPTION,si.COLGROUP,si.TBODY,si.TD,si.TFOOT,si.TH,si.THEAD,si.TR]),Ci=new Set([si.APPLET,si.CAPTION,si.HTML,si.MARQUEE,si.OBJECT,si.TABLE,si.TD,si.TEMPLATE,si.TH]),yi=new Set([...Ci,si.OL,si.UL]),Di=new Set([...Ci,si.BUTTON]),Oi=new Set([si.ANNOTATION_XML,si.MI,si.MN,si.MO,si.MS,si.MTEXT]),Ri=new Set([si.DESC,si.FOREIGN_OBJECT,si.TITLE]),Li=new Set([si.TR,si.TEMPLATE,si.HTML]),ki=new Set([si.TBODY,si.TFOOT,si.THEAD,si.TEMPLATE,si.HTML]),wi=new Set([si.TABLE,si.TEMPLATE,si.HTML]),Pi=new Set([si.TD,si.TH]);class Mi{get currentTmplContentOrNode(){return this._isInTemplate()?this.treeAdapter.getTemplateContent(this.current):this.current}constructor(e,t,r){this.treeAdapter=t,this.handler=r,this.items=[],this.tagIDs=[],this.stackTop=-1,this.tmplCount=0,this.currentTagId=si.UNKNOWN,this.current=e}_indexOf(e){return this.items.lastIndexOf(e,this.stackTop)}_isInTemplate(){return this.currentTagId===si.TEMPLATE&&this.treeAdapter.getNamespaceURI(this.current)===ei.HTML}_updateCurrentElement(){this.current=this.items[this.stackTop],this.currentTagId=this.tagIDs[this.stackTop]}push(e,t){this.stackTop++,this.items[this.stackTop]=e,this.current=e,this.tagIDs[this.stackTop]=t,this.currentTagId=t,this._isInTemplate()&&this.tmplCount++,this.handler.onItemPush(e,t,!0)}pop(){const e=this.current;this.tmplCount>0&&this._isInTemplate()&&this.tmplCount--,this.stackTop--,this._updateCurrentElement(),this.handler.onItemPop(e,!0)}replace(e,t){const r=this._indexOf(e);this.items[r]=t,r===this.stackTop&&(this.current=t)}insertAfter(e,t,r){const n=this._indexOf(e)+1;this.items.splice(n,0,t),this.tagIDs.splice(n,0,r),this.stackTop++,n===this.stackTop&&this._updateCurrentElement(),this.current&&void 0!==this.currentTagId&&this.handler.onItemPush(this.current,this.currentTagId,n===this.stackTop)}popUntilTagNamePopped(e){let t=this.stackTop+1;do{t=this.tagIDs.lastIndexOf(e,t-1)}while(t>0&&this.treeAdapter.getNamespaceURI(this.items[t])!==ei.HTML);this.shortenToLength(Math.max(t,0))}shortenToLength(e){for(;this.stackTop>=e;){const t=this.current;this.tmplCount>0&&this._isInTemplate()&&(this.tmplCount-=1),this.stackTop--,this._updateCurrentElement(),this.handler.onItemPop(t,this.stackTop<e)}}popUntilElementPopped(e){const t=this._indexOf(e);this.shortenToLength(Math.max(t,0))}popUntilPopped(e,t){const r=this._indexOfTagNames(e,t);this.shortenToLength(Math.max(r,0))}popUntilNumberedHeaderPopped(){this.popUntilPopped(di,ei.HTML)}popUntilTableCellPopped(){this.popUntilPopped(Pi,ei.HTML)}popAllUpToHtmlElement(){this.tmplCount=0,this.shortenToLength(1)}_indexOfTagNames(e,t){for(let r=this.stackTop;r>=0;r--)if(e.has(this.tagIDs[r])&&this.treeAdapter.getNamespaceURI(this.items[r])===t)return r;return-1}clearBackTo(e,t){const r=this._indexOfTagNames(e,t);this.shortenToLength(r+1)}clearBackToTableContext(){this.clearBackTo(wi,ei.HTML)}clearBackToTableBodyContext(){this.clearBackTo(ki,ei.HTML)}clearBackToTableRowContext(){this.clearBackTo(Li,ei.HTML)}remove(e){const t=this._indexOf(e);t>=0&&(t===this.stackTop?this.pop():(this.items.splice(t,1),this.tagIDs.splice(t,1),this.stackTop--,this._updateCurrentElement(),this.handler.onItemPop(e,!1)))}tryPeekProperlyNestedBodyElement(){return this.stackTop>=1&&this.tagIDs[1]===si.BODY?this.items[1]:null}contains(e){return this._indexOf(e)>-1}getCommonAncestor(e){const t=this._indexOf(e)-1;return t>=0?this.items[t]:null}isRootHtmlElementCurrent(){return 0===this.stackTop&&this.tagIDs[0]===si.HTML}hasInDynamicScope(e,t){for(let r=this.stackTop;r>=0;r--){const n=this.tagIDs[r];switch(this.treeAdapter.getNamespaceURI(this.items[r])){case ei.HTML:if(n===e)return!0;if(t.has(n))return!1;break;case ei.SVG:if(Ri.has(n))return!1;break;case ei.MATHML:if(Oi.has(n))return!1}}return!0}hasInScope(e){return this.hasInDynamicScope(e,Ci)}hasInListItemScope(e){return this.hasInDynamicScope(e,yi)}hasInButtonScope(e){return this.hasInDynamicScope(e,Di)}hasNumberedHeaderInScope(){for(let e=this.stackTop;e>=0;e--){const t=this.tagIDs[e];switch(this.treeAdapter.getNamespaceURI(this.items[e])){case ei.HTML:if(di.has(t))return!0;if(Ci.has(t))return!1;break;case ei.SVG:if(Ri.has(t))return!1;break;case ei.MATHML:if(Oi.has(t))return!1}}return!0}hasInTableScope(e){for(let t=this.stackTop;t>=0;t--)if(this.treeAdapter.getNamespaceURI(this.items[t])===ei.HTML)switch(this.tagIDs[t]){case e:return!0;case si.TABLE:case si.HTML:return!1}return!0}hasTableBodyContextInTableScope(){for(let e=this.stackTop;e>=0;e--)if(this.treeAdapter.getNamespaceURI(this.items[e])===ei.HTML)switch(this.tagIDs[e]){case si.TBODY:case si.THEAD:case si.TFOOT:return!0;case si.TABLE:case si.HTML:return!1}return!0}hasInSelectScope(e){for(let t=this.stackTop;t>=0;t--)if(this.treeAdapter.getNamespaceURI(this.items[t])===ei.HTML)switch(this.tagIDs[t]){case e:return!0;case si.OPTION:case si.OPTGROUP:break;default:return!1}return!0}generateImpliedEndTags(){for(;void 0!==this.currentTagId&&Ni.has(this.currentTagId);)this.pop()}generateImpliedEndTagsThoroughly(){for(;void 0!==this.currentTagId&&Ii.has(this.currentTagId);)this.pop()}generateImpliedEndTagsWithExclusion(e){for(;void 0!==this.currentTagId&&this.currentTagId!==e&&Ii.has(this.currentTagId);)this.pop()}}var Bi;!function(e){e[e.Marker=0]="Marker",e[e.Element=1]="Element"}(Bi||(Bi={}));const vi={type:Bi.Marker};class xi{constructor(e){this.treeAdapter=e,this.entries=[],this.bookmark=null}_getNoahArkConditionCandidates(e,t){const r=[],n=t.length,s=this.treeAdapter.getTagName(e),i=this.treeAdapter.getNamespaceURI(e);for(let e=0;e<this.entries.length;e++){const t=this.entries[e];if(t.type===Bi.Marker)break;const{element:a}=t;if(this.treeAdapter.getTagName(a)===s&&this.treeAdapter.getNamespaceURI(a)===i){const t=this.treeAdapter.getAttrList(a);t.length===n&&r.push({idx:e,attrs:t})}}return r}_ensureNoahArkCondition(e){if(this.entries.length<3)return;const t=this.treeAdapter.getAttrList(e),r=this._getNoahArkConditionCandidates(e,t);if(r.length<3)return;const n=new Map(t.map((e=>[e.name,e.value])));let s=0;for(let e=0;e<r.length;e++){const t=r[e];t.attrs.every((e=>n.get(e.name)===e.value))&&(s+=1,s>=3&&this.entries.splice(t.idx,1))}}insertMarker(){this.entries.unshift(vi)}pushElement(e,t){this._ensureNoahArkCondition(e),this.entries.unshift({type:Bi.Element,element:e,token:t})}insertElementAfterBookmark(e,t){const r=this.entries.indexOf(this.bookmark);this.entries.splice(r,0,{type:Bi.Element,element:e,token:t})}removeEntry(e){const t=this.entries.indexOf(e);-1!==t&&this.entries.splice(t,1)}clearToLastMarker(){const e=this.entries.indexOf(vi);-1===e?this.entries.length=0:this.entries.splice(0,e+1)}getElementEntryInScopeWithTagName(e){const t=this.entries.find((t=>t.type===Bi.Marker||this.treeAdapter.getTagName(t.element)===e));return t&&t.type===Bi.Element?t:null}getElementEntry(e){return this.entries.find((t=>t.type===Bi.Element&&t.element===e))}}const Ui={createDocument:()=>({nodeName:"#document",mode:ri.NO_QUIRKS,childNodes:[]}),createDocumentFragment:()=>({nodeName:"#document-fragment",childNodes:[]}),createElement:(e,t,r)=>({nodeName:e,tagName:e,attrs:r,namespaceURI:t,childNodes:[],parentNode:null}),createCommentNode:e=>({nodeName:"#comment",data:e,parentNode:null}),createTextNode:e=>({nodeName:"#text",value:e,parentNode:null}),appendChild(e,t){e.childNodes.push(t),t.parentNode=e},insertBefore(e,t,r){const n=e.childNodes.indexOf(r);e.childNodes.splice(n,0,t),t.parentNode=e},setTemplateContent(e,t){e.content=t},getTemplateContent:e=>e.content,setDocumentType(e,t,r,n){const s=e.childNodes.find((e=>"#documentType"===e.nodeName));if(s)s.name=t,s.publicId=r,s.systemId=n;else{const s={nodeName:"#documentType",name:t,publicId:r,systemId:n,parentNode:null};Ui.appendChild(e,s)}},setDocumentMode(e,t){e.mode=t},getDocumentMode:e=>e.mode,detachNode(e){if(e.parentNode){const t=e.parentNode.childNodes.indexOf(e);e.parentNode.childNodes.splice(t,1),e.parentNode=null}},insertText(e,t){if(e.childNodes.length>0){const r=e.childNodes[e.childNodes.length-1];if(Ui.isTextNode(r))return void(r.value+=t)}Ui.appendChild(e,Ui.createTextNode(t))},insertTextBefore(e,t,r){const n=e.childNodes[e.childNodes.indexOf(r)-1];n&&Ui.isTextNode(n)?n.value+=t:Ui.insertBefore(e,Ui.createTextNode(t),r)},adoptAttributes(e,t){const r=new Set(e.attrs.map((e=>e.name)));for(let n=0;n<t.length;n++)r.has(t[n].name)||e.attrs.push(t[n])},getFirstChild:e=>e.childNodes[0],getChildNodes:e=>e.childNodes,getParentNode:e=>e.parentNode,getAttrList:e=>e.attrs,getTagName:e=>e.tagName,getNamespaceURI:e=>e.namespaceURI,getTextNodeContent:e=>e.value,getCommentNodeContent:e=>e.data,getDocumentTypeNodeName:e=>e.name,getDocumentTypeNodePublicId:e=>e.publicId,getDocumentTypeNodeSystemId:e=>e.systemId,isTextNode:e=>"#text"===e.nodeName,isCommentNode:e=>"#comment"===e.nodeName,isDocumentTypeNode:e=>"#documentType"===e.nodeName,isElementNode:e=>Object.prototype.hasOwnProperty.call(e,"tagName"),setNodeSourceCodeLocation(e,t){e.sourceCodeLocation=t},getNodeSourceCodeLocation:e=>e.sourceCodeLocation,updateNodeSourceCodeLocation(e,t){e.sourceCodeLocation={...e.sourceCodeLocation,...t}}},Fi="html",Hi=["+//silmaril//dtd html pro v0r11 19970101//","-//as//dtd html 3.0 aswedit + extensions//","-//advasoft ltd//dtd html 3.0 aswedit + extensions//","-//ietf//dtd html 2.0 level 1//","-//ietf//dtd html 2.0 level 2//","-//ietf//dtd html 2.0 strict level 1//","-//ietf//dtd html 2.0 strict level 2//","-//ietf//dtd html 2.0 strict//","-//ietf//dtd html 2.0//","-//ietf//dtd html 2.1e//","-//ietf//dtd html 3.0//","-//ietf//dtd html 3.2 final//","-//ietf//dtd html 3.2//","-//ietf//dtd html 3//","-//ietf//dtd html level 0//","-//ietf//dtd html level 1//","-//ietf//dtd html level 2//","-//ietf//dtd html level 3//","-//ietf//dtd html strict level 0//","-//ietf//dtd html strict level 1//","-//ietf//dtd html strict level 2//","-//ietf//dtd html strict level 3//","-//ietf//dtd html strict//","-//ietf//dtd html//","-//metrius//dtd metrius presentational//","-//microsoft//dtd internet explorer 2.0 html strict//","-//microsoft//dtd internet explorer 2.0 html//","-//microsoft//dtd internet explorer 2.0 tables//","-//microsoft//dtd internet explorer 3.0 html strict//","-//microsoft//dtd internet explorer 3.0 html//","-//microsoft//dtd internet explorer 3.0 tables//","-//netscape comm. corp.//dtd html//","-//netscape comm. corp.//dtd strict html//","-//o'reilly and associates//dtd html 2.0//","-//o'reilly and associates//dtd html extended 1.0//","-//o'reilly and associates//dtd html extended relaxed 1.0//","-//sq//dtd html 2.0 hotmetal + extensions//","-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//","-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//","-//spyglass//dtd html 2.0 extended//","-//sun microsystems corp.//dtd hotjava html//","-//sun microsystems corp.//dtd hotjava strict html//","-//w3c//dtd html 3 1995-03-24//","-//w3c//dtd html 3.2 draft//","-//w3c//dtd html 3.2 final//","-//w3c//dtd html 3.2//","-//w3c//dtd html 3.2s draft//","-//w3c//dtd html 4.0 frameset//","-//w3c//dtd html 4.0 transitional//","-//w3c//dtd html experimental 19960712//","-//w3c//dtd html experimental 970421//","-//w3c//dtd w3 html//","-//w3o//dtd w3 html 3.0//","-//webtechs//dtd mozilla html 2.0//","-//webtechs//dtd mozilla html//"],Gi=[...Hi,"-//w3c//dtd html 4.01 frameset//","-//w3c//dtd html 4.01 transitional//"],qi=new Set(["-//w3o//dtd w3 html strict 3.0//en//","-/w3c/dtd html 4.0 transitional/en","html"]),Yi=["-//w3c//dtd xhtml 1.0 frameset//","-//w3c//dtd xhtml 1.0 transitional//"],Vi=[...Yi,"-//w3c//dtd html 4.01 frameset//","-//w3c//dtd html 4.01 transitional//"];function ji(e,t){return t.some((t=>e.startsWith(t)))}const Wi=new Map(["attributeName","attributeType","baseFrequency","baseProfile","calcMode","clipPathUnits","diffuseConstant","edgeMode","filterUnits","glyphRef","gradientTransform","gradientUnits","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","lengthAdjust","limitingConeAngle","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","numOctaves","pathLength","patternContentUnits","patternTransform","patternUnits","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","specularConstant","specularExponent","spreadMethod","startOffset","stdDeviation","stitchTiles","surfaceScale","systemLanguage","tableValues","targetX","targetY","textLength","viewBox","viewTarget","xChannelSelector","yChannelSelector","zoomAndPan"].map((e=>[e.toLowerCase(),e]))),Qi=new Map([["xlink:actuate",{prefix:"xlink",name:"actuate",namespace:ei.XLINK}],["xlink:arcrole",{prefix:"xlink",name:"arcrole",namespace:ei.XLINK}],["xlink:href",{prefix:"xlink",name:"href",namespace:ei.XLINK}],["xlink:role",{prefix:"xlink",name:"role",namespace:ei.XLINK}],["xlink:show",{prefix:"xlink",name:"show",namespace:ei.XLINK}],["xlink:title",{prefix:"xlink",name:"title",namespace:ei.XLINK}],["xlink:type",{prefix:"xlink",name:"type",namespace:ei.XLINK}],["xml:lang",{prefix:"xml",name:"lang",namespace:ei.XML}],["xml:space",{prefix:"xml",name:"space",namespace:ei.XML}],["xmlns",{prefix:"",name:"xmlns",namespace:ei.XMLNS}],["xmlns:xlink",{prefix:"xmlns",name:"xlink",namespace:ei.XMLNS}]]),Ki=new Map(["altGlyph","altGlyphDef","altGlyphItem","animateColor","animateMotion","animateTransform","clipPath","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","foreignObject","glyphRef","linearGradient","radialGradient","textPath"].map((e=>[e.toLowerCase(),e]))),Xi=new Set([si.B,si.BIG,si.BLOCKQUOTE,si.BODY,si.BR,si.CENTER,si.CODE,si.DD,si.DIV,si.DL,si.DT,si.EM,si.EMBED,si.H1,si.H2,si.H3,si.H4,si.H5,si.H6,si.HEAD,si.HR,si.I,si.IMG,si.LI,si.LISTING,si.MENU,si.META,si.NOBR,si.OL,si.P,si.PRE,si.RUBY,si.S,si.SMALL,si.SPAN,si.STRONG,si.STRIKE,si.SUB,si.SUP,si.TABLE,si.TT,si.U,si.UL,si.VAR]);function $i(e){for(let t=0;t<e.attrs.length;t++)if("definitionurl"===e.attrs[t].name){e.attrs[t].name="definitionURL";break}}function zi(e){for(let t=0;t<e.attrs.length;t++){const r=Wi.get(e.attrs[t].name);null!=r&&(e.attrs[t].name=r)}}function Ji(e){for(let t=0;t<e.attrs.length;t++){const r=Qi.get(e.attrs[t].name);r&&(e.attrs[t].prefix=r.prefix,e.attrs[t].name=r.name,e.attrs[t].namespace=r.namespace)}}var Zi;!function(e){e[e.INITIAL=0]="INITIAL",e[e.BEFORE_HTML=1]="BEFORE_HTML",e[e.BEFORE_HEAD=2]="BEFORE_HEAD",e[e.IN_HEAD=3]="IN_HEAD",e[e.IN_HEAD_NO_SCRIPT=4]="IN_HEAD_NO_SCRIPT",e[e.AFTER_HEAD=5]="AFTER_HEAD",e[e.IN_BODY=6]="IN_BODY",e[e.TEXT=7]="TEXT",e[e.IN_TABLE=8]="IN_TABLE",e[e.IN_TABLE_TEXT=9]="IN_TABLE_TEXT",e[e.IN_CAPTION=10]="IN_CAPTION",e[e.IN_COLUMN_GROUP=11]="IN_COLUMN_GROUP",e[e.IN_TABLE_BODY=12]="IN_TABLE_BODY",e[e.IN_ROW=13]="IN_ROW",e[e.IN_CELL=14]="IN_CELL",e[e.IN_SELECT=15]="IN_SELECT",e[e.IN_SELECT_IN_TABLE=16]="IN_SELECT_IN_TABLE",e[e.IN_TEMPLATE=17]="IN_TEMPLATE",e[e.AFTER_BODY=18]="AFTER_BODY",e[e.IN_FRAMESET=19]="IN_FRAMESET",e[e.AFTER_FRAMESET=20]="AFTER_FRAMESET",e[e.AFTER_AFTER_BODY=21]="AFTER_AFTER_BODY",e[e.AFTER_AFTER_FRAMESET=22]="AFTER_AFTER_FRAMESET"}(Zi||(Zi={}));const ea={startLine:-1,startCol:-1,startOffset:-1,endLine:-1,endCol:-1,endOffset:-1},ta=new Set([si.TABLE,si.TBODY,si.TFOOT,si.THEAD,si.TR]),ra={scriptingEnabled:!0,sourceCodeLocationInfo:!1,treeAdapter:Ui,onParseError:null};class na{constructor(e,t,r=null,n=null){this.fragmentContext=r,this.scriptHandler=n,this.currentToken=null,this.stopped=!1,this.insertionMode=Zi.INITIAL,this.originalInsertionMode=Zi.INITIAL,this.headElement=null,this.formElement=null,this.currentNotInHTML=!1,this.tmplInsertionModeStack=[],this.pendingCharacterTokens=[],this.hasNonWhitespacePendingCharacterToken=!1,this.framesetOk=!0,this.skipNextNewLine=!1,this.fosterParentingEnabled=!1,this.options={...ra,...e},this.treeAdapter=this.options.treeAdapter,this.onParseError=this.options.onParseError,this.onParseError&&(this.options.sourceCodeLocationInfo=!0),this.document=null!=t?t:this.treeAdapter.createDocument(),this.tokenizer=new Si(this.options,this),this.activeFormattingElements=new xi(this.treeAdapter),this.fragmentContextID=r?li(this.treeAdapter.getTagName(r)):si.UNKNOWN,this._setContextModes(null!=r?r:this.document,this.fragmentContextID),this.openElements=new Mi(this.document,this.treeAdapter,this)}static parse(e,t){const r=new this(t);return r.tokenizer.write(e,!0),r.document}static getFragmentParser(e,t){const r={...ra,...t};null!=e||(e=r.treeAdapter.createElement(ni.TEMPLATE,ei.HTML,[]));const n=r.treeAdapter.createElement("documentmock",ei.HTML,[]),s=new this(r,n,e);return s.fragmentContextID===si.TEMPLATE&&s.tmplInsertionModeStack.unshift(Zi.IN_TEMPLATE),s._initTokenizerForFragmentParsing(),s._insertFakeRootElement(),s._resetInsertionMode(),s._findFormInFragmentContext(),s}getFragment(){const e=this.treeAdapter.getFirstChild(this.document),t=this.treeAdapter.createDocumentFragment();return this._adoptNodes(e,t),t}_err(e,t,r){var n;if(!this.onParseError)return;const s=null!==(n=e.location)&&void 0!==n?n:ea,i={code:t,startLine:s.startLine,startCol:s.startCol,startOffset:s.startOffset,endLine:r?s.startLine:s.endLine,endCol:r?s.startCol:s.endCol,endOffset:r?s.startOffset:s.endOffset};this.onParseError(i)}onItemPush(e,t,r){var n,s;null===(s=(n=this.treeAdapter).onItemPush)||void 0===s||s.call(n,e),r&&this.openElements.stackTop>0&&this._setContextModes(e,t)}onItemPop(e,t){var r,n;if(this.options.sourceCodeLocationInfo&&this._setEndLocation(e,this.currentToken),null===(n=(r=this.treeAdapter).onItemPop)||void 0===n||n.call(r,e,this.openElements.current),t){let e,t;0===this.openElements.stackTop&&this.fragmentContext?(e=this.fragmentContext,t=this.fragmentContextID):({current:e,currentTagId:t}=this.openElements),this._setContextModes(e,t)}}_setContextModes(e,t){const r=e===this.document||e&&this.treeAdapter.getNamespaceURI(e)===ei.HTML;this.currentNotInHTML=!r,this.tokenizer.inForeignNode=!r&&void 0!==e&&void 0!==t&&!this._isIntegrationPoint(t,e)}_switchToTextParsing(e,t){this._insertElement(e,ei.HTML),this.tokenizer.state=t,this.originalInsertionMode=this.insertionMode,this.insertionMode=Zi.TEXT}switchToPlaintextParsing(){this.insertionMode=Zi.TEXT,this.originalInsertionMode=Zi.IN_BODY,this.tokenizer.state=Ei.PLAINTEXT}_getAdjustedCurrentElement(){return 0===this.openElements.stackTop&&this.fragmentContext?this.fragmentContext:this.openElements.current}_findFormInFragmentContext(){let e=this.fragmentContext;for(;e;){if(this.treeAdapter.getTagName(e)===ni.FORM){this.formElement=e;break}e=this.treeAdapter.getParentNode(e)}}_initTokenizerForFragmentParsing(){if(this.fragmentContext&&this.treeAdapter.getNamespaceURI(this.fragmentContext)===ei.HTML)switch(this.fragmentContextID){case si.TITLE:case si.TEXTAREA:this.tokenizer.state=Ei.RCDATA;break;case si.STYLE:case si.XMP:case si.IFRAME:case si.NOEMBED:case si.NOFRAMES:case si.NOSCRIPT:this.tokenizer.state=Ei.RAWTEXT;break;case si.SCRIPT:this.tokenizer.state=Ei.SCRIPT_DATA;break;case si.PLAINTEXT:this.tokenizer.state=Ei.PLAINTEXT}}_setDocumentType(e){const t=e.name||"",r=e.publicId||"",n=e.systemId||"";if(this.treeAdapter.setDocumentType(this.document,t,r,n),e.location){const t=this.treeAdapter.getChildNodes(this.document).find((e=>this.treeAdapter.isDocumentTypeNode(e)));t&&this.treeAdapter.setNodeSourceCodeLocation(t,e.location)}}_attachElementToTree(e,t){if(this.options.sourceCodeLocationInfo){const r=t&&{...t,startTag:t};this.treeAdapter.setNodeSourceCodeLocation(e,r)}if(this._shouldFosterParentOnInsertion())this._fosterParentElement(e);else{const t=this.openElements.currentTmplContentOrNode;this.treeAdapter.appendChild(null!=t?t:this.document,e)}}_appendElement(e,t){const r=this.treeAdapter.createElement(e.tagName,t,e.attrs);this._attachElementToTree(r,e.location)}_insertElement(e,t){const r=this.treeAdapter.createElement(e.tagName,t,e.attrs);this._attachElementToTree(r,e.location),this.openElements.push(r,e.tagID)}_insertFakeElement(e,t){const r=this.treeAdapter.createElement(e,ei.HTML,[]);this._attachElementToTree(r,null),this.openElements.push(r,t)}_insertTemplate(e){const t=this.treeAdapter.createElement(e.tagName,ei.HTML,e.attrs),r=this.treeAdapter.createDocumentFragment();this.treeAdapter.setTemplateContent(t,r),this._attachElementToTree(t,e.location),this.openElements.push(t,e.tagID),this.options.sourceCodeLocationInfo&&this.treeAdapter.setNodeSourceCodeLocation(r,null)}_insertFakeRootElement(){const e=this.treeAdapter.createElement(ni.HTML,ei.HTML,[]);this.options.sourceCodeLocationInfo&&this.treeAdapter.setNodeSourceCodeLocation(e,null),this.treeAdapter.appendChild(this.openElements.current,e),this.openElements.push(e,si.HTML)}_appendCommentNode(e,t){const r=this.treeAdapter.createCommentNode(e.data);this.treeAdapter.appendChild(t,r),this.options.sourceCodeLocationInfo&&this.treeAdapter.setNodeSourceCodeLocation(r,e.location)}_insertCharacters(e){let t,r;if(this._shouldFosterParentOnInsertion()?(({parent:t,beforeElement:r}=this._findFosterParentingLocation()),r?this.treeAdapter.insertTextBefore(t,e.chars,r):this.treeAdapter.insertText(t,e.chars)):(t=this.openElements.currentTmplContentOrNode,this.treeAdapter.insertText(t,e.chars)),!e.location)return;const n=this.treeAdapter.getChildNodes(t),s=r?n.lastIndexOf(r):n.length,i=n[s-1];if(this.treeAdapter.getNodeSourceCodeLocation(i)){const{endLine:t,endCol:r,endOffset:n}=e.location;this.treeAdapter.updateNodeSourceCodeLocation(i,{endLine:t,endCol:r,endOffset:n})}else this.options.sourceCodeLocationInfo&&this.treeAdapter.setNodeSourceCodeLocation(i,e.location)}_adoptNodes(e,t){for(let r=this.treeAdapter.getFirstChild(e);r;r=this.treeAdapter.getFirstChild(e))this.treeAdapter.detachNode(r),this.treeAdapter.appendChild(t,r)}_setEndLocation(e,t){if(this.treeAdapter.getNodeSourceCodeLocation(e)&&t.location){const r=t.location,n=this.treeAdapter.getTagName(e),s=t.type===js.END_TAG&&n===t.tagName?{endTag:{...r},endLine:r.endLine,endCol:r.endCol,endOffset:r.endOffset}:{endLine:r.startLine,endCol:r.startCol,endOffset:r.startOffset};this.treeAdapter.updateNodeSourceCodeLocation(e,s)}}shouldProcessStartTagTokenInForeignContent(e){if(!this.currentNotInHTML)return!1;let t,r;return 0===this.openElements.stackTop&&this.fragmentContext?(t=this.fragmentContext,r=this.fragmentContextID):({current:t,currentTagId:r}=this.openElements),(e.tagID!==si.SVG||this.treeAdapter.getTagName(t)!==ni.ANNOTATION_XML||this.treeAdapter.getNamespaceURI(t)!==ei.MATHML)&&(this.tokenizer.inForeignNode||(e.tagID===si.MGLYPH||e.tagID===si.MALIGNMARK)&&void 0!==r&&!this._isIntegrationPoint(r,t,ei.HTML))}_processToken(e){switch(e.type){case js.CHARACTER:this.onCharacter(e);break;case js.NULL_CHARACTER:this.onNullCharacter(e);break;case js.COMMENT:this.onComment(e);break;case js.DOCTYPE:this.onDoctype(e);break;case js.START_TAG:this._processStartTag(e);break;case js.END_TAG:this.onEndTag(e);break;case js.EOF:this.onEof(e);break;case js.WHITESPACE_CHARACTER:this.onWhitespaceCharacter(e)}}_isIntegrationPoint(e,t,r){return function(e,t,r,n){return(!n||n===ei.HTML)&&function(e,t,r){if(t===ei.MATHML&&e===si.ANNOTATION_XML)for(let e=0;e<r.length;e++)if(r[e].name===ti.ENCODING){const t=r[e].value.toLowerCase();return"text/html"===t||"application/xhtml+xml"===t}return t===ei.SVG&&(e===si.FOREIGN_OBJECT||e===si.DESC||e===si.TITLE)}(e,t,r)||(!n||n===ei.MATHML)&&function(e,t){return t===ei.MATHML&&(e===si.MI||e===si.MO||e===si.MN||e===si.MS||e===si.MTEXT)}(e,t)}(e,this.treeAdapter.getNamespaceURI(t),this.treeAdapter.getAttrList(t),r)}_reconstructActiveFormattingElements(){const e=this.activeFormattingElements.entries.length;if(e){const t=this.activeFormattingElements.entries.findIndex((e=>e.type===Bi.Marker||this.openElements.contains(e.element)));for(let r=-1===t?e-1:t-1;r>=0;r--){const e=this.activeFormattingElements.entries[r];this._insertElement(e.token,this.treeAdapter.getNamespaceURI(e.element)),e.element=this.openElements.current}}}_closeTableCell(){this.openElements.generateImpliedEndTags(),this.openElements.popUntilTableCellPopped(),this.activeFormattingElements.clearToLastMarker(),this.insertionMode=Zi.IN_ROW}_closePElement(){this.openElements.generateImpliedEndTagsWithExclusion(si.P),this.openElements.popUntilTagNamePopped(si.P)}_resetInsertionMode(){for(let e=this.openElements.stackTop;e>=0;e--)switch(0===e&&this.fragmentContext?this.fragmentContextID:this.openElements.tagIDs[e]){case si.TR:return void(this.insertionMode=Zi.IN_ROW);case si.TBODY:case si.THEAD:case si.TFOOT:return void(this.insertionMode=Zi.IN_TABLE_BODY);case si.CAPTION:return void(this.insertionMode=Zi.IN_CAPTION);case si.COLGROUP:return void(this.insertionMode=Zi.IN_COLUMN_GROUP);case si.TABLE:return void(this.insertionMode=Zi.IN_TABLE);case si.BODY:return void(this.insertionMode=Zi.IN_BODY);case si.FRAMESET:return void(this.insertionMode=Zi.IN_FRAMESET);case si.SELECT:return void this._resetInsertionModeForSelect(e);case si.TEMPLATE:return void(this.insertionMode=this.tmplInsertionModeStack[0]);case si.HTML:return void(this.insertionMode=this.headElement?Zi.AFTER_HEAD:Zi.BEFORE_HEAD);case si.TD:case si.TH:if(e>0)return void(this.insertionMode=Zi.IN_CELL);break;case si.HEAD:if(e>0)return void(this.insertionMode=Zi.IN_HEAD)}this.insertionMode=Zi.IN_BODY}_resetInsertionModeForSelect(e){if(e>0)for(let t=e-1;t>0;t--){const e=this.openElements.tagIDs[t];if(e===si.TEMPLATE)break;if(e===si.TABLE)return void(this.insertionMode=Zi.IN_SELECT_IN_TABLE)}this.insertionMode=Zi.IN_SELECT}_isElementCausesFosterParenting(e){return ta.has(e)}_shouldFosterParentOnInsertion(){return this.fosterParentingEnabled&&void 0!==this.openElements.currentTagId&&this._isElementCausesFosterParenting(this.openElements.currentTagId)}_findFosterParentingLocation(){for(let e=this.openElements.stackTop;e>=0;e--){const t=this.openElements.items[e];switch(this.openElements.tagIDs[e]){case si.TEMPLATE:if(this.treeAdapter.getNamespaceURI(t)===ei.HTML)return{parent:this.treeAdapter.getTemplateContent(t),beforeElement:null};break;case si.TABLE:{const r=this.treeAdapter.getParentNode(t);return r?{parent:r,beforeElement:t}:{parent:this.openElements.items[e-1],beforeElement:null}}}}return{parent:this.openElements.items[0],beforeElement:null}}_fosterParentElement(e){const t=this._findFosterParentingLocation();t.beforeElement?this.treeAdapter.insertBefore(t.parent,e,t.beforeElement):this.treeAdapter.appendChild(t.parent,e)}_isSpecialElement(e,t){const r=this.treeAdapter.getNamespaceURI(e);return hi[r].has(t)}onCharacter(e){if(this.skipNextNewLine=!1,this.tokenizer.inForeignNode)!function(e,t){e._insertCharacters(t),e.framesetOk=!1}(this,e);else switch(this.insertionMode){case Zi.INITIAL:pa(this,e);break;case Zi.BEFORE_HTML:fa(this,e);break;case Zi.BEFORE_HEAD:Ea(this,e);break;case Zi.IN_HEAD:Aa(this,e);break;case Zi.IN_HEAD_NO_SCRIPT:ga(this,e);break;case Zi.AFTER_HEAD:_a(this,e);break;case Zi.IN_BODY:case Zi.IN_CAPTION:case Zi.IN_CELL:case Zi.IN_TEMPLATE:Na(this,e);break;case Zi.TEXT:case Zi.IN_SELECT:case Zi.IN_SELECT_IN_TABLE:this._insertCharacters(e);break;case Zi.IN_TABLE:case Zi.IN_TABLE_BODY:case Zi.IN_ROW:wa(this,e);break;case Zi.IN_TABLE_TEXT:xa(this,e);break;case Zi.IN_COLUMN_GROUP:Ga(this,e);break;case Zi.AFTER_BODY:$a(this,e);break;case Zi.AFTER_AFTER_BODY:za(this,e)}}onNullCharacter(e){if(this.skipNextNewLine=!1,this.tokenizer.inForeignNode)!function(e,t){t.chars=vs,e._insertCharacters(t)}(this,e);else switch(this.insertionMode){case Zi.INITIAL:pa(this,e);break;case Zi.BEFORE_HTML:fa(this,e);break;case Zi.BEFORE_HEAD:Ea(this,e);break;case Zi.IN_HEAD:Aa(this,e);break;case Zi.IN_HEAD_NO_SCRIPT:ga(this,e);break;case Zi.AFTER_HEAD:_a(this,e);break;case Zi.TEXT:this._insertCharacters(e);break;case Zi.IN_TABLE:case Zi.IN_TABLE_BODY:case Zi.IN_ROW:wa(this,e);break;case Zi.IN_COLUMN_GROUP:Ga(this,e);break;case Zi.AFTER_BODY:$a(this,e);break;case Zi.AFTER_AFTER_BODY:za(this,e)}}onComment(e){if(this.skipNextNewLine=!1,this.currentNotInHTML)ha(this,e);else switch(this.insertionMode){case Zi.INITIAL:case Zi.BEFORE_HTML:case Zi.BEFORE_HEAD:case Zi.IN_HEAD:case Zi.IN_HEAD_NO_SCRIPT:case Zi.AFTER_HEAD:case Zi.IN_BODY:case Zi.IN_TABLE:case Zi.IN_CAPTION:case Zi.IN_COLUMN_GROUP:case Zi.IN_TABLE_BODY:case Zi.IN_ROW:case Zi.IN_CELL:case Zi.IN_SELECT:case Zi.IN_SELECT_IN_TABLE:case Zi.IN_TEMPLATE:case Zi.IN_FRAMESET:case Zi.AFTER_FRAMESET:ha(this,e);break;case Zi.IN_TABLE_TEXT:Ua(this,e);break;case Zi.AFTER_BODY:!function(e,t){e._appendCommentNode(t,e.openElements.items[0])}(this,e);break;case Zi.AFTER_AFTER_BODY:case Zi.AFTER_AFTER_FRAMESET:!function(e,t){e._appendCommentNode(t,e.document)}(this,e)}}onDoctype(e){switch(this.skipNextNewLine=!1,this.insertionMode){case Zi.INITIAL:!function(e,t){e._setDocumentType(t);const r=t.forceQuirks?ri.QUIRKS:function(e){if(e.name!==Fi)return ri.QUIRKS;const{systemId:t}=e;if(t&&"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd"===t.toLowerCase())return ri.QUIRKS;let{publicId:r}=e;if(null!==r){if(r=r.toLowerCase(),qi.has(r))return ri.QUIRKS;let e=null===t?Gi:Hi;if(ji(r,e))return ri.QUIRKS;if(e=null===t?Yi:Vi,ji(r,e))return ri.LIMITED_QUIRKS}return ri.NO_QUIRKS}(t);(function(e){return e.name===Fi&&null===e.publicId&&(null===e.systemId||"about:legacy-compat"===e.systemId)})(t)||e._err(t,Vs.nonConformingDoctype),e.treeAdapter.setDocumentMode(e.document,r),e.insertionMode=Zi.BEFORE_HTML}(this,e);break;case Zi.BEFORE_HEAD:case Zi.IN_HEAD:case Zi.IN_HEAD_NO_SCRIPT:case Zi.AFTER_HEAD:this._err(e,Vs.misplacedDoctype);break;case Zi.IN_TABLE_TEXT:Ua(this,e)}}onStartTag(e){this.skipNextNewLine=!1,this.currentToken=e,this._processStartTag(e),e.selfClosing&&!e.ackSelfClosing&&this._err(e,Vs.nonVoidHtmlElementStartTagWithTrailingSolidus)}_processStartTag(e){this.shouldProcessStartTagTokenInForeignContent(e)?function(e,t){if(function(e){const t=e.tagID;return t===si.FONT&&e.attrs.some((({name:e})=>e===ti.COLOR||e===ti.SIZE||e===ti.FACE))||Xi.has(t)}(t))Ja(e),e._startTagOutsideForeignContent(t);else{const r=e._getAdjustedCurrentElement(),n=e.treeAdapter.getNamespaceURI(r);n===ei.MATHML?$i(t):n===ei.SVG&&(function(e){const t=Ki.get(e.tagName);null!=t&&(e.tagName=t,e.tagID=li(e.tagName))}(t),zi(t)),Ji(t),t.selfClosing?e._appendElement(t,n):e._insertElement(t,n),t.ackSelfClosing=!0}}(this,e):this._startTagOutsideForeignContent(e)}_startTagOutsideForeignContent(e){switch(this.insertionMode){case Zi.INITIAL:pa(this,e);break;case Zi.BEFORE_HTML:!function(e,t){t.tagID===si.HTML?(e._insertElement(t,ei.HTML),e.insertionMode=Zi.BEFORE_HEAD):fa(e,t)}(this,e);break;case Zi.BEFORE_HEAD:!function(e,t){switch(t.tagID){case si.HTML:Oa(e,t);break;case si.HEAD:e._insertElement(t,ei.HTML),e.headElement=e.openElements.current,e.insertionMode=Zi.IN_HEAD;break;default:Ea(e,t)}}(this,e);break;case Zi.IN_HEAD:ma(this,e);break;case Zi.IN_HEAD_NO_SCRIPT:!function(e,t){switch(t.tagID){case si.HTML:Oa(e,t);break;case si.BASEFONT:case si.BGSOUND:case si.HEAD:case si.LINK:case si.META:case si.NOFRAMES:case si.STYLE:ma(e,t);break;case si.NOSCRIPT:e._err(t,Vs.nestedNoscriptInHead);break;default:ga(e,t)}}(this,e);break;case Zi.AFTER_HEAD:!function(e,t){switch(t.tagID){case si.HTML:Oa(e,t);break;case si.BODY:e._insertElement(t,ei.HTML),e.framesetOk=!1,e.insertionMode=Zi.IN_BODY;break;case si.FRAMESET:e._insertElement(t,ei.HTML),e.insertionMode=Zi.IN_FRAMESET;break;case si.BASE:case si.BASEFONT:case si.BGSOUND:case si.LINK:case si.META:case si.NOFRAMES:case si.SCRIPT:case si.STYLE:case si.TEMPLATE:case si.TITLE:e._err(t,Vs.abandonedHeadElementChild),e.openElements.push(e.headElement,si.HEAD),ma(e,t),e.openElements.remove(e.headElement);break;case si.HEAD:e._err(t,Vs.misplacedStartTagForHeadElement);break;default:_a(e,t)}}(this,e);break;case Zi.IN_BODY:Oa(this,e);break;case Zi.IN_TABLE:Pa(this,e);break;case Zi.IN_TABLE_TEXT:Ua(this,e);break;case Zi.IN_CAPTION:!function(e,t){const r=t.tagID;Fa.has(r)?e.openElements.hasInTableScope(si.CAPTION)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(si.CAPTION),e.activeFormattingElements.clearToLastMarker(),e.insertionMode=Zi.IN_TABLE,Pa(e,t)):Oa(e,t)}(this,e);break;case Zi.IN_COLUMN_GROUP:Ha(this,e);break;case Zi.IN_TABLE_BODY:qa(this,e);break;case Zi.IN_ROW:Va(this,e);break;case Zi.IN_CELL:!function(e,t){const r=t.tagID;Fa.has(r)?(e.openElements.hasInTableScope(si.TD)||e.openElements.hasInTableScope(si.TH))&&(e._closeTableCell(),Va(e,t)):Oa(e,t)}(this,e);break;case Zi.IN_SELECT:Wa(this,e);break;case Zi.IN_SELECT_IN_TABLE:!function(e,t){const r=t.tagID;r===si.CAPTION||r===si.TABLE||r===si.TBODY||r===si.TFOOT||r===si.THEAD||r===si.TR||r===si.TD||r===si.TH?(e.openElements.popUntilTagNamePopped(si.SELECT),e._resetInsertionMode(),e._processStartTag(t)):Wa(e,t)}(this,e);break;case Zi.IN_TEMPLATE:!function(e,t){switch(t.tagID){case si.BASE:case si.BASEFONT:case si.BGSOUND:case si.LINK:case si.META:case si.NOFRAMES:case si.SCRIPT:case si.STYLE:case si.TEMPLATE:case si.TITLE:ma(e,t);break;case si.CAPTION:case si.COLGROUP:case si.TBODY:case si.TFOOT:case si.THEAD:e.tmplInsertionModeStack[0]=Zi.IN_TABLE,e.insertionMode=Zi.IN_TABLE,Pa(e,t);break;case si.COL:e.tmplInsertionModeStack[0]=Zi.IN_COLUMN_GROUP,e.insertionMode=Zi.IN_COLUMN_GROUP,Ha(e,t);break;case si.TR:e.tmplInsertionModeStack[0]=Zi.IN_TABLE_BODY,e.insertionMode=Zi.IN_TABLE_BODY,qa(e,t);break;case si.TD:case si.TH:e.tmplInsertionModeStack[0]=Zi.IN_ROW,e.insertionMode=Zi.IN_ROW,Va(e,t);break;default:e.tmplInsertionModeStack[0]=Zi.IN_BODY,e.insertionMode=Zi.IN_BODY,Oa(e,t)}}(this,e);break;case Zi.AFTER_BODY:!function(e,t){t.tagID===si.HTML?Oa(e,t):$a(e,t)}(this,e);break;case Zi.IN_FRAMESET:!function(e,t){switch(t.tagID){case si.HTML:Oa(e,t);break;case si.FRAMESET:e._insertElement(t,ei.HTML);break;case si.FRAME:e._appendElement(t,ei.HTML),t.ackSelfClosing=!0;break;case si.NOFRAMES:ma(e,t)}}(this,e);break;case Zi.AFTER_FRAMESET:!function(e,t){switch(t.tagID){case si.HTML:Oa(e,t);break;case si.NOFRAMES:ma(e,t)}}(this,e);break;case Zi.AFTER_AFTER_BODY:!function(e,t){t.tagID===si.HTML?Oa(e,t):za(e,t)}(this,e);break;case Zi.AFTER_AFTER_FRAMESET:!function(e,t){switch(t.tagID){case si.HTML:Oa(e,t);break;case si.NOFRAMES:ma(e,t)}}(this,e)}}onEndTag(e){this.skipNextNewLine=!1,this.currentToken=e,this.currentNotInHTML?function(e,t){if(t.tagID===si.P||t.tagID===si.BR)return Ja(e),void e._endTagOutsideForeignContent(t);for(let r=e.openElements.stackTop;r>0;r--){const n=e.openElements.items[r];if(e.treeAdapter.getNamespaceURI(n)===ei.HTML){e._endTagOutsideForeignContent(t);break}const s=e.treeAdapter.getTagName(n);if(s.toLowerCase()===t.tagName){t.tagName=s,e.openElements.shortenToLength(r);break}}}(this,e):this._endTagOutsideForeignContent(e)}_endTagOutsideForeignContent(e){switch(this.insertionMode){case Zi.INITIAL:pa(this,e);break;case Zi.BEFORE_HTML:!function(e,t){const r=t.tagID;r!==si.HTML&&r!==si.HEAD&&r!==si.BODY&&r!==si.BR||fa(e,t)}(this,e);break;case Zi.BEFORE_HEAD:!function(e,t){const r=t.tagID;r===si.HEAD||r===si.BODY||r===si.HTML||r===si.BR?Ea(e,t):e._err(t,Vs.endTagWithoutMatchingOpenElement)}(this,e);break;case Zi.IN_HEAD:!function(e,t){switch(t.tagID){case si.HEAD:e.openElements.pop(),e.insertionMode=Zi.AFTER_HEAD;break;case si.BODY:case si.BR:case si.HTML:Aa(e,t);break;case si.TEMPLATE:Ta(e,t);break;default:e._err(t,Vs.endTagWithoutMatchingOpenElement)}}(this,e);break;case Zi.IN_HEAD_NO_SCRIPT:!function(e,t){switch(t.tagID){case si.NOSCRIPT:e.openElements.pop(),e.insertionMode=Zi.IN_HEAD;break;case si.BR:ga(e,t);break;default:e._err(t,Vs.endTagWithoutMatchingOpenElement)}}(this,e);break;case Zi.AFTER_HEAD:!function(e,t){switch(t.tagID){case si.BODY:case si.HTML:case si.BR:_a(e,t);break;case si.TEMPLATE:Ta(e,t);break;default:e._err(t,Vs.endTagWithoutMatchingOpenElement)}}(this,e);break;case Zi.IN_BODY:La(this,e);break;case Zi.TEXT:!function(e,t){var r;t.tagID===si.SCRIPT&&(null===(r=e.scriptHandler)||void 0===r||r.call(e,e.openElements.current)),e.openElements.pop(),e.insertionMode=e.originalInsertionMode}(this,e);break;case Zi.IN_TABLE:Ma(this,e);break;case Zi.IN_TABLE_TEXT:Ua(this,e);break;case Zi.IN_CAPTION:!function(e,t){const r=t.tagID;switch(r){case si.CAPTION:case si.TABLE:e.openElements.hasInTableScope(si.CAPTION)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(si.CAPTION),e.activeFormattingElements.clearToLastMarker(),e.insertionMode=Zi.IN_TABLE,r===si.TABLE&&Ma(e,t));break;case si.BODY:case si.COL:case si.COLGROUP:case si.HTML:case si.TBODY:case si.TD:case si.TFOOT:case si.TH:case si.THEAD:case si.TR:break;default:La(e,t)}}(this,e);break;case Zi.IN_COLUMN_GROUP:!function(e,t){switch(t.tagID){case si.COLGROUP:e.openElements.currentTagId===si.COLGROUP&&(e.openElements.pop(),e.insertionMode=Zi.IN_TABLE);break;case si.TEMPLATE:Ta(e,t);break;case si.COL:break;default:Ga(e,t)}}(this,e);break;case Zi.IN_TABLE_BODY:Ya(this,e);break;case Zi.IN_ROW:ja(this,e);break;case Zi.IN_CELL:!function(e,t){const r=t.tagID;switch(r){case si.TD:case si.TH:e.openElements.hasInTableScope(r)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(r),e.activeFormattingElements.clearToLastMarker(),e.insertionMode=Zi.IN_ROW);break;case si.TABLE:case si.TBODY:case si.TFOOT:case si.THEAD:case si.TR:e.openElements.hasInTableScope(r)&&(e._closeTableCell(),ja(e,t));break;case si.BODY:case si.CAPTION:case si.COL:case si.COLGROUP:case si.HTML:break;default:La(e,t)}}(this,e);break;case Zi.IN_SELECT:Qa(this,e);break;case Zi.IN_SELECT_IN_TABLE:!function(e,t){const r=t.tagID;r===si.CAPTION||r===si.TABLE||r===si.TBODY||r===si.TFOOT||r===si.THEAD||r===si.TR||r===si.TD||r===si.TH?e.openElements.hasInTableScope(r)&&(e.openElements.popUntilTagNamePopped(si.SELECT),e._resetInsertionMode(),e.onEndTag(t)):Qa(e,t)}(this,e);break;case Zi.IN_TEMPLATE:!function(e,t){t.tagID===si.TEMPLATE&&Ta(e,t)}(this,e);break;case Zi.AFTER_BODY:Xa(this,e);break;case Zi.IN_FRAMESET:!function(e,t){t.tagID!==si.FRAMESET||e.openElements.isRootHtmlElementCurrent()||(e.openElements.pop(),e.fragmentContext||e.openElements.currentTagId===si.FRAMESET||(e.insertionMode=Zi.AFTER_FRAMESET))}(this,e);break;case Zi.AFTER_FRAMESET:!function(e,t){t.tagID===si.HTML&&(e.insertionMode=Zi.AFTER_AFTER_FRAMESET)}(this,e);break;case Zi.AFTER_AFTER_BODY:za(this,e)}}onEof(e){switch(this.insertionMode){case Zi.INITIAL:pa(this,e);break;case Zi.BEFORE_HTML:fa(this,e);break;case Zi.BEFORE_HEAD:Ea(this,e);break;case Zi.IN_HEAD:Aa(this,e);break;case Zi.IN_HEAD_NO_SCRIPT:ga(this,e);break;case Zi.AFTER_HEAD:_a(this,e);break;case Zi.IN_BODY:case Zi.IN_TABLE:case Zi.IN_CAPTION:case Zi.IN_COLUMN_GROUP:case Zi.IN_TABLE_BODY:case Zi.IN_ROW:case Zi.IN_CELL:case Zi.IN_SELECT:case Zi.IN_SELECT_IN_TABLE:ka(this,e);break;case Zi.TEXT:!function(e,t){e._err(t,Vs.eofInElementThatCanContainOnlyText),e.openElements.pop(),e.insertionMode=e.originalInsertionMode,e.onEof(t)}(this,e);break;case Zi.IN_TABLE_TEXT:Ua(this,e);break;case Zi.IN_TEMPLATE:Ka(this,e);break;case Zi.AFTER_BODY:case Zi.IN_FRAMESET:case Zi.AFTER_FRAMESET:case Zi.AFTER_AFTER_BODY:case Zi.AFTER_AFTER_FRAMESET:da(this,e)}}onWhitespaceCharacter(e){if(this.skipNextNewLine&&(this.skipNextNewLine=!1,e.chars.charCodeAt(0)===xs.LINE_FEED)){if(1===e.chars.length)return;e.chars=e.chars.substr(1)}if(this.tokenizer.inForeignNode)this._insertCharacters(e);else switch(this.insertionMode){case Zi.IN_HEAD:case Zi.IN_HEAD_NO_SCRIPT:case Zi.AFTER_HEAD:case Zi.TEXT:case Zi.IN_COLUMN_GROUP:case Zi.IN_SELECT:case Zi.IN_SELECT_IN_TABLE:case Zi.IN_FRAMESET:case Zi.AFTER_FRAMESET:this._insertCharacters(e);break;case Zi.IN_BODY:case Zi.IN_CAPTION:case Zi.IN_CELL:case Zi.IN_TEMPLATE:case Zi.AFTER_BODY:case Zi.AFTER_AFTER_BODY:case Zi.AFTER_AFTER_FRAMESET:Sa(this,e);break;case Zi.IN_TABLE:case Zi.IN_TABLE_BODY:case Zi.IN_ROW:wa(this,e);break;case Zi.IN_TABLE_TEXT:va(this,e)}}}function sa(e,t){let r=e.activeFormattingElements.getElementEntryInScopeWithTagName(t.tagName);return r?e.openElements.contains(r.element)?e.openElements.hasInScope(t.tagID)||(r=null):(e.activeFormattingElements.removeEntry(r),r=null):Ra(e,t),r}function ia(e,t){let r=null,n=e.openElements.stackTop;for(;n>=0;n--){const s=e.openElements.items[n];if(s===t.element)break;e._isSpecialElement(s,e.openElements.tagIDs[n])&&(r=s)}return r||(e.openElements.shortenToLength(Math.max(n,0)),e.activeFormattingElements.removeEntry(t)),r}function aa(e,t,r){let n=t,s=e.openElements.getCommonAncestor(t);for(let i=0,a=s;a!==r;i++,a=s){s=e.openElements.getCommonAncestor(a);const r=e.activeFormattingElements.getElementEntry(a),o=r&&i>=3;!r||o?(o&&e.activeFormattingElements.removeEntry(r),e.openElements.remove(a)):(a=oa(e,r),n===t&&(e.activeFormattingElements.bookmark=r),e.treeAdapter.detachNode(n),e.treeAdapter.appendChild(a,n),n=a)}return n}function oa(e,t){const r=e.treeAdapter.getNamespaceURI(t.element),n=e.treeAdapter.createElement(t.token.tagName,r,t.token.attrs);return e.openElements.replace(t.element,n),t.element=n,n}function ca(e,t,r){const n=li(e.treeAdapter.getTagName(t));if(e._isElementCausesFosterParenting(n))e._fosterParentElement(r);else{const s=e.treeAdapter.getNamespaceURI(t);n===si.TEMPLATE&&s===ei.HTML&&(t=e.treeAdapter.getTemplateContent(t)),e.treeAdapter.appendChild(t,r)}}function la(e,t,r){const n=e.treeAdapter.getNamespaceURI(r.element),{token:s}=r,i=e.treeAdapter.createElement(s.tagName,n,s.attrs);e._adoptNodes(t,i),e.treeAdapter.appendChild(t,i),e.activeFormattingElements.insertElementAfterBookmark(i,s),e.activeFormattingElements.removeEntry(r),e.openElements.remove(r.element),e.openElements.insertAfter(t,i,s.tagID)}function ua(e,t){for(let r=0;r<8;r++){const r=sa(e,t);if(!r)break;const n=ia(e,r);if(!n)break;e.activeFormattingElements.bookmark=r;const s=aa(e,n,r.element),i=e.openElements.getCommonAncestor(r.element);e.treeAdapter.detachNode(s),i&&ca(e,i,s),la(e,n,r)}}function ha(e,t){e._appendCommentNode(t,e.openElements.currentTmplContentOrNode)}function da(e,t){if(e.stopped=!0,t.location){const r=e.fragmentContext?0:2;for(let n=e.openElements.stackTop;n>=r;n--)e._setEndLocation(e.openElements.items[n],t);if(!e.fragmentContext&&e.openElements.stackTop>=0){const r=e.openElements.items[0],n=e.treeAdapter.getNodeSourceCodeLocation(r);if(n&&!n.endTag&&(e._setEndLocation(r,t),e.openElements.stackTop>=1)){const r=e.openElements.items[1],n=e.treeAdapter.getNodeSourceCodeLocation(r);n&&!n.endTag&&e._setEndLocation(r,t)}}}}function pa(e,t){e._err(t,Vs.missingDoctype,!0),e.treeAdapter.setDocumentMode(e.document,ri.QUIRKS),e.insertionMode=Zi.BEFORE_HTML,e._processToken(t)}function fa(e,t){e._insertFakeRootElement(),e.insertionMode=Zi.BEFORE_HEAD,e._processToken(t)}function Ea(e,t){e._insertFakeElement(ni.HEAD,si.HEAD),e.headElement=e.openElements.current,e.insertionMode=Zi.IN_HEAD,e._processToken(t)}function ma(e,t){switch(t.tagID){case si.HTML:Oa(e,t);break;case si.BASE:case si.BASEFONT:case si.BGSOUND:case si.LINK:case si.META:e._appendElement(t,ei.HTML),t.ackSelfClosing=!0;break;case si.TITLE:e._switchToTextParsing(t,Ei.RCDATA);break;case si.NOSCRIPT:e.options.scriptingEnabled?e._switchToTextParsing(t,Ei.RAWTEXT):(e._insertElement(t,ei.HTML),e.insertionMode=Zi.IN_HEAD_NO_SCRIPT);break;case si.NOFRAMES:case si.STYLE:e._switchToTextParsing(t,Ei.RAWTEXT);break;case si.SCRIPT:e._switchToTextParsing(t,Ei.SCRIPT_DATA);break;case si.TEMPLATE:e._insertTemplate(t),e.activeFormattingElements.insertMarker(),e.framesetOk=!1,e.insertionMode=Zi.IN_TEMPLATE,e.tmplInsertionModeStack.unshift(Zi.IN_TEMPLATE);break;case si.HEAD:e._err(t,Vs.misplacedStartTagForHeadElement);break;default:Aa(e,t)}}function Ta(e,t){e.openElements.tmplCount>0?(e.openElements.generateImpliedEndTagsThoroughly(),e.openElements.currentTagId!==si.TEMPLATE&&e._err(t,Vs.closingOfElementWithOpenChildElements),e.openElements.popUntilTagNamePopped(si.TEMPLATE),e.activeFormattingElements.clearToLastMarker(),e.tmplInsertionModeStack.shift(),e._resetInsertionMode()):e._err(t,Vs.endTagWithoutMatchingOpenElement)}function Aa(e,t){e.openElements.pop(),e.insertionMode=Zi.AFTER_HEAD,e._processToken(t)}function ga(e,t){const r=t.type===js.EOF?Vs.openElementsLeftAfterEof:Vs.disallowedContentInNoscriptInHead;e._err(t,r),e.openElements.pop(),e.insertionMode=Zi.IN_HEAD,e._processToken(t)}function _a(e,t){e._insertFakeElement(ni.BODY,si.BODY),e.insertionMode=Zi.IN_BODY,ba(e,t)}function ba(e,t){switch(t.type){case js.CHARACTER:Na(e,t);break;case js.WHITESPACE_CHARACTER:Sa(e,t);break;case js.COMMENT:ha(e,t);break;case js.START_TAG:Oa(e,t);break;case js.END_TAG:La(e,t);break;case js.EOF:ka(e,t)}}function Sa(e,t){e._reconstructActiveFormattingElements(),e._insertCharacters(t)}function Na(e,t){e._reconstructActiveFormattingElements(),e._insertCharacters(t),e.framesetOk=!1}function Ia(e,t){e._reconstructActiveFormattingElements(),e._appendElement(t,ei.HTML),e.framesetOk=!1,t.ackSelfClosing=!0}function Ca(e){const t=Qs(e,ti.TYPE);return null!=t&&"hidden"===t.toLowerCase()}function ya(e,t){e._switchToTextParsing(t,Ei.RAWTEXT)}function Da(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,ei.HTML)}function Oa(e,t){switch(t.tagID){case si.I:case si.S:case si.B:case si.U:case si.EM:case si.TT:case si.BIG:case si.CODE:case si.FONT:case si.SMALL:case si.STRIKE:case si.STRONG:!function(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,ei.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t)}(e,t);break;case si.A:!function(e,t){const r=e.activeFormattingElements.getElementEntryInScopeWithTagName(ni.A);r&&(ua(e,t),e.openElements.remove(r.element),e.activeFormattingElements.removeEntry(r)),e._reconstructActiveFormattingElements(),e._insertElement(t,ei.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t)}(e,t);break;case si.H1:case si.H2:case si.H3:case si.H4:case si.H5:case si.H6:!function(e,t){e.openElements.hasInButtonScope(si.P)&&e._closePElement(),void 0!==e.openElements.currentTagId&&di.has(e.openElements.currentTagId)&&e.openElements.pop(),e._insertElement(t,ei.HTML)}(e,t);break;case si.P:case si.DL:case si.OL:case si.UL:case si.DIV:case si.DIR:case si.NAV:case si.MAIN:case si.MENU:case si.ASIDE:case si.CENTER:case si.FIGURE:case si.FOOTER:case si.HEADER:case si.HGROUP:case si.DIALOG:case si.DETAILS:case si.ADDRESS:case si.ARTICLE:case si.SEARCH:case si.SECTION:case si.SUMMARY:case si.FIELDSET:case si.BLOCKQUOTE:case si.FIGCAPTION:!function(e,t){e.openElements.hasInButtonScope(si.P)&&e._closePElement(),e._insertElement(t,ei.HTML)}(e,t);break;case si.LI:case si.DD:case si.DT:!function(e,t){e.framesetOk=!1;const r=t.tagID;for(let t=e.openElements.stackTop;t>=0;t--){const n=e.openElements.tagIDs[t];if(r===si.LI&&n===si.LI||(r===si.DD||r===si.DT)&&(n===si.DD||n===si.DT)){e.openElements.generateImpliedEndTagsWithExclusion(n),e.openElements.popUntilTagNamePopped(n);break}if(n!==si.ADDRESS&&n!==si.DIV&&n!==si.P&&e._isSpecialElement(e.openElements.items[t],n))break}e.openElements.hasInButtonScope(si.P)&&e._closePElement(),e._insertElement(t,ei.HTML)}(e,t);break;case si.BR:case si.IMG:case si.WBR:case si.AREA:case si.EMBED:case si.KEYGEN:Ia(e,t);break;case si.HR:!function(e,t){e.openElements.hasInButtonScope(si.P)&&e._closePElement(),e._appendElement(t,ei.HTML),e.framesetOk=!1,t.ackSelfClosing=!0}(e,t);break;case si.RB:case si.RTC:!function(e,t){e.openElements.hasInScope(si.RUBY)&&e.openElements.generateImpliedEndTags(),e._insertElement(t,ei.HTML)}(e,t);break;case si.RT:case si.RP:!function(e,t){e.openElements.hasInScope(si.RUBY)&&e.openElements.generateImpliedEndTagsWithExclusion(si.RTC),e._insertElement(t,ei.HTML)}(e,t);break;case si.PRE:case si.LISTING:!function(e,t){e.openElements.hasInButtonScope(si.P)&&e._closePElement(),e._insertElement(t,ei.HTML),e.skipNextNewLine=!0,e.framesetOk=!1}(e,t);break;case si.XMP:!function(e,t){e.openElements.hasInButtonScope(si.P)&&e._closePElement(),e._reconstructActiveFormattingElements(),e.framesetOk=!1,e._switchToTextParsing(t,Ei.RAWTEXT)}(e,t);break;case si.SVG:!function(e,t){e._reconstructActiveFormattingElements(),zi(t),Ji(t),t.selfClosing?e._appendElement(t,ei.SVG):e._insertElement(t,ei.SVG),t.ackSelfClosing=!0}(e,t);break;case si.HTML:!function(e,t){0===e.openElements.tmplCount&&e.treeAdapter.adoptAttributes(e.openElements.items[0],t.attrs)}(e,t);break;case si.BASE:case si.LINK:case si.META:case si.STYLE:case si.TITLE:case si.SCRIPT:case si.BGSOUND:case si.BASEFONT:case si.TEMPLATE:ma(e,t);break;case si.BODY:!function(e,t){const r=e.openElements.tryPeekProperlyNestedBodyElement();r&&0===e.openElements.tmplCount&&(e.framesetOk=!1,e.treeAdapter.adoptAttributes(r,t.attrs))}(e,t);break;case si.FORM:!function(e,t){const r=e.openElements.tmplCount>0;e.formElement&&!r||(e.openElements.hasInButtonScope(si.P)&&e._closePElement(),e._insertElement(t,ei.HTML),r||(e.formElement=e.openElements.current))}(e,t);break;case si.NOBR:!function(e,t){e._reconstructActiveFormattingElements(),e.openElements.hasInScope(si.NOBR)&&(ua(e,t),e._reconstructActiveFormattingElements()),e._insertElement(t,ei.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t)}(e,t);break;case si.MATH:!function(e,t){e._reconstructActiveFormattingElements(),$i(t),Ji(t),t.selfClosing?e._appendElement(t,ei.MATHML):e._insertElement(t,ei.MATHML),t.ackSelfClosing=!0}(e,t);break;case si.TABLE:!function(e,t){e.treeAdapter.getDocumentMode(e.document)!==ri.QUIRKS&&e.openElements.hasInButtonScope(si.P)&&e._closePElement(),e._insertElement(t,ei.HTML),e.framesetOk=!1,e.insertionMode=Zi.IN_TABLE}(e,t);break;case si.INPUT:!function(e,t){e._reconstructActiveFormattingElements(),e._appendElement(t,ei.HTML),Ca(t)||(e.framesetOk=!1),t.ackSelfClosing=!0}(e,t);break;case si.PARAM:case si.TRACK:case si.SOURCE:!function(e,t){e._appendElement(t,ei.HTML),t.ackSelfClosing=!0}(e,t);break;case si.IMAGE:!function(e,t){t.tagName=ni.IMG,t.tagID=si.IMG,Ia(e,t)}(e,t);break;case si.BUTTON:!function(e,t){e.openElements.hasInScope(si.BUTTON)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(si.BUTTON)),e._reconstructActiveFormattingElements(),e._insertElement(t,ei.HTML),e.framesetOk=!1}(e,t);break;case si.APPLET:case si.OBJECT:case si.MARQUEE:!function(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,ei.HTML),e.activeFormattingElements.insertMarker(),e.framesetOk=!1}(e,t);break;case si.IFRAME:!function(e,t){e.framesetOk=!1,e._switchToTextParsing(t,Ei.RAWTEXT)}(e,t);break;case si.SELECT:!function(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,ei.HTML),e.framesetOk=!1,e.insertionMode=e.insertionMode===Zi.IN_TABLE||e.insertionMode===Zi.IN_CAPTION||e.insertionMode===Zi.IN_TABLE_BODY||e.insertionMode===Zi.IN_ROW||e.insertionMode===Zi.IN_CELL?Zi.IN_SELECT_IN_TABLE:Zi.IN_SELECT}(e,t);break;case si.OPTION:case si.OPTGROUP:!function(e,t){e.openElements.currentTagId===si.OPTION&&e.openElements.pop(),e._reconstructActiveFormattingElements(),e._insertElement(t,ei.HTML)}(e,t);break;case si.NOEMBED:case si.NOFRAMES:ya(e,t);break;case si.FRAMESET:!function(e,t){const r=e.openElements.tryPeekProperlyNestedBodyElement();e.framesetOk&&r&&(e.treeAdapter.detachNode(r),e.openElements.popAllUpToHtmlElement(),e._insertElement(t,ei.HTML),e.insertionMode=Zi.IN_FRAMESET)}(e,t);break;case si.TEXTAREA:!function(e,t){e._insertElement(t,ei.HTML),e.skipNextNewLine=!0,e.tokenizer.state=Ei.RCDATA,e.originalInsertionMode=e.insertionMode,e.framesetOk=!1,e.insertionMode=Zi.TEXT}(e,t);break;case si.NOSCRIPT:e.options.scriptingEnabled?ya(e,t):Da(e,t);break;case si.PLAINTEXT:!function(e,t){e.openElements.hasInButtonScope(si.P)&&e._closePElement(),e._insertElement(t,ei.HTML),e.tokenizer.state=Ei.PLAINTEXT}(e,t);break;case si.COL:case si.TH:case si.TD:case si.TR:case si.HEAD:case si.FRAME:case si.TBODY:case si.TFOOT:case si.THEAD:case si.CAPTION:case si.COLGROUP:break;default:Da(e,t)}}function Ra(e,t){const r=t.tagName,n=t.tagID;for(let t=e.openElements.stackTop;t>0;t--){const s=e.openElements.items[t],i=e.openElements.tagIDs[t];if(n===i&&(n!==si.UNKNOWN||e.treeAdapter.getTagName(s)===r)){e.openElements.generateImpliedEndTagsWithExclusion(n),e.openElements.stackTop>=t&&e.openElements.shortenToLength(t);break}if(e._isSpecialElement(s,i))break}}function La(e,t){switch(t.tagID){case si.A:case si.B:case si.I:case si.S:case si.U:case si.EM:case si.TT:case si.BIG:case si.CODE:case si.FONT:case si.NOBR:case si.SMALL:case si.STRIKE:case si.STRONG:ua(e,t);break;case si.P:!function(e){e.openElements.hasInButtonScope(si.P)||e._insertFakeElement(ni.P,si.P),e._closePElement()}(e);break;case si.DL:case si.UL:case si.OL:case si.DIR:case si.DIV:case si.NAV:case si.PRE:case si.MAIN:case si.MENU:case si.ASIDE:case si.BUTTON:case si.CENTER:case si.FIGURE:case si.FOOTER:case si.HEADER:case si.HGROUP:case si.DIALOG:case si.ADDRESS:case si.ARTICLE:case si.DETAILS:case si.SEARCH:case si.SECTION:case si.SUMMARY:case si.LISTING:case si.FIELDSET:case si.BLOCKQUOTE:case si.FIGCAPTION:!function(e,t){const r=t.tagID;e.openElements.hasInScope(r)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(r))}(e,t);break;case si.LI:!function(e){e.openElements.hasInListItemScope(si.LI)&&(e.openElements.generateImpliedEndTagsWithExclusion(si.LI),e.openElements.popUntilTagNamePopped(si.LI))}(e);break;case si.DD:case si.DT:!function(e,t){const r=t.tagID;e.openElements.hasInScope(r)&&(e.openElements.generateImpliedEndTagsWithExclusion(r),e.openElements.popUntilTagNamePopped(r))}(e,t);break;case si.H1:case si.H2:case si.H3:case si.H4:case si.H5:case si.H6:!function(e){e.openElements.hasNumberedHeaderInScope()&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilNumberedHeaderPopped())}(e);break;case si.BR:!function(e){e._reconstructActiveFormattingElements(),e._insertFakeElement(ni.BR,si.BR),e.openElements.pop(),e.framesetOk=!1}(e);break;case si.BODY:!function(e,t){if(e.openElements.hasInScope(si.BODY)&&(e.insertionMode=Zi.AFTER_BODY,e.options.sourceCodeLocationInfo)){const r=e.openElements.tryPeekProperlyNestedBodyElement();r&&e._setEndLocation(r,t)}}(e,t);break;case si.HTML:!function(e,t){e.openElements.hasInScope(si.BODY)&&(e.insertionMode=Zi.AFTER_BODY,Xa(e,t))}(e,t);break;case si.FORM:!function(e){const t=e.openElements.tmplCount>0,{formElement:r}=e;t||(e.formElement=null),(r||t)&&e.openElements.hasInScope(si.FORM)&&(e.openElements.generateImpliedEndTags(),t?e.openElements.popUntilTagNamePopped(si.FORM):r&&e.openElements.remove(r))}(e);break;case si.APPLET:case si.OBJECT:case si.MARQUEE:!function(e,t){const r=t.tagID;e.openElements.hasInScope(r)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(r),e.activeFormattingElements.clearToLastMarker())}(e,t);break;case si.TEMPLATE:Ta(e,t);break;default:Ra(e,t)}}function ka(e,t){e.tmplInsertionModeStack.length>0?Ka(e,t):da(e,t)}function wa(e,t){if(void 0!==e.openElements.currentTagId&&ta.has(e.openElements.currentTagId))switch(e.pendingCharacterTokens.length=0,e.hasNonWhitespacePendingCharacterToken=!1,e.originalInsertionMode=e.insertionMode,e.insertionMode=Zi.IN_TABLE_TEXT,t.type){case js.CHARACTER:xa(e,t);break;case js.WHITESPACE_CHARACTER:va(e,t)}else Ba(e,t)}function Pa(e,t){switch(t.tagID){case si.TD:case si.TH:case si.TR:!function(e,t){e.openElements.clearBackToTableContext(),e._insertFakeElement(ni.TBODY,si.TBODY),e.insertionMode=Zi.IN_TABLE_BODY,qa(e,t)}(e,t);break;case si.STYLE:case si.SCRIPT:case si.TEMPLATE:ma(e,t);break;case si.COL:!function(e,t){e.openElements.clearBackToTableContext(),e._insertFakeElement(ni.COLGROUP,si.COLGROUP),e.insertionMode=Zi.IN_COLUMN_GROUP,Ha(e,t)}(e,t);break;case si.FORM:!function(e,t){e.formElement||0!==e.openElements.tmplCount||(e._insertElement(t,ei.HTML),e.formElement=e.openElements.current,e.openElements.pop())}(e,t);break;case si.TABLE:!function(e,t){e.openElements.hasInTableScope(si.TABLE)&&(e.openElements.popUntilTagNamePopped(si.TABLE),e._resetInsertionMode(),e._processStartTag(t))}(e,t);break;case si.TBODY:case si.TFOOT:case si.THEAD:!function(e,t){e.openElements.clearBackToTableContext(),e._insertElement(t,ei.HTML),e.insertionMode=Zi.IN_TABLE_BODY}(e,t);break;case si.INPUT:!function(e,t){Ca(t)?e._appendElement(t,ei.HTML):Ba(e,t),t.ackSelfClosing=!0}(e,t);break;case si.CAPTION:!function(e,t){e.openElements.clearBackToTableContext(),e.activeFormattingElements.insertMarker(),e._insertElement(t,ei.HTML),e.insertionMode=Zi.IN_CAPTION}(e,t);break;case si.COLGROUP:!function(e,t){e.openElements.clearBackToTableContext(),e._insertElement(t,ei.HTML),e.insertionMode=Zi.IN_COLUMN_GROUP}(e,t);break;default:Ba(e,t)}}function Ma(e,t){switch(t.tagID){case si.TABLE:e.openElements.hasInTableScope(si.TABLE)&&(e.openElements.popUntilTagNamePopped(si.TABLE),e._resetInsertionMode());break;case si.TEMPLATE:Ta(e,t);break;case si.BODY:case si.CAPTION:case si.COL:case si.COLGROUP:case si.HTML:case si.TBODY:case si.TD:case si.TFOOT:case si.TH:case si.THEAD:case si.TR:break;default:Ba(e,t)}}function Ba(e,t){const r=e.fosterParentingEnabled;e.fosterParentingEnabled=!0,ba(e,t),e.fosterParentingEnabled=r}function va(e,t){e.pendingCharacterTokens.push(t)}function xa(e,t){e.pendingCharacterTokens.push(t),e.hasNonWhitespacePendingCharacterToken=!0}function Ua(e,t){let r=0;if(e.hasNonWhitespacePendingCharacterToken)for(;r<e.pendingCharacterTokens.length;r++)Ba(e,e.pendingCharacterTokens[r]);else for(;r<e.pendingCharacterTokens.length;r++)e._insertCharacters(e.pendingCharacterTokens[r]);e.insertionMode=e.originalInsertionMode,e._processToken(t)}const Fa=new Set([si.CAPTION,si.COL,si.COLGROUP,si.TBODY,si.TD,si.TFOOT,si.TH,si.THEAD,si.TR]);function Ha(e,t){switch(t.tagID){case si.HTML:Oa(e,t);break;case si.COL:e._appendElement(t,ei.HTML),t.ackSelfClosing=!0;break;case si.TEMPLATE:ma(e,t);break;default:Ga(e,t)}}function Ga(e,t){e.openElements.currentTagId===si.COLGROUP&&(e.openElements.pop(),e.insertionMode=Zi.IN_TABLE,e._processToken(t))}function qa(e,t){switch(t.tagID){case si.TR:e.openElements.clearBackToTableBodyContext(),e._insertElement(t,ei.HTML),e.insertionMode=Zi.IN_ROW;break;case si.TH:case si.TD:e.openElements.clearBackToTableBodyContext(),e._insertFakeElement(ni.TR,si.TR),e.insertionMode=Zi.IN_ROW,Va(e,t);break;case si.CAPTION:case si.COL:case si.COLGROUP:case si.TBODY:case si.TFOOT:case si.THEAD:e.openElements.hasTableBodyContextInTableScope()&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=Zi.IN_TABLE,Pa(e,t));break;default:Pa(e,t)}}function Ya(e,t){const r=t.tagID;switch(t.tagID){case si.TBODY:case si.TFOOT:case si.THEAD:e.openElements.hasInTableScope(r)&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=Zi.IN_TABLE);break;case si.TABLE:e.openElements.hasTableBodyContextInTableScope()&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=Zi.IN_TABLE,Ma(e,t));break;case si.BODY:case si.CAPTION:case si.COL:case si.COLGROUP:case si.HTML:case si.TD:case si.TH:case si.TR:break;default:Ma(e,t)}}function Va(e,t){switch(t.tagID){case si.TH:case si.TD:e.openElements.clearBackToTableRowContext(),e._insertElement(t,ei.HTML),e.insertionMode=Zi.IN_CELL,e.activeFormattingElements.insertMarker();break;case si.CAPTION:case si.COL:case si.COLGROUP:case si.TBODY:case si.TFOOT:case si.THEAD:case si.TR:e.openElements.hasInTableScope(si.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=Zi.IN_TABLE_BODY,qa(e,t));break;default:Pa(e,t)}}function ja(e,t){switch(t.tagID){case si.TR:e.openElements.hasInTableScope(si.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=Zi.IN_TABLE_BODY);break;case si.TABLE:e.openElements.hasInTableScope(si.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=Zi.IN_TABLE_BODY,Ya(e,t));break;case si.TBODY:case si.TFOOT:case si.THEAD:(e.openElements.hasInTableScope(t.tagID)||e.openElements.hasInTableScope(si.TR))&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=Zi.IN_TABLE_BODY,Ya(e,t));break;case si.BODY:case si.CAPTION:case si.COL:case si.COLGROUP:case si.HTML:case si.TD:case si.TH:break;default:Ma(e,t)}}function Wa(e,t){switch(t.tagID){case si.HTML:Oa(e,t);break;case si.OPTION:e.openElements.currentTagId===si.OPTION&&e.openElements.pop(),e._insertElement(t,ei.HTML);break;case si.OPTGROUP:e.openElements.currentTagId===si.OPTION&&e.openElements.pop(),e.openElements.currentTagId===si.OPTGROUP&&e.openElements.pop(),e._insertElement(t,ei.HTML);break;case si.HR:e.openElements.currentTagId===si.OPTION&&e.openElements.pop(),e.openElements.currentTagId===si.OPTGROUP&&e.openElements.pop(),e._appendElement(t,ei.HTML),t.ackSelfClosing=!0;break;case si.INPUT:case si.KEYGEN:case si.TEXTAREA:case si.SELECT:e.openElements.hasInSelectScope(si.SELECT)&&(e.openElements.popUntilTagNamePopped(si.SELECT),e._resetInsertionMode(),t.tagID!==si.SELECT&&e._processStartTag(t));break;case si.SCRIPT:case si.TEMPLATE:ma(e,t)}}function Qa(e,t){switch(t.tagID){case si.OPTGROUP:e.openElements.stackTop>0&&e.openElements.currentTagId===si.OPTION&&e.openElements.tagIDs[e.openElements.stackTop-1]===si.OPTGROUP&&e.openElements.pop(),e.openElements.currentTagId===si.OPTGROUP&&e.openElements.pop();break;case si.OPTION:e.openElements.currentTagId===si.OPTION&&e.openElements.pop();break;case si.SELECT:e.openElements.hasInSelectScope(si.SELECT)&&(e.openElements.popUntilTagNamePopped(si.SELECT),e._resetInsertionMode());break;case si.TEMPLATE:Ta(e,t)}}function Ka(e,t){e.openElements.tmplCount>0?(e.openElements.popUntilTagNamePopped(si.TEMPLATE),e.activeFormattingElements.clearToLastMarker(),e.tmplInsertionModeStack.shift(),e._resetInsertionMode(),e.onEof(t)):da(e,t)}function Xa(e,t){var r;if(t.tagID===si.HTML){if(e.fragmentContext||(e.insertionMode=Zi.AFTER_AFTER_BODY),e.options.sourceCodeLocationInfo&&e.openElements.tagIDs[0]===si.HTML){e._setEndLocation(e.openElements.items[0],t);const n=e.openElements.items[1];n&&!(null===(r=e.treeAdapter.getNodeSourceCodeLocation(n))||void 0===r?void 0:r.endTag)&&e._setEndLocation(n,t)}}else $a(e,t)}function $a(e,t){e.insertionMode=Zi.IN_BODY,ba(e,t)}function za(e,t){e.insertionMode=Zi.IN_BODY,ba(e,t)}function Ja(e){for(;e.treeAdapter.getNamespaceURI(e.openElements.current)!==ei.HTML&&void 0!==e.openElements.currentTagId&&!e._isIntegrationPoint(e.openElements.currentTagId,e.openElements.current);)e.openElements.pop()}function Za(e,t){return function(r){let n,s=0,i="";for(;n=e.exec(r);)s!==n.index&&(i+=r.substring(s,n.index)),i+=t.get(n[0].charCodeAt(0)),s=n.index+1;return i+r.substring(s)}}new Map([[34,"&quot;"],[38,"&amp;"],[39,"&apos;"],[60,"&lt;"],[62,"&gt;"]]),String.prototype.codePointAt;const eo=Za(/["&\u00A0]/g,new Map([[34,"&quot;"],[38,"&amp;"],[160,"&nbsp;"]])),to=Za(/[&<>\u00A0]/g,new Map([[38,"&amp;"],[60,"&lt;"],[62,"&gt;"],[160,"&nbsp;"]])),ro=new Set([ni.AREA,ni.BASE,ni.BASEFONT,ni.BGSOUND,ni.BR,ni.COL,ni.EMBED,ni.FRAME,ni.HR,ni.IMG,ni.INPUT,ni.KEYGEN,ni.LINK,ni.META,ni.PARAM,ni.SOURCE,ni.TRACK,ni.WBR]);const no={treeAdapter:Ui,scriptingEnabled:!0};function so(e,t){return io(e,{...no,...t})}function io(e,t){return t.treeAdapter.isElementNode(e)?function(e,t){const r=t.treeAdapter.getTagName(e);return`<${r}${function(e,{treeAdapter:t}){let r="";for(const n of t.getAttrList(e)){if(r+=" ",n.namespace)switch(n.namespace){case ei.XML:r+=`xml:${n.name}`;break;case ei.XMLNS:"xmlns"!==n.name&&(r+="xmlns:"),r+=n.name;break;case ei.XLINK:r+=`xlink:${n.name}`;break;default:r+=`${n.prefix}:${n.name}`}else r+=n.name;r+=`="${eo(n.value)}"`}return r}(e,t)}>${function(e,t){return t.treeAdapter.isElementNode(e)&&t.treeAdapter.getNamespaceURI(e)===ei.HTML&&ro.has(t.treeAdapter.getTagName(e))}(e,t)?"":`${function(e,t){let r="";const n=t.treeAdapter.isElementNode(e)&&t.treeAdapter.getTagName(e)===ni.TEMPLATE&&t.treeAdapter.getNamespaceURI(e)===ei.HTML?t.treeAdapter.getTemplateContent(e):e,s=t.treeAdapter.getChildNodes(n);if(s)for(const e of s)r+=io(e,t);return r}(e,t)}</${r}>`}`}(e,t):t.treeAdapter.isTextNode(e)?function(e,t){const{treeAdapter:r}=t,n=r.getTextNodeContent(e),s=r.getParentNode(e),i=s&&r.isElementNode(s)&&r.getTagName(s);return i&&r.getNamespaceURI(s)===ei.HTML&&(a=i,o=t.scriptingEnabled,pi.has(a)||o&&a===ni.NOSCRIPT)?n:to(n);var a,o}(e,t):t.treeAdapter.isCommentNode(e)?function(e,{treeAdapter:t}){return`\x3c!--${t.getCommentNodeContent(e)}--\x3e`}(e,t):t.treeAdapter.isDocumentTypeNode(e)?function(e,{treeAdapter:t}){return`<!DOCTYPE ${t.getDocumentTypeNodeName(e)}>`}(e,t):""}function ao(e){const t=e.includes('"')?"'":'"';return t+e+t}const oo={isCommentNode:P,isElementNode:L,isTextNode:w,createDocument(){const e=new O([]);return e["x-mode"]=ri.NO_QUIRKS,e},createDocumentFragment:()=>new O([]),createElement(e,t,r){const n=Object.create(null),s=Object.create(null),i=Object.create(null);for(let e=0;e<r.length;e++){const t=r[e].name;n[t]=r[e].value,s[t]=r[e].namespace,i[t]=r[e].prefix}const a=new R(e,n,[]);return a.namespace=t,a["x-attribsNamespace"]=s,a["x-attribsPrefix"]=i,a},createCommentNode:e=>new I(e),createTextNode:e=>new N(e),appendChild(e,t){const r=e.children[e.children.length-1];r&&(r.next=t,t.prev=r),e.children.push(t),t.parent=e},insertBefore(e,t,r){const n=e.children.indexOf(r),{prev:s}=r;s&&(s.next=t,t.prev=s),r.prev=t,t.next=r,e.children.splice(n,0,t),t.parent=e},setTemplateContent(e,t){oo.appendChild(e,t)},getTemplateContent:e=>e.children[0],setDocumentType(e,t,r,n){const s=function(e,t,r){let n="!DOCTYPE ";return e&&(n+=e),t?n+=` PUBLIC ${ao(t)}`:r&&(n+=" SYSTEM"),r&&(n+=` ${ao(r)}`),n}(t,r,n);let i=e.children.find((e=>M(e)&&"!doctype"===e.name));i?i.data=null!=s?s:null:(i=new C("!doctype",s),oo.appendChild(e,i)),i["x-name"]=t,i["x-publicId"]=r,i["x-systemId"]=n},setDocumentMode(e,t){e["x-mode"]=t},getDocumentMode:e=>e["x-mode"],detachNode(e){if(e.parent){const t=e.parent.children.indexOf(e),{prev:r,next:n}=e;e.prev=null,e.next=null,r&&(r.next=n),n&&(n.prev=r),e.parent.children.splice(t,1),e.parent=null}},insertText(e,t){const r=e.children[e.children.length-1];r&&w(r)?r.data+=t:oo.appendChild(e,oo.createTextNode(t))},insertTextBefore(e,t,r){const n=e.children[e.children.indexOf(r)-1];n&&w(n)?n.data+=t:oo.insertBefore(e,oo.createTextNode(t),r)},adoptAttributes(e,t){for(let r=0;r<t.length;r++){const n=t[r].name;void 0===e.attribs[n]&&(e.attribs[n]=t[r].value,e["x-attribsNamespace"][n]=t[r].namespace,e["x-attribsPrefix"][n]=t[r].prefix)}},getFirstChild:e=>e.children[0],getChildNodes:e=>e.children,getParentNode:e=>e.parent,getAttrList:e=>e.attributes,getTagName:e=>e.name,getNamespaceURI:e=>e.namespace,getTextNodeContent:e=>e.data,getCommentNodeContent:e=>e.data,getDocumentTypeNodeName(e){var t;return null!==(t=e["x-name"])&&void 0!==t?t:""},getDocumentTypeNodePublicId(e){var t;return null!==(t=e["x-publicId"])&&void 0!==t?t:""},getDocumentTypeNodeSystemId(e){var t;return null!==(t=e["x-systemId"])&&void 0!==t?t:""},isDocumentTypeNode:e=>M(e)&&"!doctype"===e.name,setNodeSourceCodeLocation(e,t){t&&(e.startIndex=t.startOffset,e.endIndex=t.endOffset),e.sourceCodeLocation=t},getNodeSourceCodeLocation:e=>e.sourceCodeLocation,updateNodeSourceCodeLocation(e,t){null!=t.endOffset&&(e.endIndex=t.endOffset),e.sourceCodeLocation={...e.sourceCodeLocation,...t}}};const co={treeAdapter:oo};var lo,uo,ho;function po(e){return e===lo.Space||e===lo.NewLine||e===lo.Tab||e===lo.FormFeed||e===lo.CarriageReturn}function fo(e){return e===lo.Slash||e===lo.Gt||po(e)}!function(e){e[e.Tab=9]="Tab",e[e.NewLine=10]="NewLine",e[e.FormFeed=12]="FormFeed",e[e.CarriageReturn=13]="CarriageReturn",e[e.Space=32]="Space",e[e.ExclamationMark=33]="ExclamationMark",e[e.Number=35]="Number",e[e.Amp=38]="Amp",e[e.SingleQuote=39]="SingleQuote",e[e.DoubleQuote=34]="DoubleQuote",e[e.Dash=45]="Dash",e[e.Slash=47]="Slash",e[e.Zero=48]="Zero",e[e.Nine=57]="Nine",e[e.Semi=59]="Semi",e[e.Lt=60]="Lt",e[e.Eq=61]="Eq",e[e.Gt=62]="Gt",e[e.Questionmark=63]="Questionmark",e[e.UpperA=65]="UpperA",e[e.LowerA=97]="LowerA",e[e.UpperF=70]="UpperF",e[e.LowerF=102]="LowerF",e[e.UpperZ=90]="UpperZ",e[e.LowerZ=122]="LowerZ",e[e.LowerX=120]="LowerX",e[e.OpeningSquareBracket=91]="OpeningSquareBracket"}(lo||(lo={})),function(e){e[e.Text=1]="Text",e[e.BeforeTagName=2]="BeforeTagName",e[e.InTagName=3]="InTagName",e[e.InSelfClosingTag=4]="InSelfClosingTag",e[e.BeforeClosingTagName=5]="BeforeClosingTagName",e[e.InClosingTagName=6]="InClosingTagName",e[e.AfterClosingTagName=7]="AfterClosingTagName",e[e.BeforeAttributeName=8]="BeforeAttributeName",e[e.InAttributeName=9]="InAttributeName",e[e.AfterAttributeName=10]="AfterAttributeName",e[e.BeforeAttributeValue=11]="BeforeAttributeValue",e[e.InAttributeValueDq=12]="InAttributeValueDq",e[e.InAttributeValueSq=13]="InAttributeValueSq",e[e.InAttributeValueNq=14]="InAttributeValueNq",e[e.BeforeDeclaration=15]="BeforeDeclaration",e[e.InDeclaration=16]="InDeclaration",e[e.InProcessingInstruction=17]="InProcessingInstruction",e[e.BeforeComment=18]="BeforeComment",e[e.CDATASequence=19]="CDATASequence",e[e.InSpecialComment=20]="InSpecialComment",e[e.InCommentLike=21]="InCommentLike",e[e.BeforeSpecialS=22]="BeforeSpecialS",e[e.BeforeSpecialT=23]="BeforeSpecialT",e[e.SpecialStartSequence=24]="SpecialStartSequence",e[e.InSpecialTag=25]="InSpecialTag",e[e.InEntity=26]="InEntity"}(uo||(uo={})),function(e){e[e.NoValue=0]="NoValue",e[e.Unquoted=1]="Unquoted",e[e.Single=2]="Single",e[e.Double=3]="Double"}(ho||(ho={}));const Eo={Cdata:new Uint8Array([67,68,65,84,65,91]),CdataEnd:new Uint8Array([93,93,62]),CommentEnd:new Uint8Array([45,45,62]),ScriptEnd:new Uint8Array([60,47,115,99,114,105,112,116]),StyleEnd:new Uint8Array([60,47,115,116,121,108,101]),TitleEnd:new Uint8Array([60,47,116,105,116,108,101]),TextareaEnd:new Uint8Array([60,47,116,101,120,116,97,114,101,97])};class mo{constructor({xmlMode:e=!1,decodeEntities:t=!0},r){this.cbs=r,this.state=uo.Text,this.buffer="",this.sectionStart=0,this.index=0,this.entityStart=0,this.baseState=uo.Text,this.isSpecial=!1,this.running=!0,this.offset=0,this.currentSequence=void 0,this.sequenceIndex=0,this.xmlMode=e,this.decodeEntities=t,this.entityDecoder=new J(e?q:G,((e,t)=>this.emitCodePoint(e,t)))}reset(){this.state=uo.Text,this.buffer="",this.sectionStart=0,this.index=0,this.baseState=uo.Text,this.currentSequence=void 0,this.running=!0,this.offset=0}write(e){this.offset+=this.buffer.length,this.buffer=e,this.parse()}end(){this.running&&this.finish()}pause(){this.running=!1}resume(){this.running=!0,this.index<this.buffer.length+this.offset&&this.parse()}stateText(e){e===lo.Lt||!this.decodeEntities&&this.fastForwardTo(lo.Lt)?(this.index>this.sectionStart&&this.cbs.ontext(this.sectionStart,this.index),this.state=uo.BeforeTagName,this.sectionStart=this.index):this.decodeEntities&&e===lo.Amp&&this.startEntity()}stateSpecialStartSequence(e){const t=this.sequenceIndex===this.currentSequence.length;if(t?fo(e):(32|e)===this.currentSequence[this.sequenceIndex]){if(!t)return void this.sequenceIndex++}else this.isSpecial=!1;this.sequenceIndex=0,this.state=uo.InTagName,this.stateInTagName(e)}stateInSpecialTag(e){if(this.sequenceIndex===this.currentSequence.length){if(e===lo.Gt||po(e)){const t=this.index-this.currentSequence.length;if(this.sectionStart<t){const e=this.index;this.index=t,this.cbs.ontext(this.sectionStart,t),this.index=e}return this.isSpecial=!1,this.sectionStart=t+2,void this.stateInClosingTagName(e)}this.sequenceIndex=0}(32|e)===this.currentSequence[this.sequenceIndex]?this.sequenceIndex+=1:0===this.sequenceIndex?this.currentSequence===Eo.TitleEnd?this.decodeEntities&&e===lo.Amp&&this.startEntity():this.fastForwardTo(lo.Lt)&&(this.sequenceIndex=1):this.sequenceIndex=Number(e===lo.Lt)}stateCDATASequence(e){e===Eo.Cdata[this.sequenceIndex]?++this.sequenceIndex===Eo.Cdata.length&&(this.state=uo.InCommentLike,this.currentSequence=Eo.CdataEnd,this.sequenceIndex=0,this.sectionStart=this.index+1):(this.sequenceIndex=0,this.state=uo.InDeclaration,this.stateInDeclaration(e))}fastForwardTo(e){for(;++this.index<this.buffer.length+this.offset;)if(this.buffer.charCodeAt(this.index-this.offset)===e)return!0;return this.index=this.buffer.length+this.offset-1,!1}stateInCommentLike(e){e===this.currentSequence[this.sequenceIndex]?++this.sequenceIndex===this.currentSequence.length&&(this.currentSequence===Eo.CdataEnd?this.cbs.oncdata(this.sectionStart,this.index,2):this.cbs.oncomment(this.sectionStart,this.index,2),this.sequenceIndex=0,this.sectionStart=this.index+1,this.state=uo.Text):0===this.sequenceIndex?this.fastForwardTo(this.currentSequence[0])&&(this.sequenceIndex=1):e!==this.currentSequence[this.sequenceIndex-1]&&(this.sequenceIndex=0)}isTagStartChar(e){return this.xmlMode?!fo(e):function(e){return e>=lo.LowerA&&e<=lo.LowerZ||e>=lo.UpperA&&e<=lo.UpperZ}(e)}startSpecial(e,t){this.isSpecial=!0,this.currentSequence=e,this.sequenceIndex=t,this.state=uo.SpecialStartSequence}stateBeforeTagName(e){if(e===lo.ExclamationMark)this.state=uo.BeforeDeclaration,this.sectionStart=this.index+1;else if(e===lo.Questionmark)this.state=uo.InProcessingInstruction,this.sectionStart=this.index+1;else if(this.isTagStartChar(e)){const t=32|e;this.sectionStart=this.index,this.xmlMode?this.state=uo.InTagName:t===Eo.ScriptEnd[2]?this.state=uo.BeforeSpecialS:t===Eo.TitleEnd[2]?this.state=uo.BeforeSpecialT:this.state=uo.InTagName}else e===lo.Slash?this.state=uo.BeforeClosingTagName:(this.state=uo.Text,this.stateText(e))}stateInTagName(e){fo(e)&&(this.cbs.onopentagname(this.sectionStart,this.index),this.sectionStart=-1,this.state=uo.BeforeAttributeName,this.stateBeforeAttributeName(e))}stateBeforeClosingTagName(e){po(e)||(e===lo.Gt?this.state=uo.Text:(this.state=this.isTagStartChar(e)?uo.InClosingTagName:uo.InSpecialComment,this.sectionStart=this.index))}stateInClosingTagName(e){(e===lo.Gt||po(e))&&(this.cbs.onclosetag(this.sectionStart,this.index),this.sectionStart=-1,this.state=uo.AfterClosingTagName,this.stateAfterClosingTagName(e))}stateAfterClosingTagName(e){(e===lo.Gt||this.fastForwardTo(lo.Gt))&&(this.state=uo.Text,this.sectionStart=this.index+1)}stateBeforeAttributeName(e){e===lo.Gt?(this.cbs.onopentagend(this.index),this.isSpecial?(this.state=uo.InSpecialTag,this.sequenceIndex=0):this.state=uo.Text,this.sectionStart=this.index+1):e===lo.Slash?this.state=uo.InSelfClosingTag:po(e)||(this.state=uo.InAttributeName,this.sectionStart=this.index)}stateInSelfClosingTag(e){e===lo.Gt?(this.cbs.onselfclosingtag(this.index),this.state=uo.Text,this.sectionStart=this.index+1,this.isSpecial=!1):po(e)||(this.state=uo.BeforeAttributeName,this.stateBeforeAttributeName(e))}stateInAttributeName(e){(e===lo.Eq||fo(e))&&(this.cbs.onattribname(this.sectionStart,this.index),this.sectionStart=this.index,this.state=uo.AfterAttributeName,this.stateAfterAttributeName(e))}stateAfterAttributeName(e){e===lo.Eq?this.state=uo.BeforeAttributeValue:e===lo.Slash||e===lo.Gt?(this.cbs.onattribend(ho.NoValue,this.sectionStart),this.sectionStart=-1,this.state=uo.BeforeAttributeName,this.stateBeforeAttributeName(e)):po(e)||(this.cbs.onattribend(ho.NoValue,this.sectionStart),this.state=uo.InAttributeName,this.sectionStart=this.index)}stateBeforeAttributeValue(e){e===lo.DoubleQuote?(this.state=uo.InAttributeValueDq,this.sectionStart=this.index+1):e===lo.SingleQuote?(this.state=uo.InAttributeValueSq,this.sectionStart=this.index+1):po(e)||(this.sectionStart=this.index,this.state=uo.InAttributeValueNq,this.stateInAttributeValueNoQuotes(e))}handleInAttributeValue(e,t){e===t||!this.decodeEntities&&this.fastForwardTo(t)?(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=-1,this.cbs.onattribend(t===lo.DoubleQuote?ho.Double:ho.Single,this.index+1),this.state=uo.BeforeAttributeName):this.decodeEntities&&e===lo.Amp&&this.startEntity()}stateInAttributeValueDoubleQuotes(e){this.handleInAttributeValue(e,lo.DoubleQuote)}stateInAttributeValueSingleQuotes(e){this.handleInAttributeValue(e,lo.SingleQuote)}stateInAttributeValueNoQuotes(e){po(e)||e===lo.Gt?(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=-1,this.cbs.onattribend(ho.Unquoted,this.index),this.state=uo.BeforeAttributeName,this.stateBeforeAttributeName(e)):this.decodeEntities&&e===lo.Amp&&this.startEntity()}stateBeforeDeclaration(e){e===lo.OpeningSquareBracket?(this.state=uo.CDATASequence,this.sequenceIndex=0):this.state=e===lo.Dash?uo.BeforeComment:uo.InDeclaration}stateInDeclaration(e){(e===lo.Gt||this.fastForwardTo(lo.Gt))&&(this.cbs.ondeclaration(this.sectionStart,this.index),this.state=uo.Text,this.sectionStart=this.index+1)}stateInProcessingInstruction(e){(e===lo.Gt||this.fastForwardTo(lo.Gt))&&(this.cbs.onprocessinginstruction(this.sectionStart,this.index),this.state=uo.Text,this.sectionStart=this.index+1)}stateBeforeComment(e){e===lo.Dash?(this.state=uo.InCommentLike,this.currentSequence=Eo.CommentEnd,this.sequenceIndex=2,this.sectionStart=this.index+1):this.state=uo.InDeclaration}stateInSpecialComment(e){(e===lo.Gt||this.fastForwardTo(lo.Gt))&&(this.cbs.oncomment(this.sectionStart,this.index,0),this.state=uo.Text,this.sectionStart=this.index+1)}stateBeforeSpecialS(e){const t=32|e;t===Eo.ScriptEnd[3]?this.startSpecial(Eo.ScriptEnd,4):t===Eo.StyleEnd[3]?this.startSpecial(Eo.StyleEnd,4):(this.state=uo.InTagName,this.stateInTagName(e))}stateBeforeSpecialT(e){const t=32|e;t===Eo.TitleEnd[3]?this.startSpecial(Eo.TitleEnd,4):t===Eo.TextareaEnd[3]?this.startSpecial(Eo.TextareaEnd,4):(this.state=uo.InTagName,this.stateInTagName(e))}startEntity(){this.baseState=this.state,this.state=uo.InEntity,this.entityStart=this.index,this.entityDecoder.startEntity(this.xmlMode?X.Strict:this.baseState===uo.Text||this.baseState===uo.InSpecialTag?X.Legacy:X.Attribute)}stateInEntity(){const e=this.entityDecoder.write(this.buffer,this.index-this.offset);e>=0?(this.state=this.baseState,0===e&&(this.index=this.entityStart)):this.index=this.offset+this.buffer.length-1}cleanup(){this.running&&this.sectionStart!==this.index&&(this.state===uo.Text||this.state===uo.InSpecialTag&&0===this.sequenceIndex?(this.cbs.ontext(this.sectionStart,this.index),this.sectionStart=this.index):this.state!==uo.InAttributeValueDq&&this.state!==uo.InAttributeValueSq&&this.state!==uo.InAttributeValueNq||(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=this.index))}shouldContinue(){return this.index<this.buffer.length+this.offset&&this.running}parse(){for(;this.shouldContinue();){const e=this.buffer.charCodeAt(this.index-this.offset);switch(this.state){case uo.Text:this.stateText(e);break;case uo.SpecialStartSequence:this.stateSpecialStartSequence(e);break;case uo.InSpecialTag:this.stateInSpecialTag(e);break;case uo.CDATASequence:this.stateCDATASequence(e);break;case uo.InAttributeValueDq:this.stateInAttributeValueDoubleQuotes(e);break;case uo.InAttributeName:this.stateInAttributeName(e);break;case uo.InCommentLike:this.stateInCommentLike(e);break;case uo.InSpecialComment:this.stateInSpecialComment(e);break;case uo.BeforeAttributeName:this.stateBeforeAttributeName(e);break;case uo.InTagName:this.stateInTagName(e);break;case uo.InClosingTagName:this.stateInClosingTagName(e);break;case uo.BeforeTagName:this.stateBeforeTagName(e);break;case uo.AfterAttributeName:this.stateAfterAttributeName(e);break;case uo.InAttributeValueSq:this.stateInAttributeValueSingleQuotes(e);break;case uo.BeforeAttributeValue:this.stateBeforeAttributeValue(e);break;case uo.BeforeClosingTagName:this.stateBeforeClosingTagName(e);break;case uo.AfterClosingTagName:this.stateAfterClosingTagName(e);break;case uo.BeforeSpecialS:this.stateBeforeSpecialS(e);break;case uo.BeforeSpecialT:this.stateBeforeSpecialT(e);break;case uo.InAttributeValueNq:this.stateInAttributeValueNoQuotes(e);break;case uo.InSelfClosingTag:this.stateInSelfClosingTag(e);break;case uo.InDeclaration:this.stateInDeclaration(e);break;case uo.BeforeDeclaration:this.stateBeforeDeclaration(e);break;case uo.BeforeComment:this.stateBeforeComment(e);break;case uo.InProcessingInstruction:this.stateInProcessingInstruction(e);break;case uo.InEntity:this.stateInEntity()}this.index++}this.cleanup()}finish(){this.state===uo.InEntity&&(this.entityDecoder.end(),this.state=this.baseState),this.handleTrailingData(),this.cbs.onend()}handleTrailingData(){const e=this.buffer.length+this.offset;this.sectionStart>=e||(this.state===uo.InCommentLike?this.currentSequence===Eo.CdataEnd?this.cbs.oncdata(this.sectionStart,e,0):this.cbs.oncomment(this.sectionStart,e,0):this.state===uo.InTagName||this.state===uo.BeforeAttributeName||this.state===uo.BeforeAttributeValue||this.state===uo.AfterAttributeName||this.state===uo.InAttributeName||this.state===uo.InAttributeValueSq||this.state===uo.InAttributeValueDq||this.state===uo.InAttributeValueNq||this.state===uo.InClosingTagName||this.cbs.ontext(this.sectionStart,e))}emitCodePoint(e,t){this.baseState!==uo.Text&&this.baseState!==uo.InSpecialTag?(this.sectionStart<this.entityStart&&this.cbs.onattribdata(this.sectionStart,this.entityStart),this.sectionStart=this.entityStart+t,this.index=this.sectionStart-1,this.cbs.onattribentity(e)):(this.sectionStart<this.entityStart&&this.cbs.ontext(this.sectionStart,this.entityStart),this.sectionStart=this.entityStart+t,this.index=this.sectionStart-1,this.cbs.ontextentity(e,this.sectionStart))}}const To=new Set(["input","option","optgroup","select","button","datalist","textarea"]),Ao=new Set(["p"]),go=new Set(["thead","tbody"]),_o=new Set(["dd","dt"]),bo=new Set(["rt","rp"]),So=new Map([["tr",new Set(["tr","th","td"])],["th",new Set(["th"])],["td",new Set(["thead","th","td"])],["body",new Set(["head","link","script"])],["li",new Set(["li"])],["p",Ao],["h1",Ao],["h2",Ao],["h3",Ao],["h4",Ao],["h5",Ao],["h6",Ao],["select",To],["input",To],["output",To],["button",To],["datalist",To],["textarea",To],["option",new Set(["option"])],["optgroup",new Set(["optgroup","option"])],["dd",_o],["dt",_o],["address",Ao],["article",Ao],["aside",Ao],["blockquote",Ao],["details",Ao],["div",Ao],["dl",Ao],["fieldset",Ao],["figcaption",Ao],["figure",Ao],["footer",Ao],["form",Ao],["header",Ao],["hr",Ao],["main",Ao],["nav",Ao],["ol",Ao],["pre",Ao],["section",Ao],["table",Ao],["ul",Ao],["rt",bo],["rp",bo],["tbody",go],["tfoot",go]]),No=new Set(["area","base","basefont","br","col","command","embed","frame","hr","img","input","isindex","keygen","link","meta","param","source","track","wbr"]),Io=new Set(["math","svg"]),Co=new Set(["mi","mo","mn","ms","mtext","annotation-xml","foreignobject","desc","title"]),yo=/\s|\//;class Do{constructor(e,t={}){var r,n,s,i,a,o;this.options=t,this.startIndex=0,this.endIndex=0,this.openTagStart=0,this.tagname="",this.attribname="",this.attribvalue="",this.attribs=null,this.stack=[],this.buffers=[],this.bufferOffset=0,this.writeIndex=0,this.ended=!1,this.cbs=null!=e?e:{},this.htmlMode=!this.options.xmlMode,this.lowerCaseTagNames=null!==(r=t.lowerCaseTags)&&void 0!==r?r:this.htmlMode,this.lowerCaseAttributeNames=null!==(n=t.lowerCaseAttributeNames)&&void 0!==n?n:this.htmlMode,this.recognizeSelfClosing=null!==(s=t.recognizeSelfClosing)&&void 0!==s?s:!this.htmlMode,this.tokenizer=new(null!==(i=t.Tokenizer)&&void 0!==i?i:mo)(this.options,this),this.foreignContext=[!this.htmlMode],null===(o=(a=this.cbs).onparserinit)||void 0===o||o.call(a,this)}ontext(e,t){var r,n;const s=this.getSlice(e,t);this.endIndex=t-1,null===(n=(r=this.cbs).ontext)||void 0===n||n.call(r,s),this.startIndex=t}ontextentity(e,t){var r,n;this.endIndex=t-1,null===(n=(r=this.cbs).ontext)||void 0===n||n.call(r,j(e)),this.startIndex=t}isVoidElement(e){return this.htmlMode&&No.has(e)}onopentagname(e,t){this.endIndex=t;let r=this.getSlice(e,t);this.lowerCaseTagNames&&(r=r.toLowerCase()),this.emitOpenTag(r)}emitOpenTag(e){var t,r,n,s;this.openTagStart=this.startIndex,this.tagname=e;const i=this.htmlMode&&So.get(e);if(i)for(;this.stack.length>0&&i.has(this.stack[0]);){const e=this.stack.shift();null===(r=(t=this.cbs).onclosetag)||void 0===r||r.call(t,e,!0)}this.isVoidElement(e)||(this.stack.unshift(e),this.htmlMode&&(Io.has(e)?this.foreignContext.unshift(!0):Co.has(e)&&this.foreignContext.unshift(!1))),null===(s=(n=this.cbs).onopentagname)||void 0===s||s.call(n,e),this.cbs.onopentag&&(this.attribs={})}endOpenTag(e){var t,r;this.startIndex=this.openTagStart,this.attribs&&(null===(r=(t=this.cbs).onopentag)||void 0===r||r.call(t,this.tagname,this.attribs,e),this.attribs=null),this.cbs.onclosetag&&this.isVoidElement(this.tagname)&&this.cbs.onclosetag(this.tagname,!0),this.tagname=""}onopentagend(e){this.endIndex=e,this.endOpenTag(!1),this.startIndex=e+1}onclosetag(e,t){var r,n,s,i,a,o,c,l;this.endIndex=t;let u=this.getSlice(e,t);if(this.lowerCaseTagNames&&(u=u.toLowerCase()),this.htmlMode&&(Io.has(u)||Co.has(u))&&this.foreignContext.shift(),this.isVoidElement(u))this.htmlMode&&"br"===u&&(null===(i=(s=this.cbs).onopentagname)||void 0===i||i.call(s,"br"),null===(o=(a=this.cbs).onopentag)||void 0===o||o.call(a,"br",{},!0),null===(l=(c=this.cbs).onclosetag)||void 0===l||l.call(c,"br",!1));else{const e=this.stack.indexOf(u);if(-1!==e)for(let t=0;t<=e;t++){const s=this.stack.shift();null===(n=(r=this.cbs).onclosetag)||void 0===n||n.call(r,s,t!==e)}else this.htmlMode&&"p"===u&&(this.emitOpenTag("p"),this.closeCurrentTag(!0))}this.startIndex=t+1}onselfclosingtag(e){this.endIndex=e,this.recognizeSelfClosing||this.foreignContext[0]?(this.closeCurrentTag(!1),this.startIndex=e+1):this.onopentagend(e)}closeCurrentTag(e){var t,r;const n=this.tagname;this.endOpenTag(e),this.stack[0]===n&&(null===(r=(t=this.cbs).onclosetag)||void 0===r||r.call(t,n,!e),this.stack.shift())}onattribname(e,t){this.startIndex=e;const r=this.getSlice(e,t);this.attribname=this.lowerCaseAttributeNames?r.toLowerCase():r}onattribdata(e,t){this.attribvalue+=this.getSlice(e,t)}onattribentity(e){this.attribvalue+=j(e)}onattribend(e,t){var r,n;this.endIndex=t,null===(n=(r=this.cbs).onattribute)||void 0===n||n.call(r,this.attribname,this.attribvalue,e===ho.Double?'"':e===ho.Single?"'":e===ho.NoValue?void 0:null),this.attribs&&!Object.prototype.hasOwnProperty.call(this.attribs,this.attribname)&&(this.attribs[this.attribname]=this.attribvalue),this.attribvalue=""}getInstructionName(e){const t=e.search(yo);let r=t<0?e:e.substr(0,t);return this.lowerCaseTagNames&&(r=r.toLowerCase()),r}ondeclaration(e,t){this.endIndex=t;const r=this.getSlice(e,t);if(this.cbs.onprocessinginstruction){const e=this.getInstructionName(r);this.cbs.onprocessinginstruction(`!${e}`,`!${r}`)}this.startIndex=t+1}onprocessinginstruction(e,t){this.endIndex=t;const r=this.getSlice(e,t);if(this.cbs.onprocessinginstruction){const e=this.getInstructionName(r);this.cbs.onprocessinginstruction(`?${e}`,`?${r}`)}this.startIndex=t+1}oncomment(e,t,r){var n,s,i,a;this.endIndex=t,null===(s=(n=this.cbs).oncomment)||void 0===s||s.call(n,this.getSlice(e,t-r)),null===(a=(i=this.cbs).oncommentend)||void 0===a||a.call(i),this.startIndex=t+1}oncdata(e,t,r){var n,s,i,a,o,c,l,u,h,d;this.endIndex=t;const p=this.getSlice(e,t-r);!this.htmlMode||this.options.recognizeCDATA?(null===(s=(n=this.cbs).oncdatastart)||void 0===s||s.call(n),null===(a=(i=this.cbs).ontext)||void 0===a||a.call(i,p),null===(c=(o=this.cbs).oncdataend)||void 0===c||c.call(o)):(null===(u=(l=this.cbs).oncomment)||void 0===u||u.call(l,`[CDATA[${p}]]`),null===(d=(h=this.cbs).oncommentend)||void 0===d||d.call(h)),this.startIndex=t+1}onend(){var e,t;if(this.cbs.onclosetag){this.endIndex=this.startIndex;for(let e=0;e<this.stack.length;e++)this.cbs.onclosetag(this.stack[e],!0)}null===(t=(e=this.cbs).onend)||void 0===t||t.call(e)}reset(){var e,t,r,n;null===(t=(e=this.cbs).onreset)||void 0===t||t.call(e),this.tokenizer.reset(),this.tagname="",this.attribname="",this.attribs=null,this.stack.length=0,this.startIndex=0,this.endIndex=0,null===(n=(r=this.cbs).onparserinit)||void 0===n||n.call(r,this),this.buffers.length=0,this.foreignContext.length=0,this.foreignContext.unshift(!this.htmlMode),this.bufferOffset=0,this.writeIndex=0,this.ended=!1}parseComplete(e){this.reset(),this.end(e)}getSlice(e,t){for(;e-this.bufferOffset>=this.buffers[0].length;)this.shiftBuffer();let r=this.buffers[0].slice(e-this.bufferOffset,t-this.bufferOffset);for(;t-this.bufferOffset>this.buffers[0].length;)this.shiftBuffer(),r+=this.buffers[0].slice(0,t-this.bufferOffset);return r}shiftBuffer(){this.bufferOffset+=this.buffers[0].length,this.writeIndex--,this.buffers.shift()}write(e){var t,r;this.ended?null===(r=(t=this.cbs).onerror)||void 0===r||r.call(t,new Error(".write() after done!")):(this.buffers.push(e),this.tokenizer.running&&(this.tokenizer.write(e),this.writeIndex++))}end(e){var t,r;this.ended?null===(r=(t=this.cbs).onerror)||void 0===r||r.call(t,new Error(".end() after done!")):(e&&this.write(e),this.ended=!0,this.tokenizer.end())}pause(){this.tokenizer.pause()}resume(){for(this.tokenizer.resume();this.tokenizer.running&&this.writeIndex<this.buffers.length;)this.tokenizer.write(this.buffers[this.writeIndex++]);this.ended&&this.tokenizer.end()}parseChunk(e){this.write(e)}done(e){this.end(e)}}const Oo=(Ro=(e,t,r,n)=>t._useHtmlParser2?function(e,t){const r=new H(void 0,t);return new Do(r,t).end(e),r.root}(e,t):function(e,t,r,n){var s;return null!==(s=t.treeAdapter)&&void 0!==s||(t.treeAdapter=oo),!1!==t.scriptingEnabled&&(t.scriptingEnabled=!0),r?function(e,t){return na.parse(e,t)}(e,t):function(e,t,r){"string"==typeof e&&(r=t,t=e,e=null);const n=na.getFragmentParser(e,r);return n.tokenizer.write(t,!0),n.getFragment()}(n,e,t)}(e,t,r,n),function(e,t,r,n){if("undefined"!=typeof Buffer&&Buffer.isBuffer(e)&&(e=e.toString()),"string"==typeof e)return Ro(e,t,r,n);const s=e;if(!Array.isArray(s)&&B(s))return s;const i=new O([]);return es(s,i),i});var Ro;const Lo=(ko=Oo,function e(t,r,n=!0){if(null==t)throw new Error("cheerio.load() expects a string");const i=Et(r),a=ko(t,i,n,null);class o extends Ms{_make(e,t){const r=c(e,t);return r.prevObject=this,r}_parse(e,t,r,n){return ko(e,t,r,n)}_render(e){return((e,t)=>t._useHtmlParser2?Te(e,t):function(e){const t="length"in e?e:[e];for(let e=0;e<t.length;e+=1){const r=t[e];B(r)&&Array.prototype.splice.call(t,e,1,...r.children)}let r="";for(let e=0;e<t.length;e+=1)r+=so(t[e],co);return r}(e))(e,this.options)}}function c(e,t,r=a,n){if(e&&yt(e))return e;const s=Et(n,i),c="string"==typeof r?[ko(r,s,!1,null)]:"length"in r?r:[r],l=yt(c)?c:new o(c,null,s);if(l._root=l,!e)return new o(void 0,l,s);const u="string"==typeof e&&Rt(e)?ko(e,s,!1,null).children:(h=e).name||"root"===h.type||"text"===h.type||"comment"===h.type?[e]:Array.isArray(e)?e:void 0;var h;const d=new o(u,l,s);if(u)return d;if("string"!=typeof e)throw new TypeError("Unexpected type of selector");let p=e;const f=t?"string"==typeof t?Rt(t)?new o([ko(t,s,!1,null)],l,s):(p=`${t} ${p}`,l):yt(t)?t:new o(Array.isArray(t)?t:[t],l,s):l;return f?f.find(p):d}return Object.assign(c,s,{load:e,_root:a,_options:i,fn:o.prototype,prototype:o.prototype}),c});var ko}},t={};function r(n){var s=t[n];if(void 0!==s)return s.exports;var i=t[n]={exports:{}};return e[n].call(i.exports,i,i.exports,r),i.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(156)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
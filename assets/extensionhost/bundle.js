/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={10:(e,t,n)=>{"use strict";n.r(t),n.d(t,{contains:()=>bt,load:()=>Ao,merge:()=>Nt});var r={};n.r(r),n.d(r,{DocumentPosition:()=>rt,append:()=>xe,appendChild:()=>ve,compareDocumentPosition:()=>st,existsOne:()=>Ve,filter:()=>He,find:()=>Ge,findAll:()=>je,findOne:()=>Ye,findOneChild:()=>qe,getAttributeValue:()=>Re,getChildren:()=>De,getElementById:()=>Je,getElements:()=>ze,getElementsByClassName:()=>et,getElementsByTagName:()=>Ze,getElementsByTagType:()=>tt,getFeed:()=>at,getInnerHTML:()=>be,getName:()=>ke,getOuterHTML:()=>Se,getParent:()=>Oe,getSiblings:()=>ye,getText:()=>Ie,hasAttrib:()=>Le,hasChildren:()=>v,innerText:()=>Ce,isCDATA:()=>k,isComment:()=>w,isDocument:()=>B,isTag:()=>L,isText:()=>P,nextElementSibling:()=>Pe,prepend:()=>Fe,prependChild:()=>Ue,prevElementSibling:()=>we,removeElement:()=>Me,removeSubsets:()=>nt,replaceElement:()=>Be,testElement:()=>$e,textContent:()=>Ne,uniqueSort:()=>it});var s={};n.r(s),n.d(s,{contains:()=>bt,extract:()=>It,html:()=>mt,merge:()=>Nt,parseHTML:()=>_t,root:()=>St,text:()=>gt,xml:()=>At});var i={};n.r(i),n.d(i,{addClass:()=>Xt,attr:()=>xt,data:()=>Yt,hasClass:()=>Kt,prop:()=>Ht,removeAttr:()=>Wt,removeClass:()=>$t,toggleClass:()=>zt,val:()=>Vt});var a={};n.r(a),n.d(a,{_findBySelector:()=>mr,add:()=>Jr,addBack:()=>Zr,children:()=>Mr,closest:()=>Dr,contents:()=>Br,each:()=>vr,end:()=>zr,eq:()=>Qr,filter:()=>Fr,filterArray:()=>Hr,find:()=>Tr,first:()=>Vr,get:()=>Wr,has:()=>Yr,index:()=>Xr,is:()=>Gr,last:()=>jr,map:()=>xr,next:()=>Or,nextAll:()=>yr,nextUntil:()=>Rr,not:()=>qr,parent:()=>Ir,parents:()=>Nr,parentsUntil:()=>Cr,prev:()=>Lr,prevAll:()=>kr,prevUntil:()=>Pr,siblings:()=>wr,slice:()=>$r,toArray:()=>Kr});var o={};n.r(o),n.d(o,{_makeDomArray:()=>ts,after:()=>ps,append:()=>as,appendTo:()=>ss,before:()=>Es,clone:()=>Is,empty:()=>gs,html:()=>_s,insertAfter:()=>fs,insertBefore:()=>Ts,prepend:()=>os,prependTo:()=>is,remove:()=>ms,replaceWith:()=>As,text:()=>bs,toString:()=>Ss,unwrap:()=>hs,wrap:()=>ls,wrapAll:()=>ds,wrapInner:()=>us});var c={};n.r(c),n.d(c,{css:()=>Ns});var l={};n.r(l),n.d(l,{serialize:()=>Ls,serializeArray:()=>ks});var u,h={};n.r(h),n.d(h,{extract:()=>ws}),function(e){e.Root="root",e.Text="text",e.Directive="directive",e.Comment="comment",e.Script="script",e.Style="style",e.Tag="tag",e.CDATA="cdata",e.Doctype="doctype"}(u||(u={}));const d=u.Root,p=u.Text,f=u.Directive,E=u.Comment,T=u.Script,m=u.Style,A=u.Tag,g=u.CDATA,_=u.Doctype;class S{constructor(){this.parent=null,this.prev=null,this.next=null,this.startIndex=null,this.endIndex=null}get parentNode(){return this.parent}set parentNode(e){this.parent=e}get previousSibling(){return this.prev}set previousSibling(e){this.prev=e}get nextSibling(){return this.next}set nextSibling(e){this.next=e}cloneNode(e=!1){return x(this,e)}}class b extends S{constructor(e){super(),this.data=e}get nodeValue(){return this.data}set nodeValue(e){this.data=e}}class I extends b{constructor(){super(...arguments),this.type=u.Text}get nodeType(){return 3}}class N extends b{constructor(){super(...arguments),this.type=u.Comment}get nodeType(){return 8}}class C extends b{constructor(e,t){super(t),this.name=e,this.type=u.Directive}get nodeType(){return 1}}class D extends S{constructor(e){super(),this.children=e}get firstChild(){var e;return null!==(e=this.children[0])&&void 0!==e?e:null}get lastChild(){return this.children.length>0?this.children[this.children.length-1]:null}get childNodes(){return this.children}set childNodes(e){this.children=e}}class O extends D{constructor(){super(...arguments),this.type=u.CDATA}get nodeType(){return 4}}class y extends D{constructor(){super(...arguments),this.type=u.Root}get nodeType(){return 9}}class R extends D{constructor(e,t,n=[],r=("script"===e?u.Script:"style"===e?u.Style:u.Tag)){super(n),this.name=e,this.attribs=t,this.type=r}get nodeType(){return 1}get tagName(){return this.name}set tagName(e){this.name=e}get attributes(){return Object.keys(this.attribs).map((e=>{var t,n;return{name:e,value:this.attribs[e],namespace:null===(t=this["x-attribsNamespace"])||void 0===t?void 0:t[e],prefix:null===(n=this["x-attribsPrefix"])||void 0===n?void 0:n[e]}}))}}function L(e){return(t=e).type===u.Tag||t.type===u.Script||t.type===u.Style;var t}function k(e){return e.type===u.CDATA}function P(e){return e.type===u.Text}function w(e){return e.type===u.Comment}function M(e){return e.type===u.Directive}function B(e){return e.type===u.Root}function v(e){return Object.prototype.hasOwnProperty.call(e,"children")}function x(e,t=!1){let n;if(P(e))n=new I(e.data);else if(w(e))n=new N(e.data);else if(L(e)){const r=t?U(e.children):[],s=new R(e.name,{...e.attribs},r);r.forEach((e=>e.parent=s)),null!=e.namespace&&(s.namespace=e.namespace),e["x-attribsNamespace"]&&(s["x-attribsNamespace"]={...e["x-attribsNamespace"]}),e["x-attribsPrefix"]&&(s["x-attribsPrefix"]={...e["x-attribsPrefix"]}),n=s}else if(k(e)){const r=t?U(e.children):[],s=new O(r);r.forEach((e=>e.parent=s)),n=s}else if(B(e)){const r=t?U(e.children):[],s=new y(r);r.forEach((e=>e.parent=s)),e["x-mode"]&&(s["x-mode"]=e["x-mode"]),n=s}else{if(!M(e))throw new Error(`Not implemented yet: ${e.type}`);{const t=new C(e.name,e.data);null!=e["x-name"]&&(t["x-name"]=e["x-name"],t["x-publicId"]=e["x-publicId"],t["x-systemId"]=e["x-systemId"]),n=t}}return n.startIndex=e.startIndex,n.endIndex=e.endIndex,null!=e.sourceCodeLocation&&(n.sourceCodeLocation=e.sourceCodeLocation),n}function U(e){const t=e.map((e=>x(e,!0)));for(let e=1;e<t.length;e++)t[e].prev=t[e-1],t[e-1].next=t[e];return t}const F={withStartIndices:!1,withEndIndices:!1,xmlMode:!1};class H{constructor(e,t,n){this.dom=[],this.root=new y(this.dom),this.done=!1,this.tagStack=[this.root],this.lastNode=null,this.parser=null,"function"==typeof t&&(n=t,t=F),"object"==typeof e&&(t=e,e=void 0),this.callback=null!=e?e:null,this.options=null!=t?t:F,this.elementCB=null!=n?n:null}onparserinit(e){this.parser=e}onreset(){this.dom=[],this.root=new y(this.dom),this.done=!1,this.tagStack=[this.root],this.lastNode=null,this.parser=null}onend(){this.done||(this.done=!0,this.parser=null,this.handleCallback(null))}onerror(e){this.handleCallback(e)}onclosetag(){this.lastNode=null;const e=this.tagStack.pop();this.options.withEndIndices&&(e.endIndex=this.parser.endIndex),this.elementCB&&this.elementCB(e)}onopentag(e,t){const n=this.options.xmlMode?u.Tag:void 0,r=new R(e,t,void 0,n);this.addNode(r),this.tagStack.push(r)}ontext(e){const{lastNode:t}=this;if(t&&t.type===u.Text)t.data+=e,this.options.withEndIndices&&(t.endIndex=this.parser.endIndex);else{const t=new I(e);this.addNode(t),this.lastNode=t}}oncomment(e){if(this.lastNode&&this.lastNode.type===u.Comment)return void(this.lastNode.data+=e);const t=new N(e);this.addNode(t),this.lastNode=t}oncommentend(){this.lastNode=null}oncdatastart(){const e=new I(""),t=new O([e]);this.addNode(t),e.parent=t,this.lastNode=e}oncdataend(){this.lastNode=null}onprocessinginstruction(e,t){const n=new C(e,t);this.addNode(n)}handleCallback(e){if("function"==typeof this.callback)this.callback(e,this.dom);else if(e)throw e}addNode(e){const t=this.tagStack[this.tagStack.length-1],n=t.children[t.children.length-1];this.options.withStartIndices&&(e.startIndex=this.parser.startIndex),this.options.withEndIndices&&(e.endIndex=this.parser.endIndex),t.children.push(e),n&&(e.prev=n,n.next=e),e.parent=t,this.lastNode=null}}const G=new Uint16Array('ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'.split("").map((e=>e.charCodeAt(0)))),q=new Uint16Array("Ȁaglq\tɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢".split("").map((e=>e.charCodeAt(0))));var Y;const V=new Map([[0,65533],[128,8364],[130,8218],[131,402],[132,8222],[133,8230],[134,8224],[135,8225],[136,710],[137,8240],[138,352],[139,8249],[140,338],[142,381],[145,8216],[146,8217],[147,8220],[148,8221],[149,8226],[150,8211],[151,8212],[152,732],[153,8482],[154,353],[155,8250],[156,339],[158,382],[159,376]]),j=null!==(Y=String.fromCodePoint)&&void 0!==Y?Y:function(e){let t="";return e>65535&&(e-=65536,t+=String.fromCharCode(e>>>10&1023|55296),e=56320|1023&e),t+=String.fromCharCode(e),t};var Q,W,K,X,$;function z(e){return e>=Q.ZERO&&e<=Q.NINE}!function(e){e[e.NUM=35]="NUM",e[e.SEMI=59]="SEMI",e[e.EQUALS=61]="EQUALS",e[e.ZERO=48]="ZERO",e[e.NINE=57]="NINE",e[e.LOWER_A=97]="LOWER_A",e[e.LOWER_F=102]="LOWER_F",e[e.LOWER_X=120]="LOWER_X",e[e.LOWER_Z=122]="LOWER_Z",e[e.UPPER_A=65]="UPPER_A",e[e.UPPER_F=70]="UPPER_F",e[e.UPPER_Z=90]="UPPER_Z"}(Q||(Q={})),function(e){e[e.VALUE_LENGTH=49152]="VALUE_LENGTH",e[e.BRANCH_LENGTH=16256]="BRANCH_LENGTH",e[e.JUMP_TABLE=127]="JUMP_TABLE"}(W||(W={})),function(e){e[e.EntityStart=0]="EntityStart",e[e.NumericStart=1]="NumericStart",e[e.NumericDecimal=2]="NumericDecimal",e[e.NumericHex=3]="NumericHex",e[e.NamedEntity=4]="NamedEntity"}(K||(K={})),($=X||(X={}))[$.Legacy=0]="Legacy",$[$.Strict=1]="Strict",$[$.Attribute=2]="Attribute";class J{constructor(e,t,n){this.decodeTree=e,this.emitCodePoint=t,this.errors=n,this.state=K.EntityStart,this.consumed=1,this.result=0,this.treeIndex=0,this.excess=1,this.decodeMode=X.Strict}startEntity(e){this.decodeMode=e,this.state=K.EntityStart,this.result=0,this.treeIndex=0,this.excess=1,this.consumed=1}write(e,t){switch(this.state){case K.EntityStart:return e.charCodeAt(t)===Q.NUM?(this.state=K.NumericStart,this.consumed+=1,this.stateNumericStart(e,t+1)):(this.state=K.NamedEntity,this.stateNamedEntity(e,t));case K.NumericStart:return this.stateNumericStart(e,t);case K.NumericDecimal:return this.stateNumericDecimal(e,t);case K.NumericHex:return this.stateNumericHex(e,t);case K.NamedEntity:return this.stateNamedEntity(e,t)}}stateNumericStart(e,t){return t>=e.length?-1:(32|e.charCodeAt(t))===Q.LOWER_X?(this.state=K.NumericHex,this.consumed+=1,this.stateNumericHex(e,t+1)):(this.state=K.NumericDecimal,this.stateNumericDecimal(e,t))}addToNumericResult(e,t,n,r){if(t!==n){const s=n-t;this.result=this.result*Math.pow(r,s)+parseInt(e.substr(t,s),r),this.consumed+=s}}stateNumericHex(e,t){const n=t;for(;t<e.length;){const s=e.charCodeAt(t);if(!(z(s)||(r=s,r>=Q.UPPER_A&&r<=Q.UPPER_F||r>=Q.LOWER_A&&r<=Q.LOWER_F)))return this.addToNumericResult(e,n,t,16),this.emitNumericEntity(s,3);t+=1}var r;return this.addToNumericResult(e,n,t,16),-1}stateNumericDecimal(e,t){const n=t;for(;t<e.length;){const r=e.charCodeAt(t);if(!z(r))return this.addToNumericResult(e,n,t,10),this.emitNumericEntity(r,2);t+=1}return this.addToNumericResult(e,n,t,10),-1}emitNumericEntity(e,t){var n;if(this.consumed<=t)return null===(n=this.errors)||void 0===n||n.absenceOfDigitsInNumericCharacterReference(this.consumed),0;if(e===Q.SEMI)this.consumed+=1;else if(this.decodeMode===X.Strict)return 0;return this.emitCodePoint(function(e){var t;return e>=55296&&e<=57343||e>1114111?65533:null!==(t=V.get(e))&&void 0!==t?t:e}(this.result),this.consumed),this.errors&&(e!==Q.SEMI&&this.errors.missingSemicolonAfterCharacterReference(),this.errors.validateNumericCharacterReference(this.result)),this.consumed}stateNamedEntity(e,t){const{decodeTree:n}=this;let r=n[this.treeIndex],s=(r&W.VALUE_LENGTH)>>14;for(;t<e.length;t++,this.excess++){const a=e.charCodeAt(t);if(this.treeIndex=ee(n,r,this.treeIndex+Math.max(1,s),a),this.treeIndex<0)return 0===this.result||this.decodeMode===X.Attribute&&(0===s||((i=a)===Q.EQUALS||function(e){return e>=Q.UPPER_A&&e<=Q.UPPER_Z||e>=Q.LOWER_A&&e<=Q.LOWER_Z||z(e)}(i)))?0:this.emitNotTerminatedNamedEntity();if(r=n[this.treeIndex],s=(r&W.VALUE_LENGTH)>>14,0!==s){if(a===Q.SEMI)return this.emitNamedEntityData(this.treeIndex,s,this.consumed+this.excess);this.decodeMode!==X.Strict&&(this.result=this.treeIndex,this.consumed+=this.excess,this.excess=0)}}var i;return-1}emitNotTerminatedNamedEntity(){var e;const{result:t,decodeTree:n}=this,r=(n[t]&W.VALUE_LENGTH)>>14;return this.emitNamedEntityData(t,r,this.consumed),null===(e=this.errors)||void 0===e||e.missingSemicolonAfterCharacterReference(),this.consumed}emitNamedEntityData(e,t,n){const{decodeTree:r}=this;return this.emitCodePoint(1===t?r[e]&~W.VALUE_LENGTH:r[e+1],n),3===t&&this.emitCodePoint(r[e+2],n),n}end(){var e;switch(this.state){case K.NamedEntity:return 0===this.result||this.decodeMode===X.Attribute&&this.result!==this.treeIndex?0:this.emitNotTerminatedNamedEntity();case K.NumericDecimal:return this.emitNumericEntity(0,2);case K.NumericHex:return this.emitNumericEntity(0,3);case K.NumericStart:return null===(e=this.errors)||void 0===e||e.absenceOfDigitsInNumericCharacterReference(this.consumed),0;case K.EntityStart:return 0}}}function Z(e){let t="";const n=new J(e,(e=>t+=j(e)));return function(e,r){let s=0,i=0;for(;(i=e.indexOf("&",i))>=0;){t+=e.slice(s,i),n.startEntity(r);const a=n.write(e,i+1);if(a<0){s=i+n.end();break}s=i+a,i=0===a?s+1:s}const a=t+e.slice(s);return t="",a}}function ee(e,t,n,r){const s=(t&W.BRANCH_LENGTH)>>7,i=t&W.JUMP_TABLE;if(0===s)return 0!==i&&r===i?n:-1;if(i){const t=r-i;return t<0||t>=s?-1:e[n+t]-1}let a=n,o=a+s-1;for(;a<=o;){const t=a+o>>>1,n=e[t];if(n<r)a=t+1;else{if(!(n>r))return e[t+s];o=t-1}}return-1}function te(e){for(let t=1;t<e.length;t++)e[t][0]+=e[t-1][0]+1;return e}Z(G),Z(q),new Map(te([[9,"&Tab;"],[0,"&NewLine;"],[22,"&excl;"],[0,"&quot;"],[0,"&num;"],[0,"&dollar;"],[0,"&percnt;"],[0,"&amp;"],[0,"&apos;"],[0,"&lpar;"],[0,"&rpar;"],[0,"&ast;"],[0,"&plus;"],[0,"&comma;"],[1,"&period;"],[0,"&sol;"],[10,"&colon;"],[0,"&semi;"],[0,{v:"&lt;",n:8402,o:"&nvlt;"}],[0,{v:"&equals;",n:8421,o:"&bne;"}],[0,{v:"&gt;",n:8402,o:"&nvgt;"}],[0,"&quest;"],[0,"&commat;"],[26,"&lbrack;"],[0,"&bsol;"],[0,"&rbrack;"],[0,"&Hat;"],[0,"&lowbar;"],[0,"&DiacriticalGrave;"],[5,{n:106,o:"&fjlig;"}],[20,"&lbrace;"],[0,"&verbar;"],[0,"&rbrace;"],[34,"&nbsp;"],[0,"&iexcl;"],[0,"&cent;"],[0,"&pound;"],[0,"&curren;"],[0,"&yen;"],[0,"&brvbar;"],[0,"&sect;"],[0,"&die;"],[0,"&copy;"],[0,"&ordf;"],[0,"&laquo;"],[0,"&not;"],[0,"&shy;"],[0,"&circledR;"],[0,"&macr;"],[0,"&deg;"],[0,"&PlusMinus;"],[0,"&sup2;"],[0,"&sup3;"],[0,"&acute;"],[0,"&micro;"],[0,"&para;"],[0,"&centerdot;"],[0,"&cedil;"],[0,"&sup1;"],[0,"&ordm;"],[0,"&raquo;"],[0,"&frac14;"],[0,"&frac12;"],[0,"&frac34;"],[0,"&iquest;"],[0,"&Agrave;"],[0,"&Aacute;"],[0,"&Acirc;"],[0,"&Atilde;"],[0,"&Auml;"],[0,"&angst;"],[0,"&AElig;"],[0,"&Ccedil;"],[0,"&Egrave;"],[0,"&Eacute;"],[0,"&Ecirc;"],[0,"&Euml;"],[0,"&Igrave;"],[0,"&Iacute;"],[0,"&Icirc;"],[0,"&Iuml;"],[0,"&ETH;"],[0,"&Ntilde;"],[0,"&Ograve;"],[0,"&Oacute;"],[0,"&Ocirc;"],[0,"&Otilde;"],[0,"&Ouml;"],[0,"&times;"],[0,"&Oslash;"],[0,"&Ugrave;"],[0,"&Uacute;"],[0,"&Ucirc;"],[0,"&Uuml;"],[0,"&Yacute;"],[0,"&THORN;"],[0,"&szlig;"],[0,"&agrave;"],[0,"&aacute;"],[0,"&acirc;"],[0,"&atilde;"],[0,"&auml;"],[0,"&aring;"],[0,"&aelig;"],[0,"&ccedil;"],[0,"&egrave;"],[0,"&eacute;"],[0,"&ecirc;"],[0,"&euml;"],[0,"&igrave;"],[0,"&iacute;"],[0,"&icirc;"],[0,"&iuml;"],[0,"&eth;"],[0,"&ntilde;"],[0,"&ograve;"],[0,"&oacute;"],[0,"&ocirc;"],[0,"&otilde;"],[0,"&ouml;"],[0,"&div;"],[0,"&oslash;"],[0,"&ugrave;"],[0,"&uacute;"],[0,"&ucirc;"],[0,"&uuml;"],[0,"&yacute;"],[0,"&thorn;"],[0,"&yuml;"],[0,"&Amacr;"],[0,"&amacr;"],[0,"&Abreve;"],[0,"&abreve;"],[0,"&Aogon;"],[0,"&aogon;"],[0,"&Cacute;"],[0,"&cacute;"],[0,"&Ccirc;"],[0,"&ccirc;"],[0,"&Cdot;"],[0,"&cdot;"],[0,"&Ccaron;"],[0,"&ccaron;"],[0,"&Dcaron;"],[0,"&dcaron;"],[0,"&Dstrok;"],[0,"&dstrok;"],[0,"&Emacr;"],[0,"&emacr;"],[2,"&Edot;"],[0,"&edot;"],[0,"&Eogon;"],[0,"&eogon;"],[0,"&Ecaron;"],[0,"&ecaron;"],[0,"&Gcirc;"],[0,"&gcirc;"],[0,"&Gbreve;"],[0,"&gbreve;"],[0,"&Gdot;"],[0,"&gdot;"],[0,"&Gcedil;"],[1,"&Hcirc;"],[0,"&hcirc;"],[0,"&Hstrok;"],[0,"&hstrok;"],[0,"&Itilde;"],[0,"&itilde;"],[0,"&Imacr;"],[0,"&imacr;"],[2,"&Iogon;"],[0,"&iogon;"],[0,"&Idot;"],[0,"&imath;"],[0,"&IJlig;"],[0,"&ijlig;"],[0,"&Jcirc;"],[0,"&jcirc;"],[0,"&Kcedil;"],[0,"&kcedil;"],[0,"&kgreen;"],[0,"&Lacute;"],[0,"&lacute;"],[0,"&Lcedil;"],[0,"&lcedil;"],[0,"&Lcaron;"],[0,"&lcaron;"],[0,"&Lmidot;"],[0,"&lmidot;"],[0,"&Lstrok;"],[0,"&lstrok;"],[0,"&Nacute;"],[0,"&nacute;"],[0,"&Ncedil;"],[0,"&ncedil;"],[0,"&Ncaron;"],[0,"&ncaron;"],[0,"&napos;"],[0,"&ENG;"],[0,"&eng;"],[0,"&Omacr;"],[0,"&omacr;"],[2,"&Odblac;"],[0,"&odblac;"],[0,"&OElig;"],[0,"&oelig;"],[0,"&Racute;"],[0,"&racute;"],[0,"&Rcedil;"],[0,"&rcedil;"],[0,"&Rcaron;"],[0,"&rcaron;"],[0,"&Sacute;"],[0,"&sacute;"],[0,"&Scirc;"],[0,"&scirc;"],[0,"&Scedil;"],[0,"&scedil;"],[0,"&Scaron;"],[0,"&scaron;"],[0,"&Tcedil;"],[0,"&tcedil;"],[0,"&Tcaron;"],[0,"&tcaron;"],[0,"&Tstrok;"],[0,"&tstrok;"],[0,"&Utilde;"],[0,"&utilde;"],[0,"&Umacr;"],[0,"&umacr;"],[0,"&Ubreve;"],[0,"&ubreve;"],[0,"&Uring;"],[0,"&uring;"],[0,"&Udblac;"],[0,"&udblac;"],[0,"&Uogon;"],[0,"&uogon;"],[0,"&Wcirc;"],[0,"&wcirc;"],[0,"&Ycirc;"],[0,"&ycirc;"],[0,"&Yuml;"],[0,"&Zacute;"],[0,"&zacute;"],[0,"&Zdot;"],[0,"&zdot;"],[0,"&Zcaron;"],[0,"&zcaron;"],[19,"&fnof;"],[34,"&imped;"],[63,"&gacute;"],[65,"&jmath;"],[142,"&circ;"],[0,"&caron;"],[16,"&breve;"],[0,"&DiacriticalDot;"],[0,"&ring;"],[0,"&ogon;"],[0,"&DiacriticalTilde;"],[0,"&dblac;"],[51,"&DownBreve;"],[127,"&Alpha;"],[0,"&Beta;"],[0,"&Gamma;"],[0,"&Delta;"],[0,"&Epsilon;"],[0,"&Zeta;"],[0,"&Eta;"],[0,"&Theta;"],[0,"&Iota;"],[0,"&Kappa;"],[0,"&Lambda;"],[0,"&Mu;"],[0,"&Nu;"],[0,"&Xi;"],[0,"&Omicron;"],[0,"&Pi;"],[0,"&Rho;"],[1,"&Sigma;"],[0,"&Tau;"],[0,"&Upsilon;"],[0,"&Phi;"],[0,"&Chi;"],[0,"&Psi;"],[0,"&ohm;"],[7,"&alpha;"],[0,"&beta;"],[0,"&gamma;"],[0,"&delta;"],[0,"&epsi;"],[0,"&zeta;"],[0,"&eta;"],[0,"&theta;"],[0,"&iota;"],[0,"&kappa;"],[0,"&lambda;"],[0,"&mu;"],[0,"&nu;"],[0,"&xi;"],[0,"&omicron;"],[0,"&pi;"],[0,"&rho;"],[0,"&sigmaf;"],[0,"&sigma;"],[0,"&tau;"],[0,"&upsi;"],[0,"&phi;"],[0,"&chi;"],[0,"&psi;"],[0,"&omega;"],[7,"&thetasym;"],[0,"&Upsi;"],[2,"&phiv;"],[0,"&piv;"],[5,"&Gammad;"],[0,"&digamma;"],[18,"&kappav;"],[0,"&rhov;"],[3,"&epsiv;"],[0,"&backepsilon;"],[10,"&IOcy;"],[0,"&DJcy;"],[0,"&GJcy;"],[0,"&Jukcy;"],[0,"&DScy;"],[0,"&Iukcy;"],[0,"&YIcy;"],[0,"&Jsercy;"],[0,"&LJcy;"],[0,"&NJcy;"],[0,"&TSHcy;"],[0,"&KJcy;"],[1,"&Ubrcy;"],[0,"&DZcy;"],[0,"&Acy;"],[0,"&Bcy;"],[0,"&Vcy;"],[0,"&Gcy;"],[0,"&Dcy;"],[0,"&IEcy;"],[0,"&ZHcy;"],[0,"&Zcy;"],[0,"&Icy;"],[0,"&Jcy;"],[0,"&Kcy;"],[0,"&Lcy;"],[0,"&Mcy;"],[0,"&Ncy;"],[0,"&Ocy;"],[0,"&Pcy;"],[0,"&Rcy;"],[0,"&Scy;"],[0,"&Tcy;"],[0,"&Ucy;"],[0,"&Fcy;"],[0,"&KHcy;"],[0,"&TScy;"],[0,"&CHcy;"],[0,"&SHcy;"],[0,"&SHCHcy;"],[0,"&HARDcy;"],[0,"&Ycy;"],[0,"&SOFTcy;"],[0,"&Ecy;"],[0,"&YUcy;"],[0,"&YAcy;"],[0,"&acy;"],[0,"&bcy;"],[0,"&vcy;"],[0,"&gcy;"],[0,"&dcy;"],[0,"&iecy;"],[0,"&zhcy;"],[0,"&zcy;"],[0,"&icy;"],[0,"&jcy;"],[0,"&kcy;"],[0,"&lcy;"],[0,"&mcy;"],[0,"&ncy;"],[0,"&ocy;"],[0,"&pcy;"],[0,"&rcy;"],[0,"&scy;"],[0,"&tcy;"],[0,"&ucy;"],[0,"&fcy;"],[0,"&khcy;"],[0,"&tscy;"],[0,"&chcy;"],[0,"&shcy;"],[0,"&shchcy;"],[0,"&hardcy;"],[0,"&ycy;"],[0,"&softcy;"],[0,"&ecy;"],[0,"&yucy;"],[0,"&yacy;"],[1,"&iocy;"],[0,"&djcy;"],[0,"&gjcy;"],[0,"&jukcy;"],[0,"&dscy;"],[0,"&iukcy;"],[0,"&yicy;"],[0,"&jsercy;"],[0,"&ljcy;"],[0,"&njcy;"],[0,"&tshcy;"],[0,"&kjcy;"],[1,"&ubrcy;"],[0,"&dzcy;"],[7074,"&ensp;"],[0,"&emsp;"],[0,"&emsp13;"],[0,"&emsp14;"],[1,"&numsp;"],[0,"&puncsp;"],[0,"&ThinSpace;"],[0,"&hairsp;"],[0,"&NegativeMediumSpace;"],[0,"&zwnj;"],[0,"&zwj;"],[0,"&lrm;"],[0,"&rlm;"],[0,"&dash;"],[2,"&ndash;"],[0,"&mdash;"],[0,"&horbar;"],[0,"&Verbar;"],[1,"&lsquo;"],[0,"&CloseCurlyQuote;"],[0,"&lsquor;"],[1,"&ldquo;"],[0,"&CloseCurlyDoubleQuote;"],[0,"&bdquo;"],[1,"&dagger;"],[0,"&Dagger;"],[0,"&bull;"],[2,"&nldr;"],[0,"&hellip;"],[9,"&permil;"],[0,"&pertenk;"],[0,"&prime;"],[0,"&Prime;"],[0,"&tprime;"],[0,"&backprime;"],[3,"&lsaquo;"],[0,"&rsaquo;"],[3,"&oline;"],[2,"&caret;"],[1,"&hybull;"],[0,"&frasl;"],[10,"&bsemi;"],[7,"&qprime;"],[7,{v:"&MediumSpace;",n:8202,o:"&ThickSpace;"}],[0,"&NoBreak;"],[0,"&af;"],[0,"&InvisibleTimes;"],[0,"&ic;"],[72,"&euro;"],[46,"&tdot;"],[0,"&DotDot;"],[37,"&complexes;"],[2,"&incare;"],[4,"&gscr;"],[0,"&hamilt;"],[0,"&Hfr;"],[0,"&Hopf;"],[0,"&planckh;"],[0,"&hbar;"],[0,"&imagline;"],[0,"&Ifr;"],[0,"&lagran;"],[0,"&ell;"],[1,"&naturals;"],[0,"&numero;"],[0,"&copysr;"],[0,"&weierp;"],[0,"&Popf;"],[0,"&Qopf;"],[0,"&realine;"],[0,"&real;"],[0,"&reals;"],[0,"&rx;"],[3,"&trade;"],[1,"&integers;"],[2,"&mho;"],[0,"&zeetrf;"],[0,"&iiota;"],[2,"&bernou;"],[0,"&Cayleys;"],[1,"&escr;"],[0,"&Escr;"],[0,"&Fouriertrf;"],[1,"&Mellintrf;"],[0,"&order;"],[0,"&alefsym;"],[0,"&beth;"],[0,"&gimel;"],[0,"&daleth;"],[12,"&CapitalDifferentialD;"],[0,"&dd;"],[0,"&ee;"],[0,"&ii;"],[10,"&frac13;"],[0,"&frac23;"],[0,"&frac15;"],[0,"&frac25;"],[0,"&frac35;"],[0,"&frac45;"],[0,"&frac16;"],[0,"&frac56;"],[0,"&frac18;"],[0,"&frac38;"],[0,"&frac58;"],[0,"&frac78;"],[49,"&larr;"],[0,"&ShortUpArrow;"],[0,"&rarr;"],[0,"&darr;"],[0,"&harr;"],[0,"&updownarrow;"],[0,"&nwarr;"],[0,"&nearr;"],[0,"&LowerRightArrow;"],[0,"&LowerLeftArrow;"],[0,"&nlarr;"],[0,"&nrarr;"],[1,{v:"&rarrw;",n:824,o:"&nrarrw;"}],[0,"&Larr;"],[0,"&Uarr;"],[0,"&Rarr;"],[0,"&Darr;"],[0,"&larrtl;"],[0,"&rarrtl;"],[0,"&LeftTeeArrow;"],[0,"&mapstoup;"],[0,"&map;"],[0,"&DownTeeArrow;"],[1,"&hookleftarrow;"],[0,"&hookrightarrow;"],[0,"&larrlp;"],[0,"&looparrowright;"],[0,"&harrw;"],[0,"&nharr;"],[1,"&lsh;"],[0,"&rsh;"],[0,"&ldsh;"],[0,"&rdsh;"],[1,"&crarr;"],[0,"&cularr;"],[0,"&curarr;"],[2,"&circlearrowleft;"],[0,"&circlearrowright;"],[0,"&leftharpoonup;"],[0,"&DownLeftVector;"],[0,"&RightUpVector;"],[0,"&LeftUpVector;"],[0,"&rharu;"],[0,"&DownRightVector;"],[0,"&dharr;"],[0,"&dharl;"],[0,"&RightArrowLeftArrow;"],[0,"&udarr;"],[0,"&LeftArrowRightArrow;"],[0,"&leftleftarrows;"],[0,"&upuparrows;"],[0,"&rightrightarrows;"],[0,"&ddarr;"],[0,"&leftrightharpoons;"],[0,"&Equilibrium;"],[0,"&nlArr;"],[0,"&nhArr;"],[0,"&nrArr;"],[0,"&DoubleLeftArrow;"],[0,"&DoubleUpArrow;"],[0,"&DoubleRightArrow;"],[0,"&dArr;"],[0,"&DoubleLeftRightArrow;"],[0,"&DoubleUpDownArrow;"],[0,"&nwArr;"],[0,"&neArr;"],[0,"&seArr;"],[0,"&swArr;"],[0,"&lAarr;"],[0,"&rAarr;"],[1,"&zigrarr;"],[6,"&larrb;"],[0,"&rarrb;"],[15,"&DownArrowUpArrow;"],[7,"&loarr;"],[0,"&roarr;"],[0,"&hoarr;"],[0,"&forall;"],[0,"&comp;"],[0,{v:"&part;",n:824,o:"&npart;"}],[0,"&exist;"],[0,"&nexist;"],[0,"&empty;"],[1,"&Del;"],[0,"&Element;"],[0,"&NotElement;"],[1,"&ni;"],[0,"&notni;"],[2,"&prod;"],[0,"&coprod;"],[0,"&sum;"],[0,"&minus;"],[0,"&MinusPlus;"],[0,"&dotplus;"],[1,"&Backslash;"],[0,"&lowast;"],[0,"&compfn;"],[1,"&radic;"],[2,"&prop;"],[0,"&infin;"],[0,"&angrt;"],[0,{v:"&ang;",n:8402,o:"&nang;"}],[0,"&angmsd;"],[0,"&angsph;"],[0,"&mid;"],[0,"&nmid;"],[0,"&DoubleVerticalBar;"],[0,"&NotDoubleVerticalBar;"],[0,"&and;"],[0,"&or;"],[0,{v:"&cap;",n:65024,o:"&caps;"}],[0,{v:"&cup;",n:65024,o:"&cups;"}],[0,"&int;"],[0,"&Int;"],[0,"&iiint;"],[0,"&conint;"],[0,"&Conint;"],[0,"&Cconint;"],[0,"&cwint;"],[0,"&ClockwiseContourIntegral;"],[0,"&awconint;"],[0,"&there4;"],[0,"&becaus;"],[0,"&ratio;"],[0,"&Colon;"],[0,"&dotminus;"],[1,"&mDDot;"],[0,"&homtht;"],[0,{v:"&sim;",n:8402,o:"&nvsim;"}],[0,{v:"&backsim;",n:817,o:"&race;"}],[0,{v:"&ac;",n:819,o:"&acE;"}],[0,"&acd;"],[0,"&VerticalTilde;"],[0,"&NotTilde;"],[0,{v:"&eqsim;",n:824,o:"&nesim;"}],[0,"&sime;"],[0,"&NotTildeEqual;"],[0,"&cong;"],[0,"&simne;"],[0,"&ncong;"],[0,"&ap;"],[0,"&nap;"],[0,"&ape;"],[0,{v:"&apid;",n:824,o:"&napid;"}],[0,"&backcong;"],[0,{v:"&asympeq;",n:8402,o:"&nvap;"}],[0,{v:"&bump;",n:824,o:"&nbump;"}],[0,{v:"&bumpe;",n:824,o:"&nbumpe;"}],[0,{v:"&doteq;",n:824,o:"&nedot;"}],[0,"&doteqdot;"],[0,"&efDot;"],[0,"&erDot;"],[0,"&Assign;"],[0,"&ecolon;"],[0,"&ecir;"],[0,"&circeq;"],[1,"&wedgeq;"],[0,"&veeeq;"],[1,"&triangleq;"],[2,"&equest;"],[0,"&ne;"],[0,{v:"&Congruent;",n:8421,o:"&bnequiv;"}],[0,"&nequiv;"],[1,{v:"&le;",n:8402,o:"&nvle;"}],[0,{v:"&ge;",n:8402,o:"&nvge;"}],[0,{v:"&lE;",n:824,o:"&nlE;"}],[0,{v:"&gE;",n:824,o:"&ngE;"}],[0,{v:"&lnE;",n:65024,o:"&lvertneqq;"}],[0,{v:"&gnE;",n:65024,o:"&gvertneqq;"}],[0,{v:"&ll;",n:new Map(te([[824,"&nLtv;"],[7577,"&nLt;"]]))}],[0,{v:"&gg;",n:new Map(te([[824,"&nGtv;"],[7577,"&nGt;"]]))}],[0,"&between;"],[0,"&NotCupCap;"],[0,"&nless;"],[0,"&ngt;"],[0,"&nle;"],[0,"&nge;"],[0,"&lesssim;"],[0,"&GreaterTilde;"],[0,"&nlsim;"],[0,"&ngsim;"],[0,"&LessGreater;"],[0,"&gl;"],[0,"&NotLessGreater;"],[0,"&NotGreaterLess;"],[0,"&pr;"],[0,"&sc;"],[0,"&prcue;"],[0,"&sccue;"],[0,"&PrecedesTilde;"],[0,{v:"&scsim;",n:824,o:"&NotSucceedsTilde;"}],[0,"&NotPrecedes;"],[0,"&NotSucceeds;"],[0,{v:"&sub;",n:8402,o:"&NotSubset;"}],[0,{v:"&sup;",n:8402,o:"&NotSuperset;"}],[0,"&nsub;"],[0,"&nsup;"],[0,"&sube;"],[0,"&supe;"],[0,"&NotSubsetEqual;"],[0,"&NotSupersetEqual;"],[0,{v:"&subne;",n:65024,o:"&varsubsetneq;"}],[0,{v:"&supne;",n:65024,o:"&varsupsetneq;"}],[1,"&cupdot;"],[0,"&UnionPlus;"],[0,{v:"&sqsub;",n:824,o:"&NotSquareSubset;"}],[0,{v:"&sqsup;",n:824,o:"&NotSquareSuperset;"}],[0,"&sqsube;"],[0,"&sqsupe;"],[0,{v:"&sqcap;",n:65024,o:"&sqcaps;"}],[0,{v:"&sqcup;",n:65024,o:"&sqcups;"}],[0,"&CirclePlus;"],[0,"&CircleMinus;"],[0,"&CircleTimes;"],[0,"&osol;"],[0,"&CircleDot;"],[0,"&circledcirc;"],[0,"&circledast;"],[1,"&circleddash;"],[0,"&boxplus;"],[0,"&boxminus;"],[0,"&boxtimes;"],[0,"&dotsquare;"],[0,"&RightTee;"],[0,"&dashv;"],[0,"&DownTee;"],[0,"&bot;"],[1,"&models;"],[0,"&DoubleRightTee;"],[0,"&Vdash;"],[0,"&Vvdash;"],[0,"&VDash;"],[0,"&nvdash;"],[0,"&nvDash;"],[0,"&nVdash;"],[0,"&nVDash;"],[0,"&prurel;"],[1,"&LeftTriangle;"],[0,"&RightTriangle;"],[0,{v:"&LeftTriangleEqual;",n:8402,o:"&nvltrie;"}],[0,{v:"&RightTriangleEqual;",n:8402,o:"&nvrtrie;"}],[0,"&origof;"],[0,"&imof;"],[0,"&multimap;"],[0,"&hercon;"],[0,"&intcal;"],[0,"&veebar;"],[1,"&barvee;"],[0,"&angrtvb;"],[0,"&lrtri;"],[0,"&bigwedge;"],[0,"&bigvee;"],[0,"&bigcap;"],[0,"&bigcup;"],[0,"&diam;"],[0,"&sdot;"],[0,"&sstarf;"],[0,"&divideontimes;"],[0,"&bowtie;"],[0,"&ltimes;"],[0,"&rtimes;"],[0,"&leftthreetimes;"],[0,"&rightthreetimes;"],[0,"&backsimeq;"],[0,"&curlyvee;"],[0,"&curlywedge;"],[0,"&Sub;"],[0,"&Sup;"],[0,"&Cap;"],[0,"&Cup;"],[0,"&fork;"],[0,"&epar;"],[0,"&lessdot;"],[0,"&gtdot;"],[0,{v:"&Ll;",n:824,o:"&nLl;"}],[0,{v:"&Gg;",n:824,o:"&nGg;"}],[0,{v:"&leg;",n:65024,o:"&lesg;"}],[0,{v:"&gel;",n:65024,o:"&gesl;"}],[2,"&cuepr;"],[0,"&cuesc;"],[0,"&NotPrecedesSlantEqual;"],[0,"&NotSucceedsSlantEqual;"],[0,"&NotSquareSubsetEqual;"],[0,"&NotSquareSupersetEqual;"],[2,"&lnsim;"],[0,"&gnsim;"],[0,"&precnsim;"],[0,"&scnsim;"],[0,"&nltri;"],[0,"&NotRightTriangle;"],[0,"&nltrie;"],[0,"&NotRightTriangleEqual;"],[0,"&vellip;"],[0,"&ctdot;"],[0,"&utdot;"],[0,"&dtdot;"],[0,"&disin;"],[0,"&isinsv;"],[0,"&isins;"],[0,{v:"&isindot;",n:824,o:"&notindot;"}],[0,"&notinvc;"],[0,"&notinvb;"],[1,{v:"&isinE;",n:824,o:"&notinE;"}],[0,"&nisd;"],[0,"&xnis;"],[0,"&nis;"],[0,"&notnivc;"],[0,"&notnivb;"],[6,"&barwed;"],[0,"&Barwed;"],[1,"&lceil;"],[0,"&rceil;"],[0,"&LeftFloor;"],[0,"&rfloor;"],[0,"&drcrop;"],[0,"&dlcrop;"],[0,"&urcrop;"],[0,"&ulcrop;"],[0,"&bnot;"],[1,"&profline;"],[0,"&profsurf;"],[1,"&telrec;"],[0,"&target;"],[5,"&ulcorn;"],[0,"&urcorn;"],[0,"&dlcorn;"],[0,"&drcorn;"],[2,"&frown;"],[0,"&smile;"],[9,"&cylcty;"],[0,"&profalar;"],[7,"&topbot;"],[6,"&ovbar;"],[1,"&solbar;"],[60,"&angzarr;"],[51,"&lmoustache;"],[0,"&rmoustache;"],[2,"&OverBracket;"],[0,"&bbrk;"],[0,"&bbrktbrk;"],[37,"&OverParenthesis;"],[0,"&UnderParenthesis;"],[0,"&OverBrace;"],[0,"&UnderBrace;"],[2,"&trpezium;"],[4,"&elinters;"],[59,"&blank;"],[164,"&circledS;"],[55,"&boxh;"],[1,"&boxv;"],[9,"&boxdr;"],[3,"&boxdl;"],[3,"&boxur;"],[3,"&boxul;"],[3,"&boxvr;"],[7,"&boxvl;"],[7,"&boxhd;"],[7,"&boxhu;"],[7,"&boxvh;"],[19,"&boxH;"],[0,"&boxV;"],[0,"&boxdR;"],[0,"&boxDr;"],[0,"&boxDR;"],[0,"&boxdL;"],[0,"&boxDl;"],[0,"&boxDL;"],[0,"&boxuR;"],[0,"&boxUr;"],[0,"&boxUR;"],[0,"&boxuL;"],[0,"&boxUl;"],[0,"&boxUL;"],[0,"&boxvR;"],[0,"&boxVr;"],[0,"&boxVR;"],[0,"&boxvL;"],[0,"&boxVl;"],[0,"&boxVL;"],[0,"&boxHd;"],[0,"&boxhD;"],[0,"&boxHD;"],[0,"&boxHu;"],[0,"&boxhU;"],[0,"&boxHU;"],[0,"&boxvH;"],[0,"&boxVh;"],[0,"&boxVH;"],[19,"&uhblk;"],[3,"&lhblk;"],[3,"&block;"],[8,"&blk14;"],[0,"&blk12;"],[0,"&blk34;"],[13,"&square;"],[8,"&blacksquare;"],[0,"&EmptyVerySmallSquare;"],[1,"&rect;"],[0,"&marker;"],[2,"&fltns;"],[1,"&bigtriangleup;"],[0,"&blacktriangle;"],[0,"&triangle;"],[2,"&blacktriangleright;"],[0,"&rtri;"],[3,"&bigtriangledown;"],[0,"&blacktriangledown;"],[0,"&dtri;"],[2,"&blacktriangleleft;"],[0,"&ltri;"],[6,"&loz;"],[0,"&cir;"],[32,"&tridot;"],[2,"&bigcirc;"],[8,"&ultri;"],[0,"&urtri;"],[0,"&lltri;"],[0,"&EmptySmallSquare;"],[0,"&FilledSmallSquare;"],[8,"&bigstar;"],[0,"&star;"],[7,"&phone;"],[49,"&female;"],[1,"&male;"],[29,"&spades;"],[2,"&clubs;"],[1,"&hearts;"],[0,"&diamondsuit;"],[3,"&sung;"],[2,"&flat;"],[0,"&natural;"],[0,"&sharp;"],[163,"&check;"],[3,"&cross;"],[8,"&malt;"],[21,"&sext;"],[33,"&VerticalSeparator;"],[25,"&lbbrk;"],[0,"&rbbrk;"],[84,"&bsolhsub;"],[0,"&suphsol;"],[28,"&LeftDoubleBracket;"],[0,"&RightDoubleBracket;"],[0,"&lang;"],[0,"&rang;"],[0,"&Lang;"],[0,"&Rang;"],[0,"&loang;"],[0,"&roang;"],[7,"&longleftarrow;"],[0,"&longrightarrow;"],[0,"&longleftrightarrow;"],[0,"&DoubleLongLeftArrow;"],[0,"&DoubleLongRightArrow;"],[0,"&DoubleLongLeftRightArrow;"],[1,"&longmapsto;"],[2,"&dzigrarr;"],[258,"&nvlArr;"],[0,"&nvrArr;"],[0,"&nvHarr;"],[0,"&Map;"],[6,"&lbarr;"],[0,"&bkarow;"],[0,"&lBarr;"],[0,"&dbkarow;"],[0,"&drbkarow;"],[0,"&DDotrahd;"],[0,"&UpArrowBar;"],[0,"&DownArrowBar;"],[2,"&Rarrtl;"],[2,"&latail;"],[0,"&ratail;"],[0,"&lAtail;"],[0,"&rAtail;"],[0,"&larrfs;"],[0,"&rarrfs;"],[0,"&larrbfs;"],[0,"&rarrbfs;"],[2,"&nwarhk;"],[0,"&nearhk;"],[0,"&hksearow;"],[0,"&hkswarow;"],[0,"&nwnear;"],[0,"&nesear;"],[0,"&seswar;"],[0,"&swnwar;"],[8,{v:"&rarrc;",n:824,o:"&nrarrc;"}],[1,"&cudarrr;"],[0,"&ldca;"],[0,"&rdca;"],[0,"&cudarrl;"],[0,"&larrpl;"],[2,"&curarrm;"],[0,"&cularrp;"],[7,"&rarrpl;"],[2,"&harrcir;"],[0,"&Uarrocir;"],[0,"&lurdshar;"],[0,"&ldrushar;"],[2,"&LeftRightVector;"],[0,"&RightUpDownVector;"],[0,"&DownLeftRightVector;"],[0,"&LeftUpDownVector;"],[0,"&LeftVectorBar;"],[0,"&RightVectorBar;"],[0,"&RightUpVectorBar;"],[0,"&RightDownVectorBar;"],[0,"&DownLeftVectorBar;"],[0,"&DownRightVectorBar;"],[0,"&LeftUpVectorBar;"],[0,"&LeftDownVectorBar;"],[0,"&LeftTeeVector;"],[0,"&RightTeeVector;"],[0,"&RightUpTeeVector;"],[0,"&RightDownTeeVector;"],[0,"&DownLeftTeeVector;"],[0,"&DownRightTeeVector;"],[0,"&LeftUpTeeVector;"],[0,"&LeftDownTeeVector;"],[0,"&lHar;"],[0,"&uHar;"],[0,"&rHar;"],[0,"&dHar;"],[0,"&luruhar;"],[0,"&ldrdhar;"],[0,"&ruluhar;"],[0,"&rdldhar;"],[0,"&lharul;"],[0,"&llhard;"],[0,"&rharul;"],[0,"&lrhard;"],[0,"&udhar;"],[0,"&duhar;"],[0,"&RoundImplies;"],[0,"&erarr;"],[0,"&simrarr;"],[0,"&larrsim;"],[0,"&rarrsim;"],[0,"&rarrap;"],[0,"&ltlarr;"],[1,"&gtrarr;"],[0,"&subrarr;"],[1,"&suplarr;"],[0,"&lfisht;"],[0,"&rfisht;"],[0,"&ufisht;"],[0,"&dfisht;"],[5,"&lopar;"],[0,"&ropar;"],[4,"&lbrke;"],[0,"&rbrke;"],[0,"&lbrkslu;"],[0,"&rbrksld;"],[0,"&lbrksld;"],[0,"&rbrkslu;"],[0,"&langd;"],[0,"&rangd;"],[0,"&lparlt;"],[0,"&rpargt;"],[0,"&gtlPar;"],[0,"&ltrPar;"],[3,"&vzigzag;"],[1,"&vangrt;"],[0,"&angrtvbd;"],[6,"&ange;"],[0,"&range;"],[0,"&dwangle;"],[0,"&uwangle;"],[0,"&angmsdaa;"],[0,"&angmsdab;"],[0,"&angmsdac;"],[0,"&angmsdad;"],[0,"&angmsdae;"],[0,"&angmsdaf;"],[0,"&angmsdag;"],[0,"&angmsdah;"],[0,"&bemptyv;"],[0,"&demptyv;"],[0,"&cemptyv;"],[0,"&raemptyv;"],[0,"&laemptyv;"],[0,"&ohbar;"],[0,"&omid;"],[0,"&opar;"],[1,"&operp;"],[1,"&olcross;"],[0,"&odsold;"],[1,"&olcir;"],[0,"&ofcir;"],[0,"&olt;"],[0,"&ogt;"],[0,"&cirscir;"],[0,"&cirE;"],[0,"&solb;"],[0,"&bsolb;"],[3,"&boxbox;"],[3,"&trisb;"],[0,"&rtriltri;"],[0,{v:"&LeftTriangleBar;",n:824,o:"&NotLeftTriangleBar;"}],[0,{v:"&RightTriangleBar;",n:824,o:"&NotRightTriangleBar;"}],[11,"&iinfin;"],[0,"&infintie;"],[0,"&nvinfin;"],[4,"&eparsl;"],[0,"&smeparsl;"],[0,"&eqvparsl;"],[5,"&blacklozenge;"],[8,"&RuleDelayed;"],[1,"&dsol;"],[9,"&bigodot;"],[0,"&bigoplus;"],[0,"&bigotimes;"],[1,"&biguplus;"],[1,"&bigsqcup;"],[5,"&iiiint;"],[0,"&fpartint;"],[2,"&cirfnint;"],[0,"&awint;"],[0,"&rppolint;"],[0,"&scpolint;"],[0,"&npolint;"],[0,"&pointint;"],[0,"&quatint;"],[0,"&intlarhk;"],[10,"&pluscir;"],[0,"&plusacir;"],[0,"&simplus;"],[0,"&plusdu;"],[0,"&plussim;"],[0,"&plustwo;"],[1,"&mcomma;"],[0,"&minusdu;"],[2,"&loplus;"],[0,"&roplus;"],[0,"&Cross;"],[0,"&timesd;"],[0,"&timesbar;"],[1,"&smashp;"],[0,"&lotimes;"],[0,"&rotimes;"],[0,"&otimesas;"],[0,"&Otimes;"],[0,"&odiv;"],[0,"&triplus;"],[0,"&triminus;"],[0,"&tritime;"],[0,"&intprod;"],[2,"&amalg;"],[0,"&capdot;"],[1,"&ncup;"],[0,"&ncap;"],[0,"&capand;"],[0,"&cupor;"],[0,"&cupcap;"],[0,"&capcup;"],[0,"&cupbrcap;"],[0,"&capbrcup;"],[0,"&cupcup;"],[0,"&capcap;"],[0,"&ccups;"],[0,"&ccaps;"],[2,"&ccupssm;"],[2,"&And;"],[0,"&Or;"],[0,"&andand;"],[0,"&oror;"],[0,"&orslope;"],[0,"&andslope;"],[1,"&andv;"],[0,"&orv;"],[0,"&andd;"],[0,"&ord;"],[1,"&wedbar;"],[6,"&sdote;"],[3,"&simdot;"],[2,{v:"&congdot;",n:824,o:"&ncongdot;"}],[0,"&easter;"],[0,"&apacir;"],[0,{v:"&apE;",n:824,o:"&napE;"}],[0,"&eplus;"],[0,"&pluse;"],[0,"&Esim;"],[0,"&Colone;"],[0,"&Equal;"],[1,"&ddotseq;"],[0,"&equivDD;"],[0,"&ltcir;"],[0,"&gtcir;"],[0,"&ltquest;"],[0,"&gtquest;"],[0,{v:"&leqslant;",n:824,o:"&nleqslant;"}],[0,{v:"&geqslant;",n:824,o:"&ngeqslant;"}],[0,"&lesdot;"],[0,"&gesdot;"],[0,"&lesdoto;"],[0,"&gesdoto;"],[0,"&lesdotor;"],[0,"&gesdotol;"],[0,"&lap;"],[0,"&gap;"],[0,"&lne;"],[0,"&gne;"],[0,"&lnap;"],[0,"&gnap;"],[0,"&lEg;"],[0,"&gEl;"],[0,"&lsime;"],[0,"&gsime;"],[0,"&lsimg;"],[0,"&gsiml;"],[0,"&lgE;"],[0,"&glE;"],[0,"&lesges;"],[0,"&gesles;"],[0,"&els;"],[0,"&egs;"],[0,"&elsdot;"],[0,"&egsdot;"],[0,"&el;"],[0,"&eg;"],[2,"&siml;"],[0,"&simg;"],[0,"&simlE;"],[0,"&simgE;"],[0,{v:"&LessLess;",n:824,o:"&NotNestedLessLess;"}],[0,{v:"&GreaterGreater;",n:824,o:"&NotNestedGreaterGreater;"}],[1,"&glj;"],[0,"&gla;"],[0,"&ltcc;"],[0,"&gtcc;"],[0,"&lescc;"],[0,"&gescc;"],[0,"&smt;"],[0,"&lat;"],[0,{v:"&smte;",n:65024,o:"&smtes;"}],[0,{v:"&late;",n:65024,o:"&lates;"}],[0,"&bumpE;"],[0,{v:"&PrecedesEqual;",n:824,o:"&NotPrecedesEqual;"}],[0,{v:"&sce;",n:824,o:"&NotSucceedsEqual;"}],[2,"&prE;"],[0,"&scE;"],[0,"&precneqq;"],[0,"&scnE;"],[0,"&prap;"],[0,"&scap;"],[0,"&precnapprox;"],[0,"&scnap;"],[0,"&Pr;"],[0,"&Sc;"],[0,"&subdot;"],[0,"&supdot;"],[0,"&subplus;"],[0,"&supplus;"],[0,"&submult;"],[0,"&supmult;"],[0,"&subedot;"],[0,"&supedot;"],[0,{v:"&subE;",n:824,o:"&nsubE;"}],[0,{v:"&supE;",n:824,o:"&nsupE;"}],[0,"&subsim;"],[0,"&supsim;"],[2,{v:"&subnE;",n:65024,o:"&varsubsetneqq;"}],[0,{v:"&supnE;",n:65024,o:"&varsupsetneqq;"}],[2,"&csub;"],[0,"&csup;"],[0,"&csube;"],[0,"&csupe;"],[0,"&subsup;"],[0,"&supsub;"],[0,"&subsub;"],[0,"&supsup;"],[0,"&suphsub;"],[0,"&supdsub;"],[0,"&forkv;"],[0,"&topfork;"],[0,"&mlcp;"],[8,"&Dashv;"],[1,"&Vdashl;"],[0,"&Barv;"],[0,"&vBar;"],[0,"&vBarv;"],[1,"&Vbar;"],[0,"&Not;"],[0,"&bNot;"],[0,"&rnmid;"],[0,"&cirmid;"],[0,"&midcir;"],[0,"&topcir;"],[0,"&nhpar;"],[0,"&parsim;"],[9,{v:"&parsl;",n:8421,o:"&nparsl;"}],[44343,{n:new Map(te([[56476,"&Ascr;"],[1,"&Cscr;"],[0,"&Dscr;"],[2,"&Gscr;"],[2,"&Jscr;"],[0,"&Kscr;"],[2,"&Nscr;"],[0,"&Oscr;"],[0,"&Pscr;"],[0,"&Qscr;"],[1,"&Sscr;"],[0,"&Tscr;"],[0,"&Uscr;"],[0,"&Vscr;"],[0,"&Wscr;"],[0,"&Xscr;"],[0,"&Yscr;"],[0,"&Zscr;"],[0,"&ascr;"],[0,"&bscr;"],[0,"&cscr;"],[0,"&dscr;"],[1,"&fscr;"],[1,"&hscr;"],[0,"&iscr;"],[0,"&jscr;"],[0,"&kscr;"],[0,"&lscr;"],[0,"&mscr;"],[0,"&nscr;"],[1,"&pscr;"],[0,"&qscr;"],[0,"&rscr;"],[0,"&sscr;"],[0,"&tscr;"],[0,"&uscr;"],[0,"&vscr;"],[0,"&wscr;"],[0,"&xscr;"],[0,"&yscr;"],[0,"&zscr;"],[52,"&Afr;"],[0,"&Bfr;"],[1,"&Dfr;"],[0,"&Efr;"],[0,"&Ffr;"],[0,"&Gfr;"],[2,"&Jfr;"],[0,"&Kfr;"],[0,"&Lfr;"],[0,"&Mfr;"],[0,"&Nfr;"],[0,"&Ofr;"],[0,"&Pfr;"],[0,"&Qfr;"],[1,"&Sfr;"],[0,"&Tfr;"],[0,"&Ufr;"],[0,"&Vfr;"],[0,"&Wfr;"],[0,"&Xfr;"],[0,"&Yfr;"],[1,"&afr;"],[0,"&bfr;"],[0,"&cfr;"],[0,"&dfr;"],[0,"&efr;"],[0,"&ffr;"],[0,"&gfr;"],[0,"&hfr;"],[0,"&ifr;"],[0,"&jfr;"],[0,"&kfr;"],[0,"&lfr;"],[0,"&mfr;"],[0,"&nfr;"],[0,"&ofr;"],[0,"&pfr;"],[0,"&qfr;"],[0,"&rfr;"],[0,"&sfr;"],[0,"&tfr;"],[0,"&ufr;"],[0,"&vfr;"],[0,"&wfr;"],[0,"&xfr;"],[0,"&yfr;"],[0,"&zfr;"],[0,"&Aopf;"],[0,"&Bopf;"],[1,"&Dopf;"],[0,"&Eopf;"],[0,"&Fopf;"],[0,"&Gopf;"],[1,"&Iopf;"],[0,"&Jopf;"],[0,"&Kopf;"],[0,"&Lopf;"],[0,"&Mopf;"],[1,"&Oopf;"],[3,"&Sopf;"],[0,"&Topf;"],[0,"&Uopf;"],[0,"&Vopf;"],[0,"&Wopf;"],[0,"&Xopf;"],[0,"&Yopf;"],[1,"&aopf;"],[0,"&bopf;"],[0,"&copf;"],[0,"&dopf;"],[0,"&eopf;"],[0,"&fopf;"],[0,"&gopf;"],[0,"&hopf;"],[0,"&iopf;"],[0,"&jopf;"],[0,"&kopf;"],[0,"&lopf;"],[0,"&mopf;"],[0,"&nopf;"],[0,"&oopf;"],[0,"&popf;"],[0,"&qopf;"],[0,"&ropf;"],[0,"&sopf;"],[0,"&topf;"],[0,"&uopf;"],[0,"&vopf;"],[0,"&wopf;"],[0,"&xopf;"],[0,"&yopf;"],[0,"&zopf;"]]))}],[8906,"&fflig;"],[0,"&filig;"],[0,"&fllig;"],[0,"&ffilig;"],[0,"&ffllig;"]]));const ne=/["&'<>$\x80-\uFFFF]/g,re=new Map([[34,"&quot;"],[38,"&amp;"],[39,"&apos;"],[60,"&lt;"],[62,"&gt;"]]),se=null!=String.prototype.codePointAt?(e,t)=>e.codePointAt(t):(e,t)=>55296==(64512&e.charCodeAt(t))?1024*(e.charCodeAt(t)-55296)+e.charCodeAt(t+1)-56320+65536:e.charCodeAt(t);function ie(e){let t,n="",r=0;for(;null!==(t=ne.exec(e));){const s=t.index,i=e.charCodeAt(s),a=re.get(i);void 0!==a?(n+=e.substring(r,s)+a,r=s+1):(n+=`${e.substring(r,s)}&#x${se(e,s).toString(16)};`,r=ne.lastIndex+=Number(55296==(64512&i)))}return n+e.substr(r)}function ae(e,t){return function(n){let r,s=0,i="";for(;r=e.exec(n);)s!==r.index&&(i+=n.substring(s,r.index)),i+=t.get(r[0].charCodeAt(0)),s=r.index+1;return i+n.substring(s)}}ae(/[&<>'"]/g,re);const oe=ae(/["&\u00A0]/g,new Map([[34,"&quot;"],[38,"&amp;"],[160,"&nbsp;"]])),ce=ae(/[&<>\u00A0]/g,new Map([[38,"&amp;"],[60,"&lt;"],[62,"&gt;"],[160,"&nbsp;"]]));var le,ue;!function(e){e[e.XML=0]="XML",e[e.HTML=1]="HTML"}(le||(le={})),function(e){e[e.UTF8=0]="UTF8",e[e.ASCII=1]="ASCII",e[e.Extensive=2]="Extensive",e[e.Attribute=3]="Attribute",e[e.Text=4]="Text"}(ue||(ue={}));const he=new Map(["altGlyph","altGlyphDef","altGlyphItem","animateColor","animateMotion","animateTransform","clipPath","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","foreignObject","glyphRef","linearGradient","radialGradient","textPath"].map((e=>[e.toLowerCase(),e]))),de=new Map(["definitionURL","attributeName","attributeType","baseFrequency","baseProfile","calcMode","clipPathUnits","diffuseConstant","edgeMode","filterUnits","glyphRef","gradientTransform","gradientUnits","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","lengthAdjust","limitingConeAngle","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","numOctaves","pathLength","patternContentUnits","patternTransform","patternUnits","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","specularConstant","specularExponent","spreadMethod","startOffset","stdDeviation","stitchTiles","surfaceScale","systemLanguage","tableValues","targetX","targetY","textLength","viewBox","viewTarget","xChannelSelector","yChannelSelector","zoomAndPan"].map((e=>[e.toLowerCase(),e]))),pe=new Set(["style","script","xmp","iframe","noembed","noframes","plaintext","noscript"]);function fe(e){return e.replace(/"/g,"&quot;")}const Ee=new Set(["area","base","basefont","br","col","command","embed","frame","hr","img","input","isindex","keygen","link","meta","param","source","track","wbr"]);function Te(e,t={}){const n="length"in e?e:[e];let r="";for(let e=0;e<n.length;e++)r+=Ae(n[e],t);return r}const me=Te;function Ae(e,t){switch(e.type){case d:return Te(e.children,t);case _:case f:return`<${e.data}>`;case E:return`\x3c!--${e.data}--\x3e`;case g:return function(e){return`<![CDATA[${e.children[0].data}]]>`}(e);case T:case m:case A:return function(e,t){var n;"foreign"===t.xmlMode&&(e.name=null!==(n=he.get(e.name))&&void 0!==n?n:e.name,e.parent&&ge.has(e.parent.name)&&(t={...t,xmlMode:!1})),!t.xmlMode&&_e.has(e.name)&&(t={...t,xmlMode:"foreign"});let r=`<${e.name}`;const s=function(e,t){var n;if(!e)return;const r=!1===(null!==(n=t.encodeEntities)&&void 0!==n?n:t.decodeEntities)?fe:t.xmlMode||"utf8"!==t.encodeEntities?ie:oe;return Object.keys(e).map((n=>{var s,i;const a=null!==(s=e[n])&&void 0!==s?s:"";return"foreign"===t.xmlMode&&(n=null!==(i=de.get(n))&&void 0!==i?i:n),t.emptyAttrs||t.xmlMode||""!==a?`${n}="${r(a)}"`:n})).join(" ")}(e.attribs,t);return s&&(r+=` ${s}`),0===e.children.length&&(t.xmlMode?!1!==t.selfClosingTags:t.selfClosingTags&&Ee.has(e.name))?(t.xmlMode||(r+=" "),r+="/>"):(r+=">",e.children.length>0&&(r+=Te(e.children,t)),!t.xmlMode&&Ee.has(e.name)||(r+=`</${e.name}>`)),r}(e,t);case p:return function(e,t){var n;let r=e.data||"";return!1===(null!==(n=t.encodeEntities)&&void 0!==n?n:t.decodeEntities)||!t.xmlMode&&e.parent&&pe.has(e.parent.name)||(r=t.xmlMode||"utf8"!==t.encodeEntities?ie(r):ce(r)),r}(e,t)}}const ge=new Set(["mi","mo","mn","ms","mtext","annotation-xml","foreignObject","desc","title"]),_e=new Set(["svg","math"]);function Se(e,t){return me(e,t)}function be(e,t){return v(e)?e.children.map((e=>Se(e,t))).join(""):""}function Ie(e){return Array.isArray(e)?e.map(Ie).join(""):L(e)?"br"===e.name?"\n":Ie(e.children):k(e)?Ie(e.children):P(e)?e.data:""}function Ne(e){return Array.isArray(e)?e.map(Ne).join(""):v(e)&&!w(e)?Ne(e.children):P(e)?e.data:""}function Ce(e){return Array.isArray(e)?e.map(Ce).join(""):v(e)&&(e.type===u.Tag||k(e))?Ce(e.children):P(e)?e.data:""}function De(e){return v(e)?e.children:[]}function Oe(e){return e.parent||null}function ye(e){const t=Oe(e);if(null!=t)return De(t);const n=[e];let{prev:r,next:s}=e;for(;null!=r;)n.unshift(r),({prev:r}=r);for(;null!=s;)n.push(s),({next:s}=s);return n}function Re(e,t){var n;return null===(n=e.attribs)||void 0===n?void 0:n[t]}function Le(e,t){return null!=e.attribs&&Object.prototype.hasOwnProperty.call(e.attribs,t)&&null!=e.attribs[t]}function ke(e){return e.name}function Pe(e){let{next:t}=e;for(;null!==t&&!L(t);)({next:t}=t);return t}function we(e){let{prev:t}=e;for(;null!==t&&!L(t);)({prev:t}=t);return t}function Me(e){if(e.prev&&(e.prev.next=e.next),e.next&&(e.next.prev=e.prev),e.parent){const t=e.parent.children,n=t.lastIndexOf(e);n>=0&&t.splice(n,1)}e.next=null,e.prev=null,e.parent=null}function Be(e,t){const n=t.prev=e.prev;n&&(n.next=t);const r=t.next=e.next;r&&(r.prev=t);const s=t.parent=e.parent;if(s){const n=s.children;n[n.lastIndexOf(e)]=t,e.parent=null}}function ve(e,t){if(Me(t),t.next=null,t.parent=e,e.children.push(t)>1){const n=e.children[e.children.length-2];n.next=t,t.prev=n}else t.prev=null}function xe(e,t){Me(t);const{parent:n}=e,r=e.next;if(t.next=r,t.prev=e,e.next=t,t.parent=n,r){if(r.prev=t,n){const e=n.children;e.splice(e.lastIndexOf(r),0,t)}}else n&&n.children.push(t)}function Ue(e,t){if(Me(t),t.parent=e,t.prev=null,1!==e.children.unshift(t)){const n=e.children[1];n.prev=t,t.next=n}else t.next=null}function Fe(e,t){Me(t);const{parent:n}=e;if(n){const r=n.children;r.splice(r.indexOf(e),0,t)}e.prev&&(e.prev.next=t),t.parent=n,t.prev=e.prev,t.next=e,e.prev=t}function He(e,t,n=!0,r=1/0){return Ge(e,Array.isArray(t)?t:[t],n,r)}function Ge(e,t,n,r){const s=[],i=[Array.isArray(t)?t:[t]],a=[0];for(;;){if(a[0]>=i[0].length){if(1===a.length)return s;i.shift(),a.shift();continue}const t=i[0][a[0]++];if(e(t)&&(s.push(t),--r<=0))return s;n&&v(t)&&t.children.length>0&&(a.unshift(0),i.unshift(t.children))}}function qe(e,t){return t.find(e)}function Ye(e,t,n=!0){const r=Array.isArray(t)?t:[t];for(let t=0;t<r.length;t++){const s=r[t];if(L(s)&&e(s))return s;if(n&&v(s)&&s.children.length>0){const t=Ye(e,s.children,!0);if(t)return t}}return null}function Ve(e,t){return(Array.isArray(t)?t:[t]).some((t=>L(t)&&e(t)||v(t)&&Ve(e,t.children)))}function je(e,t){const n=[],r=[Array.isArray(t)?t:[t]],s=[0];for(;;){if(s[0]>=r[0].length){if(1===r.length)return n;r.shift(),s.shift();continue}const t=r[0][s[0]++];L(t)&&e(t)&&n.push(t),v(t)&&t.children.length>0&&(s.unshift(0),r.unshift(t.children))}}const Qe={tag_name:e=>"function"==typeof e?t=>L(t)&&e(t.name):"*"===e?L:t=>L(t)&&t.name===e,tag_type:e=>"function"==typeof e?t=>e(t.type):t=>t.type===e,tag_contains:e=>"function"==typeof e?t=>P(t)&&e(t.data):t=>P(t)&&t.data===e};function We(e,t){return"function"==typeof t?n=>L(n)&&t(n.attribs[e]):n=>L(n)&&n.attribs[e]===t}function Ke(e,t){return n=>e(n)||t(n)}function Xe(e){const t=Object.keys(e).map((t=>{const n=e[t];return Object.prototype.hasOwnProperty.call(Qe,t)?Qe[t](n):We(t,n)}));return 0===t.length?null:t.reduce(Ke)}function $e(e,t){const n=Xe(e);return!n||n(t)}function ze(e,t,n,r=1/0){const s=Xe(e);return s?He(s,t,n,r):[]}function Je(e,t,n=!0){return Array.isArray(t)||(t=[t]),Ye(We("id",e),t,n)}function Ze(e,t,n=!0,r=1/0){return He(Qe.tag_name(e),t,n,r)}function et(e,t,n=!0,r=1/0){return He(We("class",e),t,n,r)}function tt(e,t,n=!0,r=1/0){return He(Qe.tag_type(e),t,n,r)}function nt(e){let t=e.length;for(;--t>=0;){const n=e[t];if(t>0&&e.lastIndexOf(n,t-1)>=0)e.splice(t,1);else for(let r=n.parent;r;r=r.parent)if(e.includes(r)){e.splice(t,1);break}}return e}var rt;function st(e,t){const n=[],r=[];if(e===t)return 0;let s=v(e)?e:e.parent;for(;s;)n.unshift(s),s=s.parent;for(s=v(t)?t:t.parent;s;)r.unshift(s),s=s.parent;const i=Math.min(n.length,r.length);let a=0;for(;a<i&&n[a]===r[a];)a++;if(0===a)return rt.DISCONNECTED;const o=n[a-1],c=o.children,l=n[a],u=r[a];return c.indexOf(l)>c.indexOf(u)?o===t?rt.FOLLOWING|rt.CONTAINED_BY:rt.FOLLOWING:o===e?rt.PRECEDING|rt.CONTAINS:rt.PRECEDING}function it(e){return(e=e.filter(((e,t,n)=>!n.includes(e,t+1)))).sort(((e,t)=>{const n=st(e,t);return n&rt.PRECEDING?-1:n&rt.FOLLOWING?1:0})),e}function at(e){const t=ut(pt,e);return t?"feed"===t.name?function(e){var t;const n=e.children,r={type:"atom",items:Ze("entry",n).map((e=>{var t;const{children:n}=e,r={media:lt(n)};dt(r,"id","id",n),dt(r,"title","title",n);const s=null===(t=ut("link",n))||void 0===t?void 0:t.attribs.href;s&&(r.link=s);const i=ht("summary",n)||ht("content",n);i&&(r.description=i);const a=ht("updated",n);return a&&(r.pubDate=new Date(a)),r}))};dt(r,"id","id",n),dt(r,"title","title",n);const s=null===(t=ut("link",n))||void 0===t?void 0:t.attribs.href;s&&(r.link=s),dt(r,"description","subtitle",n);const i=ht("updated",n);return i&&(r.updated=new Date(i)),dt(r,"author","email",n,!0),r}(t):function(e){var t,n;const r=null!==(n=null===(t=ut("channel",e.children))||void 0===t?void 0:t.children)&&void 0!==n?n:[],s={type:e.name.substr(0,3),id:"",items:Ze("item",e.children).map((e=>{const{children:t}=e,n={media:lt(t)};dt(n,"id","guid",t),dt(n,"title","title",t),dt(n,"link","link",t),dt(n,"description","description",t);const r=ht("pubDate",t)||ht("dc:date",t);return r&&(n.pubDate=new Date(r)),n}))};dt(s,"title","title",r),dt(s,"link","link",r),dt(s,"description","description",r);const i=ht("lastBuildDate",r);return i&&(s.updated=new Date(i)),dt(s,"author","managingEditor",r,!0),s}(t):null}!function(e){e[e.DISCONNECTED=1]="DISCONNECTED",e[e.PRECEDING=2]="PRECEDING",e[e.FOLLOWING=4]="FOLLOWING",e[e.CONTAINS=8]="CONTAINS",e[e.CONTAINED_BY=16]="CONTAINED_BY"}(rt||(rt={}));const ot=["url","type","lang"],ct=["fileSize","bitrate","framerate","samplingrate","channels","duration","height","width"];function lt(e){return Ze("media:content",e).map((e=>{const{attribs:t}=e,n={medium:t.medium,isDefault:!!t.isDefault};for(const e of ot)t[e]&&(n[e]=t[e]);for(const e of ct)t[e]&&(n[e]=parseInt(t[e],10));return t.expression&&(n.expression=t.expression),n}))}function ut(e,t){return Ze(e,t,!0,1)[0]}function ht(e,t,n=!1){return Ne(Ze(e,t,n,1)).trim()}function dt(e,t,n,r,s=!1){const i=ht(n,r,s);i&&(e[t]=i)}function pt(e){return"rss"===e||"feed"===e||"rdf:RDF"===e}const ft={_useHtmlParser2:!1};function Et(e,t){if(!e)return null!=t?t:ft;const n={_useHtmlParser2:!!e.xmlMode,...t,...e};return e.xml?(n._useHtmlParser2=!0,n.xmlMode=!0,!0!==e.xml&&Object.assign(n,e.xml)):e.xmlMode&&(n._useHtmlParser2=!0),n}function Tt(e,t,n){return e?e(null!=t?t:e._root.children,null,void 0,n).toString():""}function mt(e,t){return Tt(this,function(e){return"object"==typeof e&&null!=e&&!("length"in e)&&!("type"in e)}(e)?void(t=e):e,{...null==this?void 0:this._options,...Et(t)})}function At(e){return Tt(this,e,{...this._options,xmlMode:!0})}function gt(e){const t=null!=e?e:this?this.root():[];let n="";for(let e=0;e<t.length;e++)n+=Ne(t[e]);return n}function _t(e,t,n="boolean"==typeof t&&t){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t);const r=this.load(e,this._options,!1);return n||r("script").remove(),[...r.root()[0].children]}function St(){return this(this._root)}function bt(e,t){if(t===e)return!1;let n=t;for(;n&&n!==n.parent;)if(n=n.parent,n===e)return!0;return!1}function It(e){return this.root().extract(e)}function Nt(e,t){if(!Ct(e)||!Ct(t))return;let n=e.length;const r=+t.length;for(let s=0;s<r;s++)e[n++]=t[s];return e.length=n,e}function Ct(e){if(Array.isArray(e))return!0;if("object"!=typeof e||null===e||!("length"in e)||"number"!=typeof e.length||e.length<0)return!1;for(let t=0;t<e.length;t++)if(!(t in e))return!1;return!0}function Dt(e){return null!=e.cheerio}function Ot(e,t){const n=e.length;for(let r=0;r<n;r++)t(e[r],r);return e}var yt;function Rt(e){const t=e.indexOf("<");if(t<0||t>e.length-3)return!1;const n=e.charCodeAt(t+1);return(n>=yt.LowerA&&n<=yt.LowerZ||n>=yt.UpperA&&n<=yt.UpperZ||n===yt.Exclamation)&&e.includes(">",t+2)}!function(e){e[e.LowerA=97]="LowerA",e[e.LowerZ=122]="LowerZ",e[e.UpperA=65]="UpperA",e[e.UpperZ=90]="UpperZ",e[e.Exclamation=33]="Exclamation"}(yt||(yt={}));const Lt=Object.prototype.hasOwnProperty,kt=/\s+/,Pt="data-",wt=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,Mt=/^{[^]*}$|^\[[^]*]$/;function Bt(e,t,n){var r;if(e&&L(e))return null!==(r=e.attribs)&&void 0!==r||(e.attribs={}),t?Lt.call(e.attribs,t)?!n&&wt.test(t)?t:e.attribs[t]:"option"===e.name&&"value"===t?gt(e.children):"input"!==e.name||"radio"!==e.attribs.type&&"checkbox"!==e.attribs.type||"value"!==t?void 0:"on":e.attribs}function vt(e,t,n){null===n?jt(e,t):e.attribs[t]=`${n}`}function xt(e,t){if("object"==typeof e||void 0!==t){if("function"==typeof t){if("string"!=typeof e)throw new Error("Bad combination of arguments.");return Ot(this,((n,r)=>{L(n)&&vt(n,e,t.call(n,r,n.attribs[e]))}))}return Ot(this,(n=>{if(L(n))if("object"==typeof e)for(const t of Object.keys(e))vt(n,t,e[t]);else vt(n,e,t)}))}return arguments.length>1?this:Bt(this[0],e,this.options.xmlMode)}function Ut(e,t,n){return t in e?e[t]:!n&&wt.test(t)?void 0!==Bt(e,t,!1):Bt(e,t,n)}function Ft(e,t,n,r){t in e?e[t]=n:vt(e,t,!r&&wt.test(t)?n?"":null:`${n}`)}function Ht(e,t){var n;if("string"==typeof e&&void 0===t){const t=this[0];if(!t||!L(t))return;switch(e){case"style":{const e=this.css(),t=Object.keys(e);for(let n=0;n<t.length;n++)e[n]=t[n];return e.length=t.length,e}case"tagName":case"nodeName":return t.name.toUpperCase();case"href":case"src":{const r=null===(n=t.attribs)||void 0===n?void 0:n[e];return"undefined"==typeof URL||("href"!==e||"a"!==t.tagName&&"link"!==t.tagName)&&("src"!==e||"img"!==t.tagName&&"iframe"!==t.tagName&&"audio"!==t.tagName&&"video"!==t.tagName&&"source"!==t.tagName)||void 0===r||!this.options.baseURI?r:new URL(r,this.options.baseURI).href}case"innerText":return Ce(t);case"textContent":return Ne(t);case"outerHTML":return this.clone().wrap("<container />").parent().html();case"innerHTML":return this.html();default:return Ut(t,e,this.options.xmlMode)}}if("object"==typeof e||void 0!==t){if("function"==typeof t){if("object"==typeof e)throw new TypeError("Bad combination of arguments.");return Ot(this,((n,r)=>{L(n)&&Ft(n,e,t.call(n,r,Ut(n,e,this.options.xmlMode)),this.options.xmlMode)}))}return Ot(this,(n=>{if(L(n))if("object"==typeof e)for(const t of Object.keys(e))Ft(n,t,e[t],this.options.xmlMode);else Ft(n,e,t,this.options.xmlMode)}))}}function Gt(e,t,n){var r;null!==(r=e.data)&&void 0!==r||(e.data={}),"object"==typeof t?Object.assign(e.data,t):"string"==typeof t&&void 0!==n&&(e.data[t]=n)}function qt(e){if("null"===e)return null;if("true"===e)return!0;if("false"===e)return!1;const t=Number(e);if(e===String(t))return t;if(Mt.test(e))try{return JSON.parse(e)}catch{}return e}function Yt(e,t){var n;const r=this[0];if(!r||!L(r))return;const s=r;return null!==(n=s.data)&&void 0!==n||(s.data={}),null==e?function(e){for(const t of Object.keys(e.attribs)){if(!t.startsWith(Pt))continue;const n=t.slice(Pt.length).replace(/[._-](\w|$)/g,((e,t)=>t.toUpperCase()));Lt.call(e.data,n)||(e.data[n]=qt(e.attribs[t]))}return e.data}(s):"object"==typeof e||void 0!==t?(Ot(this,(n=>{L(n)&&("object"==typeof e?Gt(n,e):Gt(n,e,t))})),this):function(e,t){const n=Pt+t.replace(/[A-Z]/g,"-$&").toLowerCase(),r=e.data;return Lt.call(r,t)?r[t]:Lt.call(e.attribs,n)?r[t]=qt(e.attribs[n]):void 0}(s,e)}function Vt(e){const t=0===arguments.length,n=this[0];if(!n||!L(n))return t?void 0:this;switch(n.name){case"textarea":return this.text(e);case"select":{const n=this.find("option:selected");if(!t){if(null==this.attr("multiple")&&"object"==typeof e)return this;this.find("option").removeAttr("selected");const t="object"==typeof e?e:[e];for(const e of t)this.find(`option[value="${e}"]`).attr("selected","");return this}return this.attr("multiple")?n.toArray().map((e=>gt(e.children))):n.attr("value")}case"input":case"option":return t?this.attr("value"):this.attr("value",e)}}function jt(e,t){e.attribs&&Lt.call(e.attribs,t)&&delete e.attribs[t]}function Qt(e){return e?e.trim().split(kt):[]}function Wt(e){const t=Qt(e);for(const e of t)Ot(this,(t=>{L(t)&&jt(t,e)}));return this}function Kt(e){return this.toArray().some((t=>{const n=L(t)&&t.attribs.class;let r=-1;if(n&&e.length>0)for(;(r=n.indexOf(e,r+1))>-1;){const t=r+e.length;if((0===r||kt.test(n[r-1]))&&(t===n.length||kt.test(n[t])))return!0}return!1}))}function Xt(e){if("function"==typeof e)return Ot(this,((t,n)=>{if(L(t)){const r=t.attribs.class||"";Xt.call([t],e.call(t,n,r))}}));if(!e||"string"!=typeof e)return this;const t=e.split(kt),n=this.length;for(let e=0;e<n;e++){const n=this[e];if(!L(n))continue;const r=Bt(n,"class",!1);if(r){let e=` ${r} `;for(const n of t){const t=`${n} `;e.includes(` ${t}`)||(e+=t)}vt(n,"class",e.trim())}else vt(n,"class",t.join(" ").trim())}return this}function $t(e){if("function"==typeof e)return Ot(this,((t,n)=>{L(t)&&$t.call([t],e.call(t,n,t.attribs.class||""))}));const t=Qt(e),n=t.length,r=0===arguments.length;return Ot(this,(e=>{if(L(e))if(r)e.attribs.class="";else{const r=Qt(e.attribs.class);let s=!1;for(let e=0;e<n;e++){const n=r.indexOf(t[e]);n>=0&&(r.splice(n,1),s=!0,e--)}s&&(e.attribs.class=r.join(" "))}}))}function zt(e,t){if("function"==typeof e)return Ot(this,((n,r)=>{L(n)&&zt.call([n],e.call(n,r,n.attribs.class||"",t),t)}));if(!e||"string"!=typeof e)return this;const n=e.split(kt),r=n.length,s="boolean"==typeof t?t?1:-1:0,i=this.length;for(let e=0;e<i;e++){const t=this[e];if(!L(t))continue;const i=Qt(t.attribs.class);for(let e=0;e<r;e++){const t=i.indexOf(n[e]);s>=0&&t<0?i.push(n[e]):s<=0&&t>=0&&i.splice(t,1)}t.attribs.class=i.join(" ")}return this}var Jt,Zt;!function(e){e.Attribute="attribute",e.Pseudo="pseudo",e.PseudoElement="pseudo-element",e.Tag="tag",e.Universal="universal",e.Adjacent="adjacent",e.Child="child",e.Descendant="descendant",e.Parent="parent",e.Sibling="sibling",e.ColumnCombinator="column-combinator"}(Jt||(Jt={})),function(e){e.Any="any",e.Element="element",e.End="end",e.Equals="equals",e.Exists="exists",e.Hyphen="hyphen",e.Not="not",e.Start="start"}(Zt||(Zt={}));const en=/^[^\\#]?(?:\\(?:[\da-f]{1,6}\s?|.)|[\w\-\u00b0-\uFFFF])+/,tn=/\\([\da-f]{1,6}\s?|(\s)|.)/gi,nn=new Map([[126,Zt.Element],[94,Zt.Start],[36,Zt.End],[42,Zt.Any],[33,Zt.Not],[124,Zt.Hyphen]]),rn=new Set(["has","not","matches","is","where","host","host-context"]);function sn(e){switch(e.type){case Jt.Adjacent:case Jt.Child:case Jt.Descendant:case Jt.Parent:case Jt.Sibling:case Jt.ColumnCombinator:return!0;default:return!1}}const an=new Set(["contains","icontains"]);function on(e,t,n){const r=parseInt(t,16)-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)}function cn(e){return e.replace(tn,on)}function ln(e){return 39===e||34===e}function un(e){return 32===e||9===e||10===e||12===e||13===e}function hn(e){const t=[],n=dn(t,`${e}`,0);if(n<e.length)throw new Error(`Unmatched selector: ${e.slice(n)}`);return t}function dn(e,t,n){let r=[];function s(e){const r=t.slice(n+e).match(en);if(!r)throw new Error(`Expected name, found ${t.slice(n)}`);const[s]=r;return n+=e+s.length,cn(s)}function i(e){for(n+=e;n<t.length&&un(t.charCodeAt(n));)n++}function a(){const e=n+=1;let r=1;for(;r>0&&n<t.length;n++)40!==t.charCodeAt(n)||o(n)?41!==t.charCodeAt(n)||o(n)||r--:r++;if(r)throw new Error("Parenthesis not matched");return cn(t.slice(e,n-1))}function o(e){let n=0;for(;92===t.charCodeAt(--e);)n++;return!(1&~n)}function c(){if(r.length>0&&sn(r[r.length-1]))throw new Error("Did not expect successive traversals.")}function l(e){r.length>0&&r[r.length-1].type===Jt.Descendant?r[r.length-1].type=e:(c(),r.push({type:e}))}function u(e,t){r.push({type:Jt.Attribute,name:e,action:t,value:s(1),namespace:null,ignoreCase:"quirks"})}function h(){if(r.length&&r[r.length-1].type===Jt.Descendant&&r.pop(),0===r.length)throw new Error("Empty sub-selector");e.push(r)}if(i(0),t.length===n)return n;e:for(;n<t.length;){const e=t.charCodeAt(n);switch(e){case 32:case 9:case 10:case 12:case 13:0!==r.length&&r[0].type===Jt.Descendant||(c(),r.push({type:Jt.Descendant})),i(1);break;case 62:l(Jt.Child),i(1);break;case 60:l(Jt.Parent),i(1);break;case 126:l(Jt.Sibling),i(1);break;case 43:l(Jt.Adjacent),i(1);break;case 46:u("class",Zt.Element);break;case 35:u("id",Zt.Equals);break;case 91:{let e;i(1);let a=null;124===t.charCodeAt(n)?e=s(1):t.startsWith("*|",n)?(a="*",e=s(2)):(e=s(0),124===t.charCodeAt(n)&&61!==t.charCodeAt(n+1)&&(a=e,e=s(1))),i(0);let c=Zt.Exists;const l=nn.get(t.charCodeAt(n));if(l){if(c=l,61!==t.charCodeAt(n+1))throw new Error("Expected `=`");i(2)}else 61===t.charCodeAt(n)&&(c=Zt.Equals,i(1));let u="",h=null;if("exists"!==c){if(ln(t.charCodeAt(n))){const e=t.charCodeAt(n);let r=n+1;for(;r<t.length&&(t.charCodeAt(r)!==e||o(r));)r+=1;if(t.charCodeAt(r)!==e)throw new Error("Attribute value didn't end");u=cn(t.slice(n+1,r)),n=r+1}else{const e=n;for(;n<t.length&&(!un(t.charCodeAt(n))&&93!==t.charCodeAt(n)||o(n));)n+=1;u=cn(t.slice(e,n))}i(0);const e=32|t.charCodeAt(n);115===e?(h=!1,i(1)):105===e&&(h=!0,i(1))}if(93!==t.charCodeAt(n))throw new Error("Attribute selector didn't terminate");n+=1;const d={type:Jt.Attribute,name:e,action:c,value:u,namespace:a,ignoreCase:h};r.push(d);break}case 58:{if(58===t.charCodeAt(n+1)){r.push({type:Jt.PseudoElement,name:s(2).toLowerCase(),data:40===t.charCodeAt(n)?a():null});continue}const e=s(1).toLowerCase();let i=null;if(40===t.charCodeAt(n))if(rn.has(e)){if(ln(t.charCodeAt(n+1)))throw new Error(`Pseudo-selector ${e} cannot be quoted`);if(i=[],n=dn(i,t,n+1),41!==t.charCodeAt(n))throw new Error(`Missing closing parenthesis in :${e} (${t})`);n+=1}else{if(i=a(),an.has(e)){const e=i.charCodeAt(0);e===i.charCodeAt(i.length-1)&&ln(e)&&(i=i.slice(1,-1))}i=cn(i)}r.push({type:Jt.Pseudo,name:e,data:i});break}case 44:h(),r=[],i(1);break;default:{if(t.startsWith("/*",n)){const e=t.indexOf("*/",n+2);if(e<0)throw new Error("Comment was not terminated");n=e+2,0===r.length&&i(0);break}let a,o=null;if(42===e)n+=1,a="*";else if(124===e){if(a="",124===t.charCodeAt(n+1)){l(Jt.ColumnCombinator),i(2);break}}else{if(!en.test(t.slice(n)))break e;a=s(0)}124===t.charCodeAt(n)&&124!==t.charCodeAt(n+1)&&(o=a,42===t.charCodeAt(n+1)?(a="*",n+=2):a=s(1)),r.push("*"===a?{type:Jt.Universal,namespace:o}:{type:Jt.Tag,name:a,namespace:o})}}}return h(),n}var pn=n(264);const fn=new Map([[Jt.Universal,50],[Jt.Tag,30],[Jt.Attribute,1],[Jt.Pseudo,0]]);function En(e){return!fn.has(e.type)}const Tn=new Map([[Zt.Exists,10],[Zt.Equals,8],[Zt.Not,7],[Zt.Start,6],[Zt.End,6],[Zt.Any,5]]);function mn(e){const t=e.map(An);for(let n=1;n<e.length;n++){const r=t[n];if(!(r<0))for(let s=n-1;s>=0&&r<t[s];s--){const n=e[s+1];e[s+1]=e[s],e[s]=n,t[s+1]=t[s],t[s]=r}}}function An(e){var t,n;let r=null!==(t=fn.get(e.type))&&void 0!==t?t:-1;return e.type===Jt.Attribute?(r=null!==(n=Tn.get(e.action))&&void 0!==n?n:4,e.action===Zt.Equals&&"id"===e.name&&(r=9),e.ignoreCase&&(r>>=1)):e.type===Jt.Pseudo&&(e.data?"has"===e.name||"contains"===e.name?r=0:Array.isArray(e.data)?(r=Math.min(...e.data.map((e=>Math.min(...e.map(An))))),r<0&&(r=0)):r=2:r=3),r}const gn=/[-[\]{}()*+?.,\\^$|#\s]/g;function _n(e){return e.replace(gn,"\\$&")}const Sn=new Set(["accept","accept-charset","align","alink","axis","bgcolor","charset","checked","clear","codetype","color","compact","declare","defer","dir","direction","disabled","enctype","face","frame","hreflang","http-equiv","lang","language","link","media","method","multiple","nohref","noresize","noshade","nowrap","readonly","rel","rev","rules","scope","scrolling","selected","shape","target","text","type","valign","valuetype","vlink"]);function bn(e,t){return"boolean"==typeof e.ignoreCase?e.ignoreCase:"quirks"===e.ignoreCase?!!t.quirksMode:!t.xmlMode&&Sn.has(e.name)}const In={equals(e,t,n){const{adapter:r}=n,{name:s}=t;let{value:i}=t;return bn(t,n)?(i=i.toLowerCase(),t=>{const n=r.getAttributeValue(t,s);return null!=n&&n.length===i.length&&n.toLowerCase()===i&&e(t)}):t=>r.getAttributeValue(t,s)===i&&e(t)},hyphen(e,t,n){const{adapter:r}=n,{name:s}=t;let{value:i}=t;const a=i.length;return bn(t,n)?(i=i.toLowerCase(),function(t){const n=r.getAttributeValue(t,s);return null!=n&&(n.length===a||"-"===n.charAt(a))&&n.substr(0,a).toLowerCase()===i&&e(t)}):function(t){const n=r.getAttributeValue(t,s);return null!=n&&(n.length===a||"-"===n.charAt(a))&&n.substr(0,a)===i&&e(t)}},element(e,t,n){const{adapter:r}=n,{name:s,value:i}=t;if(/\s/.test(i))return pn.falseFunc;const a=new RegExp(`(?:^|\\s)${_n(i)}(?:$|\\s)`,bn(t,n)?"i":"");return function(t){const n=r.getAttributeValue(t,s);return null!=n&&n.length>=i.length&&a.test(n)&&e(t)}},exists:(e,{name:t},{adapter:n})=>r=>n.hasAttrib(r,t)&&e(r),start(e,t,n){const{adapter:r}=n,{name:s}=t;let{value:i}=t;const a=i.length;return 0===a?pn.falseFunc:bn(t,n)?(i=i.toLowerCase(),t=>{const n=r.getAttributeValue(t,s);return null!=n&&n.length>=a&&n.substr(0,a).toLowerCase()===i&&e(t)}):t=>{var n;return!!(null===(n=r.getAttributeValue(t,s))||void 0===n?void 0:n.startsWith(i))&&e(t)}},end(e,t,n){const{adapter:r}=n,{name:s}=t;let{value:i}=t;const a=-i.length;return 0===a?pn.falseFunc:bn(t,n)?(i=i.toLowerCase(),t=>{var n;return(null===(n=r.getAttributeValue(t,s))||void 0===n?void 0:n.substr(a).toLowerCase())===i&&e(t)}):t=>{var n;return!!(null===(n=r.getAttributeValue(t,s))||void 0===n?void 0:n.endsWith(i))&&e(t)}},any(e,t,n){const{adapter:r}=n,{name:s,value:i}=t;if(""===i)return pn.falseFunc;if(bn(t,n)){const t=new RegExp(_n(i),"i");return function(n){const a=r.getAttributeValue(n,s);return null!=a&&a.length>=i.length&&t.test(a)&&e(n)}}return t=>{var n;return!!(null===(n=r.getAttributeValue(t,s))||void 0===n?void 0:n.includes(i))&&e(t)}},not(e,t,n){const{adapter:r}=n,{name:s}=t;let{value:i}=t;return""===i?t=>!!r.getAttributeValue(t,s)&&e(t):bn(t,n)?(i=i.toLowerCase(),t=>{const n=r.getAttributeValue(t,s);return(null==n||n.length!==i.length||n.toLowerCase()!==i)&&e(t)}):t=>r.getAttributeValue(t,s)!==i&&e(t)}},Nn=new Set([9,10,12,13,32]),Cn="0".charCodeAt(0),Dn="9".charCodeAt(0);function On(e){return function(e){const t=e[0],n=e[1]-1;if(n<0&&t<=0)return pn.falseFunc;if(-1===t)return e=>e<=n;if(0===t)return e=>e===n;if(1===t)return n<0?pn.trueFunc:e=>e>=n;const r=Math.abs(t),s=(n%r+r)%r;return t>1?e=>e>=n&&e%r===s:e=>e<=n&&e%r===s}(function(e){if("even"===(e=e.trim().toLowerCase()))return[2,0];if("odd"===e)return[2,1];let t=0,n=0,r=i(),s=a();if(t<e.length&&"n"===e.charAt(t)&&(t++,n=r*(null!=s?s:1),o(),t<e.length?(r=i(),o(),s=a()):r=s=0),null===s||t<e.length)throw new Error(`n-th rule couldn't be parsed ('${e}')`);return[n,r*s];function i(){return"-"===e.charAt(t)?(t++,-1):("+"===e.charAt(t)&&t++,1)}function a(){const n=t;let r=0;for(;t<e.length&&e.charCodeAt(t)>=Cn&&e.charCodeAt(t)<=Dn;)r=10*r+(e.charCodeAt(t)-Cn),t++;return t===n?null:r}function o(){for(;t<e.length&&Nn.has(e.charCodeAt(t));)t++}}(e))}function yn(e,t){return n=>{const r=t.getParent(n);return null!=r&&t.isTag(r)&&e(n)}}const Rn={contains:(e,t,{adapter:n})=>function(r){return e(r)&&n.getText(r).includes(t)},icontains(e,t,{adapter:n}){const r=t.toLowerCase();return function(t){return e(t)&&n.getText(t).toLowerCase().includes(r)}},"nth-child"(e,t,{adapter:n,equals:r}){const s=On(t);return s===pn.falseFunc?pn.falseFunc:s===pn.trueFunc?yn(e,n):function(t){const i=n.getSiblings(t);let a=0;for(let e=0;e<i.length&&!r(t,i[e]);e++)n.isTag(i[e])&&a++;return s(a)&&e(t)}},"nth-last-child"(e,t,{adapter:n,equals:r}){const s=On(t);return s===pn.falseFunc?pn.falseFunc:s===pn.trueFunc?yn(e,n):function(t){const i=n.getSiblings(t);let a=0;for(let e=i.length-1;e>=0&&!r(t,i[e]);e--)n.isTag(i[e])&&a++;return s(a)&&e(t)}},"nth-of-type"(e,t,{adapter:n,equals:r}){const s=On(t);return s===pn.falseFunc?pn.falseFunc:s===pn.trueFunc?yn(e,n):function(t){const i=n.getSiblings(t);let a=0;for(let e=0;e<i.length;e++){const s=i[e];if(r(t,s))break;n.isTag(s)&&n.getName(s)===n.getName(t)&&a++}return s(a)&&e(t)}},"nth-last-of-type"(e,t,{adapter:n,equals:r}){const s=On(t);return s===pn.falseFunc?pn.falseFunc:s===pn.trueFunc?yn(e,n):function(t){const i=n.getSiblings(t);let a=0;for(let e=i.length-1;e>=0;e--){const s=i[e];if(r(t,s))break;n.isTag(s)&&n.getName(s)===n.getName(t)&&a++}return s(a)&&e(t)}},root:(e,t,{adapter:n})=>t=>{const r=n.getParent(t);return(null==r||!n.isTag(r))&&e(t)},scope(e,t,n,r){const{equals:s}=n;return r&&0!==r.length?1===r.length?t=>s(r[0],t)&&e(t):t=>r.includes(t)&&e(t):Rn.root(e,t,n)},hover:Ln("isHovered"),visited:Ln("isVisited"),active:Ln("isActive")};function Ln(e){return function(t,n,{adapter:r}){const s=r[e];return"function"!=typeof s?pn.falseFunc:function(e){return s(e)&&t(e)}}}const kn={empty:(e,{adapter:t})=>!t.getChildren(e).some((e=>t.isTag(e)||""!==t.getText(e))),"first-child"(e,{adapter:t,equals:n}){if(t.prevElementSibling)return null==t.prevElementSibling(e);const r=t.getSiblings(e).find((e=>t.isTag(e)));return null!=r&&n(e,r)},"last-child"(e,{adapter:t,equals:n}){const r=t.getSiblings(e);for(let s=r.length-1;s>=0;s--){if(n(e,r[s]))return!0;if(t.isTag(r[s]))break}return!1},"first-of-type"(e,{adapter:t,equals:n}){const r=t.getSiblings(e),s=t.getName(e);for(let i=0;i<r.length;i++){const a=r[i];if(n(e,a))return!0;if(t.isTag(a)&&t.getName(a)===s)break}return!1},"last-of-type"(e,{adapter:t,equals:n}){const r=t.getSiblings(e),s=t.getName(e);for(let i=r.length-1;i>=0;i--){const a=r[i];if(n(e,a))return!0;if(t.isTag(a)&&t.getName(a)===s)break}return!1},"only-of-type"(e,{adapter:t,equals:n}){const r=t.getName(e);return t.getSiblings(e).every((s=>n(e,s)||!t.isTag(s)||t.getName(s)!==r))},"only-child":(e,{adapter:t,equals:n})=>t.getSiblings(e).every((r=>n(e,r)||!t.isTag(r)))};function Pn(e,t,n,r){if(null===n){if(e.length>r)throw new Error(`Pseudo-class :${t} requires an argument`)}else if(e.length===r)throw new Error(`Pseudo-class :${t} doesn't have any arguments`)}const wn={"any-link":":is(a, area, link)[href]",link:":any-link:not(:visited)",disabled:":is(\n        :is(button, input, select, textarea, optgroup, option)[disabled],\n        optgroup[disabled] > option,\n        fieldset[disabled]:not(fieldset[disabled] legend:first-of-type *)\n    )",enabled:":not(:disabled)",checked:":is(:is(input[type=radio], input[type=checkbox])[checked], option:selected)",required:":is(input, select, textarea)[required]",optional:":is(input, select, textarea):not([required])",selected:"option:is([selected], select:not([multiple]):not(:has(> option[selected])) > :first-of-type)",checkbox:"[type=checkbox]",file:"[type=file]",password:"[type=password]",radio:"[type=radio]",reset:"[type=reset]",image:"[type=image]",submit:"[type=submit]",parent:":not(:empty)",header:":is(h1, h2, h3, h4, h5, h6)",button:":is(button, input[type=button])",input:":is(input, textarea, select, button)",text:"input:is(:not([type!='']), [type=text])"},Mn={};function Bn(e,t){return e===pn.falseFunc?pn.falseFunc:n=>t.isTag(n)&&e(n)}function vn(e,t){const n=t.getSiblings(e);if(n.length<=1)return[];const r=n.indexOf(e);return r<0||r===n.length-1?[]:n.slice(r+1).filter(t.isTag)}function xn(e){return{xmlMode:!!e.xmlMode,lowerCaseAttributeNames:!!e.lowerCaseAttributeNames,lowerCaseTags:!!e.lowerCaseTags,quirksMode:!!e.quirksMode,cacheResults:!!e.cacheResults,pseudos:e.pseudos,adapter:e.adapter,equals:e.equals}}const Un=(e,t,n,r,s)=>{const i=s(t,xn(n),r);return i===pn.trueFunc?e:i===pn.falseFunc?pn.falseFunc:t=>i(t)&&e(t)},Fn={is:Un,matches:Un,where:Un,not(e,t,n,r,s){const i=s(t,xn(n),r);return i===pn.falseFunc?e:i===pn.trueFunc?pn.falseFunc:t=>!i(t)&&e(t)},has(e,t,n,r,s){const{adapter:i}=n,a=xn(n);a.relativeSelector=!0;const o=t.some((e=>e.some(En)))?[Mn]:void 0,c=s(t,a,o);if(c===pn.falseFunc)return pn.falseFunc;const l=Bn(c,i);if(o&&c!==pn.trueFunc){const{shouldTestNextSiblings:t=!1}=c;return n=>{if(!e(n))return!1;o[0]=n;const r=i.getChildren(n),s=t?[...r,...vn(n,i)]:r;return i.existsOne(l,s)}}return t=>e(t)&&i.existsOne(l,i.getChildren(t))}};function Hn(e,t){const n=t.getParent(e);return n&&t.isTag(n)?n:null}function Gn(e,t,n){return Qn("string"==typeof e?hn(e):e,t,n)}function qn(e){return e.type===Jt.Pseudo&&("scope"===e.name||Array.isArray(e.data)&&e.data.some((e=>e.some(qn))))}const Yn={type:Jt.Descendant},Vn={type:"_flexibleDescendant"},jn={type:Jt.Pseudo,name:"scope",data:null};function Qn(e,t,n){var r;e.forEach(mn),n=null!==(r=t.context)&&void 0!==r?r:n;const s=Array.isArray(n),i=n&&(Array.isArray(n)?n:[n]);if(!1!==t.relativeSelector)!function(e,{adapter:t},n){const r=!!(null==n?void 0:n.every((e=>{const n=t.isTag(e)&&t.getParent(e);return e===Mn||n&&t.isTag(n)})));for(const t of e){if(t.length>0&&En(t[0])&&t[0].type!==Jt.Descendant);else{if(!r||t.some(qn))continue;t.unshift(Yn)}t.unshift(jn)}}(e,t,i);else if(e.some((e=>e.length>0&&En(e[0]))))throw new Error("Relative selectors are not allowed when the `relativeSelector` option is disabled");let a=!1;const o=e.map((e=>{if(e.length>=2){const[t,n]=e;t.type!==Jt.Pseudo||"scope"!==t.name||(s&&n.type===Jt.Descendant?e[1]=Vn:n.type!==Jt.Adjacent&&n.type!==Jt.Sibling||(a=!0))}return function(e,t,n){var r;return e.reduce(((e,r)=>e===pn.falseFunc?pn.falseFunc:function(e,t,n,r,s){const{adapter:i,equals:a}=n;switch(t.type){case Jt.PseudoElement:throw new Error("Pseudo-elements are not supported by css-select");case Jt.ColumnCombinator:throw new Error("Column combinators are not yet supported by css-select");case Jt.Attribute:if(null!=t.namespace)throw new Error("Namespaced attributes are not yet supported by css-select");return n.xmlMode&&!n.lowerCaseAttributeNames||(t.name=t.name.toLowerCase()),In[t.action](e,t,n);case Jt.Pseudo:return function(e,t,n,r,s){var i;const{name:a,data:o}=t;if(Array.isArray(o)){if(!(a in Fn))throw new Error(`Unknown pseudo-class :${a}(${o})`);return Fn[a](e,o,n,r,s)}const c=null===(i=n.pseudos)||void 0===i?void 0:i[a],l="string"==typeof c?c:wn[a];if("string"==typeof l){if(null!=o)throw new Error(`Pseudo ${a} doesn't have any arguments`);const t=hn(l);return Fn.is(e,t,n,r,s)}if("function"==typeof c)return Pn(c,a,o,1),t=>c(t,o)&&e(t);if(a in Rn)return Rn[a](e,o,n,r);if(a in kn){const t=kn[a];return Pn(t,a,o,2),r=>t(r,n,o)&&e(r)}throw new Error(`Unknown pseudo-class :${a}`)}(e,t,n,r,s);case Jt.Tag:{if(null!=t.namespace)throw new Error("Namespaced tag names are not yet supported by css-select");let{name:r}=t;return n.xmlMode&&!n.lowerCaseTags||(r=r.toLowerCase()),function(t){return i.getName(t)===r&&e(t)}}case Jt.Descendant:{if(!1===n.cacheResults||"undefined"==typeof WeakSet)return function(t){let n=t;for(;n=Hn(n,i);)if(e(n))return!0;return!1};const t=new WeakSet;return function(n){let r=n;for(;r=Hn(r,i);)if(!t.has(r)){if(i.isTag(r)&&e(r))return!0;t.add(r)}return!1}}case"_flexibleDescendant":return function(t){let n=t;do{if(e(n))return!0}while(n=Hn(n,i));return!1};case Jt.Parent:return function(t){return i.getChildren(t).some((t=>i.isTag(t)&&e(t)))};case Jt.Child:return function(t){const n=i.getParent(t);return null!=n&&i.isTag(n)&&e(n)};case Jt.Sibling:return function(t){const n=i.getSiblings(t);for(let r=0;r<n.length;r++){const s=n[r];if(a(t,s))break;if(i.isTag(s)&&e(s))return!0}return!1};case Jt.Adjacent:return i.prevElementSibling?function(t){const n=i.prevElementSibling(t);return null!=n&&e(n)}:function(t){const n=i.getSiblings(t);let r;for(let e=0;e<n.length;e++){const s=n[e];if(a(t,s))break;i.isTag(s)&&(r=s)}return!!r&&e(r)};case Jt.Universal:if(null!=t.namespace&&"*"!==t.namespace)throw new Error("Namespaced universal selectors are not yet supported by css-select");return e}}(e,r,t,n,Qn)),null!==(r=t.rootFunc)&&void 0!==r?r:pn.trueFunc)}(e,t,i)})).reduce(Wn,pn.falseFunc);return o.shouldTestNextSiblings=a,o}function Wn(e,t){return t===pn.falseFunc||e===pn.trueFunc?e:e===pn.falseFunc||t===pn.trueFunc?t:function(n){return e(n)||t(n)}}const Kn=(e,t)=>e===t,Xn={adapter:r,equals:Kn};function $n(e){var t,n,s,i;const a=null!=e?e:Xn;return null!==(t=a.adapter)&&void 0!==t||(a.adapter=r),null!==(n=a.equals)&&void 0!==n||(a.equals=null!==(i=null===(s=a.adapter)||void 0===s?void 0:s.equals)&&void 0!==i?i:Kn),a}function zn(e){return function(t,n,r){const s=$n(n);return e(t,s,r)}}zn((function(e,t,n){return Bn(Gn(e,t,n),t.adapter)})),zn(Gn);const Jn=zn(Qn);function Zn(e){return function(t,n,r){const s=$n(r);"function"!=typeof t&&(t=Gn(t,s,n));const i=er(n,s.adapter,t.shouldTestNextSiblings);return e(t,i,s)}}function er(e,t,n=!1){return n&&(e=function(e,t){const n=Array.isArray(e)?e.slice(0):[e],r=n.length;for(let e=0;e<r;e++){const r=vn(n[e],t);n.push(...r)}return n}(e,t)),Array.isArray(e)?t.removeSubsets(e):t.getChildren(e)}Zn(((e,t,n)=>e!==pn.falseFunc&&t&&0!==t.length?n.adapter.findAll(e,t):[])),Zn(((e,t,n)=>e!==pn.falseFunc&&t&&0!==t.length?n.adapter.findOne(e,t):null));const tr=new Set(["first","last","eq","gt","nth","lt","even","odd"]);function nr(e){return"pseudo"===e.type&&(!!tr.has(e.name)||!("not"!==e.name||!Array.isArray(e.data))&&e.data.some((e=>e.some(nr))))}function rr(e){const t=[],n=[];for(const r of e)r.some(nr)?t.push(r):n.push(r);return[n,t]}const sr={type:Jt.Universal,namespace:null},ir={type:Jt.Pseudo,name:"scope",data:null};function ar(e,t,n={}){return or([e],t,n)}function or(e,t,n={}){if("function"==typeof t)return e.some(t);const[r,s]=rr(hn(t));return r.length>0&&e.some(Jn(r,n))||s.some((t=>ur(t,e,n).length>0))}function cr(e,t,n={}){return lr(hn(e),t,n)}function lr(e,t,n){if(0===t.length)return[];const[r,s]=rr(e);let i;if(r.length){const e=fr(t,r,n);if(0===s.length)return e;e.length&&(i=new Set(e))}for(let e=0;e<s.length&&(null==i?void 0:i.size)!==t.length;e++){const r=s[e];if(0===(i?t.filter((e=>L(e)&&!i.has(e))):t).length)break;const a=ur(r,t,n);if(a.length)if(i)a.forEach((e=>i.add(e)));else{if(e===s.length-1)return a;i=new Set(a)}}return void 0!==i?i.size===t.length?t:t.filter((e=>i.has(e))):[]}function ur(e,t,n){var r;if(e.some(sn)){const s=null!==(r=n.root)&&void 0!==r?r:function(e){for(;e.parent;)e=e.parent;return e}(t[0]),i={...n,context:t,relativeSelector:!1};return e.push(ir),hr(s,e,i,!0,t.length)}return hr(t,e,n,!1,t.length)}function hr(e,t,n,s,i){const a=t.findIndex(nr),o=t.slice(0,a),c=t[a],l=t.length-1===a?i:1/0,u=function(e,t,n){const r=null!=t?parseInt(t,10):NaN;switch(e){case"first":return 1;case"nth":case"eq":return isFinite(r)?r>=0?r+1:1/0:0;case"lt":return isFinite(r)?r>=0?Math.min(r,n):1/0:0;case"gt":return isFinite(r)?1/0:0;case"odd":return 2*n;case"even":return 2*n-1;case"last":case"not":return 1/0}}(c.name,c.data,l);if(0===u)return[];const h=(0!==o.length||Array.isArray(e)?0===o.length?(Array.isArray(e)?e:[e]).filter(L):s||o.some(sn)?dr(e,[o],n,u):fr(e,[o],n):De(e).filter(L)).slice(0,u);let d=function(e,t,n,r){const s="string"==typeof n?parseInt(n,10):NaN;switch(e){case"first":case"lt":return t;case"last":return t.length>0?[t[t.length-1]]:t;case"nth":case"eq":return isFinite(s)&&Math.abs(s)<t.length?[s<0?t[t.length+s]:t[s]]:[];case"gt":return isFinite(s)?t.slice(s+1):[];case"even":return t.filter(((e,t)=>t%2==0));case"odd":return t.filter(((e,t)=>t%2==1));case"not":{const e=new Set(lr(n,t,r));return t.filter((t=>!e.has(t)))}}}(c.name,h,c.data,n);if(0===d.length||t.length===a+1)return d;const p=t.slice(a+1),f=p.some(sn);if(f){if(sn(p[0])){const{type:e}=p[0];e!==Jt.Sibling&&e!==Jt.Adjacent||(d=er(d,r,!0)),p.unshift(sr)}n={...n,relativeSelector:!1,rootFunc:e=>d.includes(e)}}else n.rootFunc&&n.rootFunc!==pn.trueFunc&&(n={...n,rootFunc:pn.trueFunc});return p.some(nr)?hr(d,p,n,!1,i):f?dr(d,[p],n,i):fr(d,[p],n)}function dr(e,t,n,r){return pr(e,Jn(t,n,e),r)}function pr(e,t,n=1/0){return Ge((e=>L(e)&&t(e)),er(e,r,t.shouldTestNextSiblings),!0,n)}function fr(e,t,n){const r=(Array.isArray(e)?e:[e]).filter(L);if(0===r.length)return r;const s=Jn(t,n);return s===pn.trueFunc?r:r.filter(s)}const Er=/^\s*[+~]/;function Tr(e){if(!e)return this._make([]);if("string"!=typeof e){const t=Dt(e)?e.toArray():[e],n=this.toArray();return this._make(t.filter((e=>n.some((t=>bt(t,e))))))}return this._findBySelector(e,Number.POSITIVE_INFINITY)}function mr(e,t){var n;const r=this.toArray(),s=Er.test(e)?r:this.children().toArray(),i={context:r,root:null===(n=this._root)||void 0===n?void 0:n[0],xmlMode:this.options.xmlMode,lowerCaseTags:this.options.lowerCaseTags,lowerCaseAttributeNames:this.options.lowerCaseAttributeNames,pseudos:this.options.pseudos,quirksMode:this.options.quirksMode};return this._make(function(e,t,n={},r=1/0){if("function"==typeof e)return pr(t,e);const[s,i]=rr(hn(e)),a=i.map((e=>hr(t,e,n,!0,r)));return s.length&&a.push(dr(t,s,n,r)),0===a.length?[]:1===a.length?a[0]:it(a.reduce(((e,t)=>[...e,...t])))}(e,s,i,t))}function Ar(e){return function(t,...n){return function(r){var s;let i=e(t,this);return r&&(i=Hr(i,r,this.options.xmlMode,null===(s=this._root)||void 0===s?void 0:s[0])),this._make(this.length>1&&i.length>1?n.reduce(((e,t)=>t(e)),i):i)}}}const gr=Ar(((e,t)=>{let n=[];for(let r=0;r<t.length;r++){const s=e(t[r]);s.length>0&&(n=n.concat(s))}return n})),_r=Ar(((e,t)=>{const n=[];for(let r=0;r<t.length;r++){const s=e(t[r]);null!==s&&n.push(s)}return n}));function Sr(e,...t){let n=null;const r=Ar(((e,t)=>{const r=[];return Ot(t,(t=>{for(let s;(s=e(t))&&!(null==n?void 0:n(s,r.length));t=s)r.push(s)})),r}))(e,...t);return function(e,t){n="string"==typeof e?t=>ar(t,e,this.options):e?Ur(e):null;const s=r.call(this,t);return n=null,s}}function br(e){return e.length>1?Array.from(new Set(e)):e}const Ir=_r((({parent:e})=>e&&!B(e)?e:null),br),Nr=gr((e=>{const t=[];for(;e.parent&&!B(e.parent);)t.push(e.parent),e=e.parent;return t}),it,(e=>e.reverse())),Cr=Sr((({parent:e})=>e&&!B(e)?e:null),it,(e=>e.reverse()));function Dr(e){var t;const n=[];if(!e)return this._make(n);const r={xmlMode:this.options.xmlMode,root:null===(t=this._root)||void 0===t?void 0:t[0]},s="string"==typeof e?t=>ar(t,e,r):Ur(e);return Ot(this,(e=>{for(!e||B(e)||L(e)||(e=e.parent);e&&L(e);){if(s(e,0)){n.includes(e)||n.push(e);break}e=e.parent}})),this._make(n)}const Or=_r((e=>Pe(e))),yr=gr((e=>{const t=[];for(;e.next;)L(e=e.next)&&t.push(e);return t}),br),Rr=Sr((e=>Pe(e)),br),Lr=_r((e=>we(e))),kr=gr((e=>{const t=[];for(;e.prev;)L(e=e.prev)&&t.push(e);return t}),br),Pr=Sr((e=>we(e)),br),wr=gr((e=>ye(e).filter((t=>L(t)&&t!==e))),it),Mr=gr((e=>De(e).filter(L)),br);function Br(){const e=this.toArray().reduce(((e,t)=>v(t)?e.concat(t.children):e),[]);return this._make(e)}function vr(e){let t=0;const n=this.length;for(;t<n&&!1!==e.call(this[t],t,this[t]);)++t;return this}function xr(e){let t=[];for(let n=0;n<this.length;n++){const r=this[n],s=e.call(r,n,r);null!=s&&(t=t.concat(s))}return this._make(t)}function Ur(e){return"function"==typeof e?(t,n)=>e.call(t,n,t):Dt(e)?t=>Array.prototype.includes.call(e,t):function(t){return e===t}}function Fr(e){var t;return this._make(Hr(this.toArray(),e,this.options.xmlMode,null===(t=this._root)||void 0===t?void 0:t[0]))}function Hr(e,t,n,r){return"string"==typeof t?cr(t,e,{xmlMode:n,root:r}):e.filter(Ur(t))}function Gr(e){const t=this.toArray();return"string"==typeof e?or(t.filter(L),e,this.options):!!e&&t.some(Ur(e))}function qr(e){let t=this.toArray();if("string"==typeof e){const n=new Set(cr(e,t,this.options));t=t.filter((e=>!n.has(e)))}else{const n=Ur(e);t=t.filter(((e,t)=>!n(e,t)))}return this._make(t)}function Yr(e){return this.filter("string"==typeof e?`:has(${e})`:(t,n)=>this._make(n).find(e).length>0)}function Vr(){return this.length>1?this._make(this[0]):this}function jr(){return this.length>0?this._make(this[this.length-1]):this}function Qr(e){var t;return 0==(e=+e)&&this.length<=1?this:(e<0&&(e=this.length+e),this._make(null!==(t=this[e])&&void 0!==t?t:[]))}function Wr(e){return null==e?this.toArray():this[e<0?this.length+e:e]}function Kr(){return Array.prototype.slice.call(this)}function Xr(e){let t,n;return null==e?(t=this.parent().children(),n=this[0]):"string"==typeof e?(t=this._make(e),n=this[0]):(t=this,n=Dt(e)?e[0]:e),Array.prototype.indexOf.call(t,n)}function $r(e,t){return this._make(Array.prototype.slice.call(this,e,t))}function zr(){var e;return null!==(e=this.prevObject)&&void 0!==e?e:this._make([])}function Jr(e,t){const n=this._make(e,t),r=it([...this.get(),...n.get()]);return this._make(r)}function Zr(e){return this.prevObject?this.add(e?this.prevObject.filter(e):this.prevObject):this}function es(e,t){const n=Array.isArray(e)?e:[e];t?t.children=n:t=null;for(let e=0;e<n.length;e++){const r=n[e];r.parent&&r.parent.children!==n&&Me(r),t?(r.prev=n[e-1]||null,r.next=n[e+1]||null):r.prev=r.next=null,r.parent=t}return t}function ts(e,t){if(null==e)return[];if("string"==typeof e)return this._parse(e,this.options,!1,null).children.slice(0);if("length"in e){if(1===e.length)return this._makeDomArray(e[0],t);const n=[];for(let r=0;r<e.length;r++){const s=e[r];if("object"==typeof s){if(null==s)continue;if(!("length"in s)){n.push(t?x(s,!0):s);continue}}n.push(...this._makeDomArray(s,t))}return n}return[t?x(e,!0):e]}function ns(e){return function(...t){const n=this.length-1;return Ot(this,((r,s)=>{if(!v(r))return;const i="function"==typeof t[0]?t[0].call(r,s,this._render(r.children)):t,a=this._makeDomArray(i,s<n);e(a,r.children,r)}))}}function rs(e,t,n,r,s){var i,a;const o=[t,n,...r],c=0===t?null:e[t-1],l=t+n>=e.length?null:e[t+n];for(let e=0;e<r.length;++e){const n=r[e],u=n.parent;if(u){const e=u.children.indexOf(n);e>-1&&(u.children.splice(e,1),s===u&&t>e&&o[0]--)}n.parent=s,n.prev&&(n.prev.next=null!==(i=n.next)&&void 0!==i?i:null),n.next&&(n.next.prev=null!==(a=n.prev)&&void 0!==a?a:null),n.prev=0===e?c:r[e-1],n.next=e===r.length-1?l:r[e+1]}return c&&(c.next=r[0]),l&&(l.prev=r[r.length-1]),e.splice(...o)}function ss(e){return(Dt(e)?e:this._make(e)).append(this),this}function is(e){return(Dt(e)?e:this._make(e)).prepend(this),this}const as=ns(((e,t,n)=>{rs(t,t.length,0,e,n)})),os=ns(((e,t,n)=>{rs(t,0,0,e,n)}));function cs(e){return function(t){const n=this.length-1,r=this.parents().last();for(let s=0;s<this.length;s++){const i=this[s],a="function"==typeof t?t.call(i,s,i):"string"!=typeof t||Rt(t)?t:r.find(t).clone(),[o]=this._makeDomArray(a,s<n);if(!o||!v(o))continue;let c=o,l=0;for(;l<c.children.length;){const e=c.children[l];L(e)?(c=e,l=0):l++}e(i,c,[o])}return this}}const ls=cs(((e,t,n)=>{const{parent:r}=e;if(!r)return;const s=r.children,i=s.indexOf(e);es([e],t),rs(s,i,0,n,r)})),us=cs(((e,t,n)=>{v(e)&&(es(e.children,t),es(n,e))}));function hs(e){return this.parent(e).not("body").each(((e,t)=>{this._make(t).replaceWith(t.children)})),this}function ds(e){const t=this[0];if(t){const n=this._make("function"==typeof e?e.call(t,0,t):e).insertBefore(t);let r;for(let e=0;e<n.length;e++)"tag"===n[e].type&&(r=n[e]);let s=0;for(;r&&s<r.children.length;){const e=r.children[s];"tag"===e.type?(r=e,s=0):s++}r&&this._make(r).append(this)}return this}function ps(...e){const t=this.length-1;return Ot(this,((n,r)=>{if(!v(n)||!n.parent)return;const s=n.parent.children,i=s.indexOf(n);if(i<0)return;const a="function"==typeof e[0]?e[0].call(n,r,this._render(n.children)):e;rs(s,i+1,0,this._makeDomArray(a,r<t),n.parent)}))}function fs(e){"string"==typeof e&&(e=this._make(e)),this.remove();const t=[];for(const n of this._makeDomArray(e)){const e=this.clone().toArray(),{parent:r}=n;if(!r)continue;const s=r.children,i=s.indexOf(n);i<0||(rs(s,i+1,0,e,r),t.push(...e))}return this._make(t)}function Es(...e){const t=this.length-1;return Ot(this,((n,r)=>{if(!v(n)||!n.parent)return;const s=n.parent.children,i=s.indexOf(n);if(i<0)return;const a="function"==typeof e[0]?e[0].call(n,r,this._render(n.children)):e;rs(s,i,0,this._makeDomArray(a,r<t),n.parent)}))}function Ts(e){const t=this._make(e);this.remove();const n=[];return Ot(t,(e=>{const t=this.clone().toArray(),{parent:r}=e;if(!r)return;const s=r.children,i=s.indexOf(e);i<0||(rs(s,i,0,t,r),n.push(...t))})),this._make(n)}function ms(e){return Ot(e?this.filter(e):this,(e=>{Me(e),e.prev=e.next=e.parent=null})),this}function As(e){return Ot(this,((t,n)=>{const{parent:r}=t;if(!r)return;const s=r.children,i="function"==typeof e?e.call(t,n,t):e,a=this._makeDomArray(i);es(a,null);const o=s.indexOf(t);rs(s,o,1,a,r),a.includes(t)||(t.parent=t.prev=t.next=null)}))}function gs(){return Ot(this,(e=>{if(v(e)){for(const t of e.children)t.next=t.prev=t.parent=null;e.children.length=0}}))}function _s(e){if(void 0===e){const e=this[0];return e&&v(e)?this._render(e.children):null}return Ot(this,(t=>{if(v(t)){for(const e of t.children)e.next=e.prev=e.parent=null;es(Dt(e)?e.toArray():this._parse(`${e}`,this.options,!1,t).children,t)}}))}function Ss(){return this._render(this)}function bs(e){return void 0===e?gt(this):Ot(this,"function"==typeof e?(t,n)=>this._make(t).text(e.call(t,n,gt([t]))):t=>{if(v(t)){for(const e of t.children)e.next=e.prev=e.parent=null;es(new I(`${e}`),t)}})}function Is(){const e=Array.prototype.map.call(this.get(),(e=>x(e,!0))),t=new y(e);for(const n of e)n.parent=t;return this._make(e)}function Ns(e,t){return null!=e&&null!=t||"object"==typeof e&&!Array.isArray(e)?Ot(this,((n,r)=>{L(n)&&Cs(n,e,t,r)})):0!==this.length?Ds(this[0],e):void 0}function Cs(e,t,n,r){if("string"==typeof t){const i=Ds(e),a="function"==typeof n?n.call(e,r,i[t]):n;""===a?delete i[t]:null!=a&&(i[t]=a),e.attribs.style=(s=i,Object.keys(s).reduce(((e,t)=>`${e}${e?" ":""}${t}: ${s[t]};`),""))}else if("object"==typeof t){const n=Object.keys(t);for(let r=0;r<n.length;r++){const s=n[r];Cs(e,s,t[s],r)}}var s}function Ds(e,t){if(!e||!L(e))return;const n=function(e){if(!(e=(e||"").trim()))return{};const t={};let n;for(const r of e.split(";")){const e=r.indexOf(":");if(e<1||e===r.length-1){const e=r.trimEnd();e.length>0&&void 0!==n&&(t[n]+=`;${e}`)}else n=r.slice(0,e).trim(),t[n]=r.slice(e+1).trim()}return t}(e.attribs.style);if("string"==typeof t)return n[t];if(Array.isArray(t)){const e={};for(const r of t)null!=n[r]&&(e[r]=n[r]);return e}return n}const Os="input,select,textarea,keygen",ys=/%20/g,Rs=/\r?\n/g;function Ls(){const e=this.serializeArray().map((e=>`${encodeURIComponent(e.name)}=${encodeURIComponent(e.value)}`));return e.join("&").replace(ys,"+")}function ks(){return this.map(((e,t)=>{const n=this._make(t);return L(t)&&"form"===t.name?n.find(Os).toArray():n.filter(Os).toArray()})).filter('[name!=""]:enabled:not(:submit, :button, :image, :reset, :file):matches([checked], :not(:checkbox, :radio))').map(((e,t)=>{var n;const r=this._make(t),s=r.attr("name"),i=null!==(n=r.val())&&void 0!==n?n:"";return Array.isArray(i)?i.map((e=>({name:s,value:e.replace(Rs,"\r\n")}))):{name:s,value:i.replace(Rs,"\r\n")}})).toArray()}function Ps(e){var t;return"string"==typeof e?{selector:e,value:"textContent"}:{selector:e.selector,value:null!==(t=e.value)&&void 0!==t?t:"textContent"}}function ws(e){const t={};for(const n in e){const r=e[n],s=Array.isArray(r),{selector:i,value:a}=Ps(s?r[0]:r),o="function"==typeof a?a:"string"==typeof a?e=>this._make(e).prop(a):e=>this._make(e).extract(a);if(s)t[n]=this._findBySelector(i,Number.POSITIVE_INFINITY).map(((e,r)=>o(r,n,t))).get();else{const e=this._findBySelector(i,1);t[n]=e.length>0?o(e[0],n,t):void 0}}return t}class Ms{constructor(e,t,n){if(this.length=0,this.options=n,this._root=t,e){for(let t=0;t<e.length;t++)this[t]=e[t];this.length=e.length}}}Ms.prototype.cheerio="[cheerio object]",Ms.prototype.splice=Array.prototype.splice,Ms.prototype[Symbol.iterator]=Array.prototype[Symbol.iterator],Object.assign(Ms.prototype,i,a,o,c,l,h);const Bs=new Set([65534,65535,131070,131071,196606,196607,262142,262143,327678,327679,393214,393215,458750,458751,524286,524287,589822,589823,655358,655359,720894,720895,786430,786431,851966,851967,917502,917503,983038,983039,1048574,1048575,1114110,1114111]),vs="�";var xs;!function(e){e[e.EOF=-1]="EOF",e[e.NULL=0]="NULL",e[e.TABULATION=9]="TABULATION",e[e.CARRIAGE_RETURN=13]="CARRIAGE_RETURN",e[e.LINE_FEED=10]="LINE_FEED",e[e.FORM_FEED=12]="FORM_FEED",e[e.SPACE=32]="SPACE",e[e.EXCLAMATION_MARK=33]="EXCLAMATION_MARK",e[e.QUOTATION_MARK=34]="QUOTATION_MARK",e[e.AMPERSAND=38]="AMPERSAND",e[e.APOSTROPHE=39]="APOSTROPHE",e[e.HYPHEN_MINUS=45]="HYPHEN_MINUS",e[e.SOLIDUS=47]="SOLIDUS",e[e.DIGIT_0=48]="DIGIT_0",e[e.DIGIT_9=57]="DIGIT_9",e[e.SEMICOLON=59]="SEMICOLON",e[e.LESS_THAN_SIGN=60]="LESS_THAN_SIGN",e[e.EQUALS_SIGN=61]="EQUALS_SIGN",e[e.GREATER_THAN_SIGN=62]="GREATER_THAN_SIGN",e[e.QUESTION_MARK=63]="QUESTION_MARK",e[e.LATIN_CAPITAL_A=65]="LATIN_CAPITAL_A",e[e.LATIN_CAPITAL_Z=90]="LATIN_CAPITAL_Z",e[e.RIGHT_SQUARE_BRACKET=93]="RIGHT_SQUARE_BRACKET",e[e.GRAVE_ACCENT=96]="GRAVE_ACCENT",e[e.LATIN_SMALL_A=97]="LATIN_SMALL_A",e[e.LATIN_SMALL_Z=122]="LATIN_SMALL_Z"}(xs||(xs={}));const Us="[CDATA[",Fs="doctype",Hs="script";function Gs(e){return e>=55296&&e<=57343}function qs(e){return 32!==e&&10!==e&&13!==e&&9!==e&&12!==e&&e>=1&&e<=31||e>=127&&e<=159}function Ys(e){return e>=64976&&e<=65007||Bs.has(e)}var Vs,js,Qs,Ws,Ks,Xs,$s;!function(e){e.controlCharacterInInputStream="control-character-in-input-stream",e.noncharacterInInputStream="noncharacter-in-input-stream",e.surrogateInInputStream="surrogate-in-input-stream",e.nonVoidHtmlElementStartTagWithTrailingSolidus="non-void-html-element-start-tag-with-trailing-solidus",e.endTagWithAttributes="end-tag-with-attributes",e.endTagWithTrailingSolidus="end-tag-with-trailing-solidus",e.unexpectedSolidusInTag="unexpected-solidus-in-tag",e.unexpectedNullCharacter="unexpected-null-character",e.unexpectedQuestionMarkInsteadOfTagName="unexpected-question-mark-instead-of-tag-name",e.invalidFirstCharacterOfTagName="invalid-first-character-of-tag-name",e.unexpectedEqualsSignBeforeAttributeName="unexpected-equals-sign-before-attribute-name",e.missingEndTagName="missing-end-tag-name",e.unexpectedCharacterInAttributeName="unexpected-character-in-attribute-name",e.unknownNamedCharacterReference="unknown-named-character-reference",e.missingSemicolonAfterCharacterReference="missing-semicolon-after-character-reference",e.unexpectedCharacterAfterDoctypeSystemIdentifier="unexpected-character-after-doctype-system-identifier",e.unexpectedCharacterInUnquotedAttributeValue="unexpected-character-in-unquoted-attribute-value",e.eofBeforeTagName="eof-before-tag-name",e.eofInTag="eof-in-tag",e.missingAttributeValue="missing-attribute-value",e.missingWhitespaceBetweenAttributes="missing-whitespace-between-attributes",e.missingWhitespaceAfterDoctypePublicKeyword="missing-whitespace-after-doctype-public-keyword",e.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers="missing-whitespace-between-doctype-public-and-system-identifiers",e.missingWhitespaceAfterDoctypeSystemKeyword="missing-whitespace-after-doctype-system-keyword",e.missingQuoteBeforeDoctypePublicIdentifier="missing-quote-before-doctype-public-identifier",e.missingQuoteBeforeDoctypeSystemIdentifier="missing-quote-before-doctype-system-identifier",e.missingDoctypePublicIdentifier="missing-doctype-public-identifier",e.missingDoctypeSystemIdentifier="missing-doctype-system-identifier",e.abruptDoctypePublicIdentifier="abrupt-doctype-public-identifier",e.abruptDoctypeSystemIdentifier="abrupt-doctype-system-identifier",e.cdataInHtmlContent="cdata-in-html-content",e.incorrectlyOpenedComment="incorrectly-opened-comment",e.eofInScriptHtmlCommentLikeText="eof-in-script-html-comment-like-text",e.eofInDoctype="eof-in-doctype",e.nestedComment="nested-comment",e.abruptClosingOfEmptyComment="abrupt-closing-of-empty-comment",e.eofInComment="eof-in-comment",e.incorrectlyClosedComment="incorrectly-closed-comment",e.eofInCdata="eof-in-cdata",e.absenceOfDigitsInNumericCharacterReference="absence-of-digits-in-numeric-character-reference",e.nullCharacterReference="null-character-reference",e.surrogateCharacterReference="surrogate-character-reference",e.characterReferenceOutsideUnicodeRange="character-reference-outside-unicode-range",e.controlCharacterReference="control-character-reference",e.noncharacterCharacterReference="noncharacter-character-reference",e.missingWhitespaceBeforeDoctypeName="missing-whitespace-before-doctype-name",e.missingDoctypeName="missing-doctype-name",e.invalidCharacterSequenceAfterDoctypeName="invalid-character-sequence-after-doctype-name",e.duplicateAttribute="duplicate-attribute",e.nonConformingDoctype="non-conforming-doctype",e.missingDoctype="missing-doctype",e.misplacedDoctype="misplaced-doctype",e.endTagWithoutMatchingOpenElement="end-tag-without-matching-open-element",e.closingOfElementWithOpenChildElements="closing-of-element-with-open-child-elements",e.disallowedContentInNoscriptInHead="disallowed-content-in-noscript-in-head",e.openElementsLeftAfterEof="open-elements-left-after-eof",e.abandonedHeadElementChild="abandoned-head-element-child",e.misplacedStartTagForHeadElement="misplaced-start-tag-for-head-element",e.nestedNoscriptInHead="nested-noscript-in-head",e.eofInElementThatCanContainOnlyText="eof-in-element-that-can-contain-only-text"}(Vs||(Vs={}));class zs{constructor(e){this.handler=e,this.html="",this.pos=-1,this.lastGapPos=-2,this.gapStack=[],this.skipNextNewLine=!1,this.lastChunkWritten=!1,this.endOfChunkHit=!1,this.bufferWaterline=65536,this.isEol=!1,this.lineStartPos=0,this.droppedBufferSize=0,this.line=1,this.lastErrOffset=-1}get col(){return this.pos-this.lineStartPos+Number(this.lastGapPos!==this.pos)}get offset(){return this.droppedBufferSize+this.pos}getError(e,t){const{line:n,col:r,offset:s}=this,i=r+t,a=s+t;return{code:e,startLine:n,endLine:n,startCol:i,endCol:i,startOffset:a,endOffset:a}}_err(e){this.handler.onParseError&&this.lastErrOffset!==this.offset&&(this.lastErrOffset=this.offset,this.handler.onParseError(this.getError(e,0)))}_addGap(){this.gapStack.push(this.lastGapPos),this.lastGapPos=this.pos}_processSurrogate(e){if(this.pos!==this.html.length-1){const t=this.html.charCodeAt(this.pos+1);if(function(e){return e>=56320&&e<=57343}(t))return this.pos++,this._addGap(),1024*(e-55296)+9216+t}else if(!this.lastChunkWritten)return this.endOfChunkHit=!0,xs.EOF;return this._err(Vs.surrogateInInputStream),e}willDropParsedChunk(){return this.pos>this.bufferWaterline}dropParsedChunk(){this.willDropParsedChunk()&&(this.html=this.html.substring(this.pos),this.lineStartPos-=this.pos,this.droppedBufferSize+=this.pos,this.pos=0,this.lastGapPos=-2,this.gapStack.length=0)}write(e,t){this.html.length>0?this.html+=e:this.html=e,this.endOfChunkHit=!1,this.lastChunkWritten=t}insertHtmlAtCurrentPos(e){this.html=this.html.substring(0,this.pos+1)+e+this.html.substring(this.pos+1),this.endOfChunkHit=!1}startsWith(e,t){if(this.pos+e.length>this.html.length)return this.endOfChunkHit=!this.lastChunkWritten,!1;if(t)return this.html.startsWith(e,this.pos);for(let t=0;t<e.length;t++)if((32|this.html.charCodeAt(this.pos+t))!==e.charCodeAt(t))return!1;return!0}peek(e){const t=this.pos+e;if(t>=this.html.length)return this.endOfChunkHit=!this.lastChunkWritten,xs.EOF;const n=this.html.charCodeAt(t);return n===xs.CARRIAGE_RETURN?xs.LINE_FEED:n}advance(){if(this.pos++,this.isEol&&(this.isEol=!1,this.line++,this.lineStartPos=this.pos),this.pos>=this.html.length)return this.endOfChunkHit=!this.lastChunkWritten,xs.EOF;let e=this.html.charCodeAt(this.pos);return e===xs.CARRIAGE_RETURN?(this.isEol=!0,this.skipNextNewLine=!0,xs.LINE_FEED):e===xs.LINE_FEED&&(this.isEol=!0,this.skipNextNewLine)?(this.line--,this.skipNextNewLine=!1,this._addGap(),this.advance()):(this.skipNextNewLine=!1,Gs(e)&&(e=this._processSurrogate(e)),null===this.handler.onParseError||e>31&&e<127||e===xs.LINE_FEED||e===xs.CARRIAGE_RETURN||e>159&&e<64976||this._checkForProblematicCharacters(e),e)}_checkForProblematicCharacters(e){qs(e)?this._err(Vs.controlCharacterInInputStream):Ys(e)&&this._err(Vs.noncharacterInInputStream)}retreat(e){for(this.pos-=e;this.pos<this.lastGapPos;)this.lastGapPos=this.gapStack.pop(),this.pos--;this.isEol=!1}}function Js(e,t){for(let n=e.attrs.length-1;n>=0;n--)if(e.attrs[n].name===t)return e.attrs[n].value;return null}!function(e){e[e.CHARACTER=0]="CHARACTER",e[e.NULL_CHARACTER=1]="NULL_CHARACTER",e[e.WHITESPACE_CHARACTER=2]="WHITESPACE_CHARACTER",e[e.START_TAG=3]="START_TAG",e[e.END_TAG=4]="END_TAG",e[e.COMMENT=5]="COMMENT",e[e.DOCTYPE=6]="DOCTYPE",e[e.EOF=7]="EOF",e[e.HIBERNATION=8]="HIBERNATION"}(js||(js={})),function(e){e.HTML="http://www.w3.org/1999/xhtml",e.MATHML="http://www.w3.org/1998/Math/MathML",e.SVG="http://www.w3.org/2000/svg",e.XLINK="http://www.w3.org/1999/xlink",e.XML="http://www.w3.org/XML/1998/namespace",e.XMLNS="http://www.w3.org/2000/xmlns/"}(Qs||(Qs={})),function(e){e.TYPE="type",e.ACTION="action",e.ENCODING="encoding",e.PROMPT="prompt",e.NAME="name",e.COLOR="color",e.FACE="face",e.SIZE="size"}(Ws||(Ws={})),function(e){e.NO_QUIRKS="no-quirks",e.QUIRKS="quirks",e.LIMITED_QUIRKS="limited-quirks"}(Ks||(Ks={})),function(e){e.A="a",e.ADDRESS="address",e.ANNOTATION_XML="annotation-xml",e.APPLET="applet",e.AREA="area",e.ARTICLE="article",e.ASIDE="aside",e.B="b",e.BASE="base",e.BASEFONT="basefont",e.BGSOUND="bgsound",e.BIG="big",e.BLOCKQUOTE="blockquote",e.BODY="body",e.BR="br",e.BUTTON="button",e.CAPTION="caption",e.CENTER="center",e.CODE="code",e.COL="col",e.COLGROUP="colgroup",e.DD="dd",e.DESC="desc",e.DETAILS="details",e.DIALOG="dialog",e.DIR="dir",e.DIV="div",e.DL="dl",e.DT="dt",e.EM="em",e.EMBED="embed",e.FIELDSET="fieldset",e.FIGCAPTION="figcaption",e.FIGURE="figure",e.FONT="font",e.FOOTER="footer",e.FOREIGN_OBJECT="foreignObject",e.FORM="form",e.FRAME="frame",e.FRAMESET="frameset",e.H1="h1",e.H2="h2",e.H3="h3",e.H4="h4",e.H5="h5",e.H6="h6",e.HEAD="head",e.HEADER="header",e.HGROUP="hgroup",e.HR="hr",e.HTML="html",e.I="i",e.IMG="img",e.IMAGE="image",e.INPUT="input",e.IFRAME="iframe",e.KEYGEN="keygen",e.LABEL="label",e.LI="li",e.LINK="link",e.LISTING="listing",e.MAIN="main",e.MALIGNMARK="malignmark",e.MARQUEE="marquee",e.MATH="math",e.MENU="menu",e.META="meta",e.MGLYPH="mglyph",e.MI="mi",e.MO="mo",e.MN="mn",e.MS="ms",e.MTEXT="mtext",e.NAV="nav",e.NOBR="nobr",e.NOFRAMES="noframes",e.NOEMBED="noembed",e.NOSCRIPT="noscript",e.OBJECT="object",e.OL="ol",e.OPTGROUP="optgroup",e.OPTION="option",e.P="p",e.PARAM="param",e.PLAINTEXT="plaintext",e.PRE="pre",e.RB="rb",e.RP="rp",e.RT="rt",e.RTC="rtc",e.RUBY="ruby",e.S="s",e.SCRIPT="script",e.SEARCH="search",e.SECTION="section",e.SELECT="select",e.SOURCE="source",e.SMALL="small",e.SPAN="span",e.STRIKE="strike",e.STRONG="strong",e.STYLE="style",e.SUB="sub",e.SUMMARY="summary",e.SUP="sup",e.TABLE="table",e.TBODY="tbody",e.TEMPLATE="template",e.TEXTAREA="textarea",e.TFOOT="tfoot",e.TD="td",e.TH="th",e.THEAD="thead",e.TITLE="title",e.TR="tr",e.TRACK="track",e.TT="tt",e.U="u",e.UL="ul",e.SVG="svg",e.VAR="var",e.WBR="wbr",e.XMP="xmp"}(Xs||(Xs={})),function(e){e[e.UNKNOWN=0]="UNKNOWN",e[e.A=1]="A",e[e.ADDRESS=2]="ADDRESS",e[e.ANNOTATION_XML=3]="ANNOTATION_XML",e[e.APPLET=4]="APPLET",e[e.AREA=5]="AREA",e[e.ARTICLE=6]="ARTICLE",e[e.ASIDE=7]="ASIDE",e[e.B=8]="B",e[e.BASE=9]="BASE",e[e.BASEFONT=10]="BASEFONT",e[e.BGSOUND=11]="BGSOUND",e[e.BIG=12]="BIG",e[e.BLOCKQUOTE=13]="BLOCKQUOTE",e[e.BODY=14]="BODY",e[e.BR=15]="BR",e[e.BUTTON=16]="BUTTON",e[e.CAPTION=17]="CAPTION",e[e.CENTER=18]="CENTER",e[e.CODE=19]="CODE",e[e.COL=20]="COL",e[e.COLGROUP=21]="COLGROUP",e[e.DD=22]="DD",e[e.DESC=23]="DESC",e[e.DETAILS=24]="DETAILS",e[e.DIALOG=25]="DIALOG",e[e.DIR=26]="DIR",e[e.DIV=27]="DIV",e[e.DL=28]="DL",e[e.DT=29]="DT",e[e.EM=30]="EM",e[e.EMBED=31]="EMBED",e[e.FIELDSET=32]="FIELDSET",e[e.FIGCAPTION=33]="FIGCAPTION",e[e.FIGURE=34]="FIGURE",e[e.FONT=35]="FONT",e[e.FOOTER=36]="FOOTER",e[e.FOREIGN_OBJECT=37]="FOREIGN_OBJECT",e[e.FORM=38]="FORM",e[e.FRAME=39]="FRAME",e[e.FRAMESET=40]="FRAMESET",e[e.H1=41]="H1",e[e.H2=42]="H2",e[e.H3=43]="H3",e[e.H4=44]="H4",e[e.H5=45]="H5",e[e.H6=46]="H6",e[e.HEAD=47]="HEAD",e[e.HEADER=48]="HEADER",e[e.HGROUP=49]="HGROUP",e[e.HR=50]="HR",e[e.HTML=51]="HTML",e[e.I=52]="I",e[e.IMG=53]="IMG",e[e.IMAGE=54]="IMAGE",e[e.INPUT=55]="INPUT",e[e.IFRAME=56]="IFRAME",e[e.KEYGEN=57]="KEYGEN",e[e.LABEL=58]="LABEL",e[e.LI=59]="LI",e[e.LINK=60]="LINK",e[e.LISTING=61]="LISTING",e[e.MAIN=62]="MAIN",e[e.MALIGNMARK=63]="MALIGNMARK",e[e.MARQUEE=64]="MARQUEE",e[e.MATH=65]="MATH",e[e.MENU=66]="MENU",e[e.META=67]="META",e[e.MGLYPH=68]="MGLYPH",e[e.MI=69]="MI",e[e.MO=70]="MO",e[e.MN=71]="MN",e[e.MS=72]="MS",e[e.MTEXT=73]="MTEXT",e[e.NAV=74]="NAV",e[e.NOBR=75]="NOBR",e[e.NOFRAMES=76]="NOFRAMES",e[e.NOEMBED=77]="NOEMBED",e[e.NOSCRIPT=78]="NOSCRIPT",e[e.OBJECT=79]="OBJECT",e[e.OL=80]="OL",e[e.OPTGROUP=81]="OPTGROUP",e[e.OPTION=82]="OPTION",e[e.P=83]="P",e[e.PARAM=84]="PARAM",e[e.PLAINTEXT=85]="PLAINTEXT",e[e.PRE=86]="PRE",e[e.RB=87]="RB",e[e.RP=88]="RP",e[e.RT=89]="RT",e[e.RTC=90]="RTC",e[e.RUBY=91]="RUBY",e[e.S=92]="S",e[e.SCRIPT=93]="SCRIPT",e[e.SEARCH=94]="SEARCH",e[e.SECTION=95]="SECTION",e[e.SELECT=96]="SELECT",e[e.SOURCE=97]="SOURCE",e[e.SMALL=98]="SMALL",e[e.SPAN=99]="SPAN",e[e.STRIKE=100]="STRIKE",e[e.STRONG=101]="STRONG",e[e.STYLE=102]="STYLE",e[e.SUB=103]="SUB",e[e.SUMMARY=104]="SUMMARY",e[e.SUP=105]="SUP",e[e.TABLE=106]="TABLE",e[e.TBODY=107]="TBODY",e[e.TEMPLATE=108]="TEMPLATE",e[e.TEXTAREA=109]="TEXTAREA",e[e.TFOOT=110]="TFOOT",e[e.TD=111]="TD",e[e.TH=112]="TH",e[e.THEAD=113]="THEAD",e[e.TITLE=114]="TITLE",e[e.TR=115]="TR",e[e.TRACK=116]="TRACK",e[e.TT=117]="TT",e[e.U=118]="U",e[e.UL=119]="UL",e[e.SVG=120]="SVG",e[e.VAR=121]="VAR",e[e.WBR=122]="WBR",e[e.XMP=123]="XMP"}($s||($s={}));const Zs=new Map([[Xs.A,$s.A],[Xs.ADDRESS,$s.ADDRESS],[Xs.ANNOTATION_XML,$s.ANNOTATION_XML],[Xs.APPLET,$s.APPLET],[Xs.AREA,$s.AREA],[Xs.ARTICLE,$s.ARTICLE],[Xs.ASIDE,$s.ASIDE],[Xs.B,$s.B],[Xs.BASE,$s.BASE],[Xs.BASEFONT,$s.BASEFONT],[Xs.BGSOUND,$s.BGSOUND],[Xs.BIG,$s.BIG],[Xs.BLOCKQUOTE,$s.BLOCKQUOTE],[Xs.BODY,$s.BODY],[Xs.BR,$s.BR],[Xs.BUTTON,$s.BUTTON],[Xs.CAPTION,$s.CAPTION],[Xs.CENTER,$s.CENTER],[Xs.CODE,$s.CODE],[Xs.COL,$s.COL],[Xs.COLGROUP,$s.COLGROUP],[Xs.DD,$s.DD],[Xs.DESC,$s.DESC],[Xs.DETAILS,$s.DETAILS],[Xs.DIALOG,$s.DIALOG],[Xs.DIR,$s.DIR],[Xs.DIV,$s.DIV],[Xs.DL,$s.DL],[Xs.DT,$s.DT],[Xs.EM,$s.EM],[Xs.EMBED,$s.EMBED],[Xs.FIELDSET,$s.FIELDSET],[Xs.FIGCAPTION,$s.FIGCAPTION],[Xs.FIGURE,$s.FIGURE],[Xs.FONT,$s.FONT],[Xs.FOOTER,$s.FOOTER],[Xs.FOREIGN_OBJECT,$s.FOREIGN_OBJECT],[Xs.FORM,$s.FORM],[Xs.FRAME,$s.FRAME],[Xs.FRAMESET,$s.FRAMESET],[Xs.H1,$s.H1],[Xs.H2,$s.H2],[Xs.H3,$s.H3],[Xs.H4,$s.H4],[Xs.H5,$s.H5],[Xs.H6,$s.H6],[Xs.HEAD,$s.HEAD],[Xs.HEADER,$s.HEADER],[Xs.HGROUP,$s.HGROUP],[Xs.HR,$s.HR],[Xs.HTML,$s.HTML],[Xs.I,$s.I],[Xs.IMG,$s.IMG],[Xs.IMAGE,$s.IMAGE],[Xs.INPUT,$s.INPUT],[Xs.IFRAME,$s.IFRAME],[Xs.KEYGEN,$s.KEYGEN],[Xs.LABEL,$s.LABEL],[Xs.LI,$s.LI],[Xs.LINK,$s.LINK],[Xs.LISTING,$s.LISTING],[Xs.MAIN,$s.MAIN],[Xs.MALIGNMARK,$s.MALIGNMARK],[Xs.MARQUEE,$s.MARQUEE],[Xs.MATH,$s.MATH],[Xs.MENU,$s.MENU],[Xs.META,$s.META],[Xs.MGLYPH,$s.MGLYPH],[Xs.MI,$s.MI],[Xs.MO,$s.MO],[Xs.MN,$s.MN],[Xs.MS,$s.MS],[Xs.MTEXT,$s.MTEXT],[Xs.NAV,$s.NAV],[Xs.NOBR,$s.NOBR],[Xs.NOFRAMES,$s.NOFRAMES],[Xs.NOEMBED,$s.NOEMBED],[Xs.NOSCRIPT,$s.NOSCRIPT],[Xs.OBJECT,$s.OBJECT],[Xs.OL,$s.OL],[Xs.OPTGROUP,$s.OPTGROUP],[Xs.OPTION,$s.OPTION],[Xs.P,$s.P],[Xs.PARAM,$s.PARAM],[Xs.PLAINTEXT,$s.PLAINTEXT],[Xs.PRE,$s.PRE],[Xs.RB,$s.RB],[Xs.RP,$s.RP],[Xs.RT,$s.RT],[Xs.RTC,$s.RTC],[Xs.RUBY,$s.RUBY],[Xs.S,$s.S],[Xs.SCRIPT,$s.SCRIPT],[Xs.SEARCH,$s.SEARCH],[Xs.SECTION,$s.SECTION],[Xs.SELECT,$s.SELECT],[Xs.SOURCE,$s.SOURCE],[Xs.SMALL,$s.SMALL],[Xs.SPAN,$s.SPAN],[Xs.STRIKE,$s.STRIKE],[Xs.STRONG,$s.STRONG],[Xs.STYLE,$s.STYLE],[Xs.SUB,$s.SUB],[Xs.SUMMARY,$s.SUMMARY],[Xs.SUP,$s.SUP],[Xs.TABLE,$s.TABLE],[Xs.TBODY,$s.TBODY],[Xs.TEMPLATE,$s.TEMPLATE],[Xs.TEXTAREA,$s.TEXTAREA],[Xs.TFOOT,$s.TFOOT],[Xs.TD,$s.TD],[Xs.TH,$s.TH],[Xs.THEAD,$s.THEAD],[Xs.TITLE,$s.TITLE],[Xs.TR,$s.TR],[Xs.TRACK,$s.TRACK],[Xs.TT,$s.TT],[Xs.U,$s.U],[Xs.UL,$s.UL],[Xs.SVG,$s.SVG],[Xs.VAR,$s.VAR],[Xs.WBR,$s.WBR],[Xs.XMP,$s.XMP]]);function ei(e){var t;return null!==(t=Zs.get(e))&&void 0!==t?t:$s.UNKNOWN}const ti=$s,ni={[Qs.HTML]:new Set([ti.ADDRESS,ti.APPLET,ti.AREA,ti.ARTICLE,ti.ASIDE,ti.BASE,ti.BASEFONT,ti.BGSOUND,ti.BLOCKQUOTE,ti.BODY,ti.BR,ti.BUTTON,ti.CAPTION,ti.CENTER,ti.COL,ti.COLGROUP,ti.DD,ti.DETAILS,ti.DIR,ti.DIV,ti.DL,ti.DT,ti.EMBED,ti.FIELDSET,ti.FIGCAPTION,ti.FIGURE,ti.FOOTER,ti.FORM,ti.FRAME,ti.FRAMESET,ti.H1,ti.H2,ti.H3,ti.H4,ti.H5,ti.H6,ti.HEAD,ti.HEADER,ti.HGROUP,ti.HR,ti.HTML,ti.IFRAME,ti.IMG,ti.INPUT,ti.LI,ti.LINK,ti.LISTING,ti.MAIN,ti.MARQUEE,ti.MENU,ti.META,ti.NAV,ti.NOEMBED,ti.NOFRAMES,ti.NOSCRIPT,ti.OBJECT,ti.OL,ti.P,ti.PARAM,ti.PLAINTEXT,ti.PRE,ti.SCRIPT,ti.SECTION,ti.SELECT,ti.SOURCE,ti.STYLE,ti.SUMMARY,ti.TABLE,ti.TBODY,ti.TD,ti.TEMPLATE,ti.TEXTAREA,ti.TFOOT,ti.TH,ti.THEAD,ti.TITLE,ti.TR,ti.TRACK,ti.UL,ti.WBR,ti.XMP]),[Qs.MATHML]:new Set([ti.MI,ti.MO,ti.MN,ti.MS,ti.MTEXT,ti.ANNOTATION_XML]),[Qs.SVG]:new Set([ti.TITLE,ti.FOREIGN_OBJECT,ti.DESC]),[Qs.XLINK]:new Set,[Qs.XML]:new Set,[Qs.XMLNS]:new Set},ri=new Set([ti.H1,ti.H2,ti.H3,ti.H4,ti.H5,ti.H6]),si=new Set([Xs.STYLE,Xs.SCRIPT,Xs.XMP,Xs.IFRAME,Xs.NOEMBED,Xs.NOFRAMES,Xs.PLAINTEXT]);var ii;!function(e){e[e.DATA=0]="DATA",e[e.RCDATA=1]="RCDATA",e[e.RAWTEXT=2]="RAWTEXT",e[e.SCRIPT_DATA=3]="SCRIPT_DATA",e[e.PLAINTEXT=4]="PLAINTEXT",e[e.TAG_OPEN=5]="TAG_OPEN",e[e.END_TAG_OPEN=6]="END_TAG_OPEN",e[e.TAG_NAME=7]="TAG_NAME",e[e.RCDATA_LESS_THAN_SIGN=8]="RCDATA_LESS_THAN_SIGN",e[e.RCDATA_END_TAG_OPEN=9]="RCDATA_END_TAG_OPEN",e[e.RCDATA_END_TAG_NAME=10]="RCDATA_END_TAG_NAME",e[e.RAWTEXT_LESS_THAN_SIGN=11]="RAWTEXT_LESS_THAN_SIGN",e[e.RAWTEXT_END_TAG_OPEN=12]="RAWTEXT_END_TAG_OPEN",e[e.RAWTEXT_END_TAG_NAME=13]="RAWTEXT_END_TAG_NAME",e[e.SCRIPT_DATA_LESS_THAN_SIGN=14]="SCRIPT_DATA_LESS_THAN_SIGN",e[e.SCRIPT_DATA_END_TAG_OPEN=15]="SCRIPT_DATA_END_TAG_OPEN",e[e.SCRIPT_DATA_END_TAG_NAME=16]="SCRIPT_DATA_END_TAG_NAME",e[e.SCRIPT_DATA_ESCAPE_START=17]="SCRIPT_DATA_ESCAPE_START",e[e.SCRIPT_DATA_ESCAPE_START_DASH=18]="SCRIPT_DATA_ESCAPE_START_DASH",e[e.SCRIPT_DATA_ESCAPED=19]="SCRIPT_DATA_ESCAPED",e[e.SCRIPT_DATA_ESCAPED_DASH=20]="SCRIPT_DATA_ESCAPED_DASH",e[e.SCRIPT_DATA_ESCAPED_DASH_DASH=21]="SCRIPT_DATA_ESCAPED_DASH_DASH",e[e.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN=22]="SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN",e[e.SCRIPT_DATA_ESCAPED_END_TAG_OPEN=23]="SCRIPT_DATA_ESCAPED_END_TAG_OPEN",e[e.SCRIPT_DATA_ESCAPED_END_TAG_NAME=24]="SCRIPT_DATA_ESCAPED_END_TAG_NAME",e[e.SCRIPT_DATA_DOUBLE_ESCAPE_START=25]="SCRIPT_DATA_DOUBLE_ESCAPE_START",e[e.SCRIPT_DATA_DOUBLE_ESCAPED=26]="SCRIPT_DATA_DOUBLE_ESCAPED",e[e.SCRIPT_DATA_DOUBLE_ESCAPED_DASH=27]="SCRIPT_DATA_DOUBLE_ESCAPED_DASH",e[e.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH=28]="SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH",e[e.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN=29]="SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN",e[e.SCRIPT_DATA_DOUBLE_ESCAPE_END=30]="SCRIPT_DATA_DOUBLE_ESCAPE_END",e[e.BEFORE_ATTRIBUTE_NAME=31]="BEFORE_ATTRIBUTE_NAME",e[e.ATTRIBUTE_NAME=32]="ATTRIBUTE_NAME",e[e.AFTER_ATTRIBUTE_NAME=33]="AFTER_ATTRIBUTE_NAME",e[e.BEFORE_ATTRIBUTE_VALUE=34]="BEFORE_ATTRIBUTE_VALUE",e[e.ATTRIBUTE_VALUE_DOUBLE_QUOTED=35]="ATTRIBUTE_VALUE_DOUBLE_QUOTED",e[e.ATTRIBUTE_VALUE_SINGLE_QUOTED=36]="ATTRIBUTE_VALUE_SINGLE_QUOTED",e[e.ATTRIBUTE_VALUE_UNQUOTED=37]="ATTRIBUTE_VALUE_UNQUOTED",e[e.AFTER_ATTRIBUTE_VALUE_QUOTED=38]="AFTER_ATTRIBUTE_VALUE_QUOTED",e[e.SELF_CLOSING_START_TAG=39]="SELF_CLOSING_START_TAG",e[e.BOGUS_COMMENT=40]="BOGUS_COMMENT",e[e.MARKUP_DECLARATION_OPEN=41]="MARKUP_DECLARATION_OPEN",e[e.COMMENT_START=42]="COMMENT_START",e[e.COMMENT_START_DASH=43]="COMMENT_START_DASH",e[e.COMMENT=44]="COMMENT",e[e.COMMENT_LESS_THAN_SIGN=45]="COMMENT_LESS_THAN_SIGN",e[e.COMMENT_LESS_THAN_SIGN_BANG=46]="COMMENT_LESS_THAN_SIGN_BANG",e[e.COMMENT_LESS_THAN_SIGN_BANG_DASH=47]="COMMENT_LESS_THAN_SIGN_BANG_DASH",e[e.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH=48]="COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH",e[e.COMMENT_END_DASH=49]="COMMENT_END_DASH",e[e.COMMENT_END=50]="COMMENT_END",e[e.COMMENT_END_BANG=51]="COMMENT_END_BANG",e[e.DOCTYPE=52]="DOCTYPE",e[e.BEFORE_DOCTYPE_NAME=53]="BEFORE_DOCTYPE_NAME",e[e.DOCTYPE_NAME=54]="DOCTYPE_NAME",e[e.AFTER_DOCTYPE_NAME=55]="AFTER_DOCTYPE_NAME",e[e.AFTER_DOCTYPE_PUBLIC_KEYWORD=56]="AFTER_DOCTYPE_PUBLIC_KEYWORD",e[e.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER=57]="BEFORE_DOCTYPE_PUBLIC_IDENTIFIER",e[e.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED=58]="DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED",e[e.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED=59]="DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED",e[e.AFTER_DOCTYPE_PUBLIC_IDENTIFIER=60]="AFTER_DOCTYPE_PUBLIC_IDENTIFIER",e[e.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS=61]="BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS",e[e.AFTER_DOCTYPE_SYSTEM_KEYWORD=62]="AFTER_DOCTYPE_SYSTEM_KEYWORD",e[e.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER=63]="BEFORE_DOCTYPE_SYSTEM_IDENTIFIER",e[e.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED=64]="DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED",e[e.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED=65]="DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED",e[e.AFTER_DOCTYPE_SYSTEM_IDENTIFIER=66]="AFTER_DOCTYPE_SYSTEM_IDENTIFIER",e[e.BOGUS_DOCTYPE=67]="BOGUS_DOCTYPE",e[e.CDATA_SECTION=68]="CDATA_SECTION",e[e.CDATA_SECTION_BRACKET=69]="CDATA_SECTION_BRACKET",e[e.CDATA_SECTION_END=70]="CDATA_SECTION_END",e[e.CHARACTER_REFERENCE=71]="CHARACTER_REFERENCE",e[e.AMBIGUOUS_AMPERSAND=72]="AMBIGUOUS_AMPERSAND"}(ii||(ii={}));const ai={DATA:ii.DATA,RCDATA:ii.RCDATA,RAWTEXT:ii.RAWTEXT,SCRIPT_DATA:ii.SCRIPT_DATA,PLAINTEXT:ii.PLAINTEXT,CDATA_SECTION:ii.CDATA_SECTION};function oi(e){return e>=xs.LATIN_CAPITAL_A&&e<=xs.LATIN_CAPITAL_Z}function ci(e){return function(e){return e>=xs.LATIN_SMALL_A&&e<=xs.LATIN_SMALL_Z}(e)||oi(e)}function li(e){return ci(e)||function(e){return e>=xs.DIGIT_0&&e<=xs.DIGIT_9}(e)}function ui(e){return e+32}function hi(e){return e===xs.SPACE||e===xs.LINE_FEED||e===xs.TABULATION||e===xs.FORM_FEED}function di(e){return hi(e)||e===xs.SOLIDUS||e===xs.GREATER_THAN_SIGN}class pi{constructor(e,t){this.options=e,this.handler=t,this.paused=!1,this.inLoop=!1,this.inForeignNode=!1,this.lastStartTagName="",this.active=!1,this.state=ii.DATA,this.returnState=ii.DATA,this.entityStartPos=0,this.consumedAfterSnapshot=-1,this.currentCharacterToken=null,this.currentToken=null,this.currentAttr={name:"",value:""},this.preprocessor=new zs(t),this.currentLocation=this.getCurrentLocation(-1),this.entityDecoder=new J(G,((e,t)=>{this.preprocessor.pos=this.entityStartPos+t-1,this._flushCodePointConsumedAsCharacterReference(e)}),t.onParseError?{missingSemicolonAfterCharacterReference:()=>{this._err(Vs.missingSemicolonAfterCharacterReference,1)},absenceOfDigitsInNumericCharacterReference:e=>{this._err(Vs.absenceOfDigitsInNumericCharacterReference,this.entityStartPos-this.preprocessor.pos+e)},validateNumericCharacterReference:e=>{const t=function(e){return e===xs.NULL?Vs.nullCharacterReference:e>1114111?Vs.characterReferenceOutsideUnicodeRange:Gs(e)?Vs.surrogateCharacterReference:Ys(e)?Vs.noncharacterCharacterReference:qs(e)||e===xs.CARRIAGE_RETURN?Vs.controlCharacterReference:null}(e);t&&this._err(t,1)}}:void 0)}_err(e,t=0){var n,r;null===(r=(n=this.handler).onParseError)||void 0===r||r.call(n,this.preprocessor.getError(e,t))}getCurrentLocation(e){return this.options.sourceCodeLocationInfo?{startLine:this.preprocessor.line,startCol:this.preprocessor.col-e,startOffset:this.preprocessor.offset-e,endLine:-1,endCol:-1,endOffset:-1}:null}_runParsingLoop(){if(!this.inLoop){for(this.inLoop=!0;this.active&&!this.paused;){this.consumedAfterSnapshot=0;const e=this._consume();this._ensureHibernation()||this._callState(e)}this.inLoop=!1}}pause(){this.paused=!0}resume(e){if(!this.paused)throw new Error("Parser was already resumed");this.paused=!1,this.inLoop||(this._runParsingLoop(),this.paused||null==e||e())}write(e,t,n){this.active=!0,this.preprocessor.write(e,t),this._runParsingLoop(),this.paused||null==n||n()}insertHtmlAtCurrentPos(e){this.active=!0,this.preprocessor.insertHtmlAtCurrentPos(e),this._runParsingLoop()}_ensureHibernation(){return!!this.preprocessor.endOfChunkHit&&(this.preprocessor.retreat(this.consumedAfterSnapshot),this.consumedAfterSnapshot=0,this.active=!1,!0)}_consume(){return this.consumedAfterSnapshot++,this.preprocessor.advance()}_advanceBy(e){this.consumedAfterSnapshot+=e;for(let t=0;t<e;t++)this.preprocessor.advance()}_consumeSequenceIfMatch(e,t){return!!this.preprocessor.startsWith(e,t)&&(this._advanceBy(e.length-1),!0)}_createStartTagToken(){this.currentToken={type:js.START_TAG,tagName:"",tagID:$s.UNKNOWN,selfClosing:!1,ackSelfClosing:!1,attrs:[],location:this.getCurrentLocation(1)}}_createEndTagToken(){this.currentToken={type:js.END_TAG,tagName:"",tagID:$s.UNKNOWN,selfClosing:!1,ackSelfClosing:!1,attrs:[],location:this.getCurrentLocation(2)}}_createCommentToken(e){this.currentToken={type:js.COMMENT,data:"",location:this.getCurrentLocation(e)}}_createDoctypeToken(e){this.currentToken={type:js.DOCTYPE,name:e,forceQuirks:!1,publicId:null,systemId:null,location:this.currentLocation}}_createCharacterToken(e,t){this.currentCharacterToken={type:e,chars:t,location:this.currentLocation}}_createAttr(e){this.currentAttr={name:e,value:""},this.currentLocation=this.getCurrentLocation(0)}_leaveAttrName(){var e,t;const n=this.currentToken;null===Js(n,this.currentAttr.name)?(n.attrs.push(this.currentAttr),n.location&&this.currentLocation&&((null!==(e=(t=n.location).attrs)&&void 0!==e?e:t.attrs=Object.create(null))[this.currentAttr.name]=this.currentLocation,this._leaveAttrValue())):this._err(Vs.duplicateAttribute)}_leaveAttrValue(){this.currentLocation&&(this.currentLocation.endLine=this.preprocessor.line,this.currentLocation.endCol=this.preprocessor.col,this.currentLocation.endOffset=this.preprocessor.offset)}prepareToken(e){this._emitCurrentCharacterToken(e.location),this.currentToken=null,e.location&&(e.location.endLine=this.preprocessor.line,e.location.endCol=this.preprocessor.col+1,e.location.endOffset=this.preprocessor.offset+1),this.currentLocation=this.getCurrentLocation(-1)}emitCurrentTagToken(){const e=this.currentToken;this.prepareToken(e),e.tagID=ei(e.tagName),e.type===js.START_TAG?(this.lastStartTagName=e.tagName,this.handler.onStartTag(e)):(e.attrs.length>0&&this._err(Vs.endTagWithAttributes),e.selfClosing&&this._err(Vs.endTagWithTrailingSolidus),this.handler.onEndTag(e)),this.preprocessor.dropParsedChunk()}emitCurrentComment(e){this.prepareToken(e),this.handler.onComment(e),this.preprocessor.dropParsedChunk()}emitCurrentDoctype(e){this.prepareToken(e),this.handler.onDoctype(e),this.preprocessor.dropParsedChunk()}_emitCurrentCharacterToken(e){if(this.currentCharacterToken){switch(e&&this.currentCharacterToken.location&&(this.currentCharacterToken.location.endLine=e.startLine,this.currentCharacterToken.location.endCol=e.startCol,this.currentCharacterToken.location.endOffset=e.startOffset),this.currentCharacterToken.type){case js.CHARACTER:this.handler.onCharacter(this.currentCharacterToken);break;case js.NULL_CHARACTER:this.handler.onNullCharacter(this.currentCharacterToken);break;case js.WHITESPACE_CHARACTER:this.handler.onWhitespaceCharacter(this.currentCharacterToken)}this.currentCharacterToken=null}}_emitEOFToken(){const e=this.getCurrentLocation(0);e&&(e.endLine=e.startLine,e.endCol=e.startCol,e.endOffset=e.startOffset),this._emitCurrentCharacterToken(e),this.handler.onEof({type:js.EOF,location:e}),this.active=!1}_appendCharToCurrentCharacterToken(e,t){if(this.currentCharacterToken){if(this.currentCharacterToken.type===e)return void(this.currentCharacterToken.chars+=t);this.currentLocation=this.getCurrentLocation(0),this._emitCurrentCharacterToken(this.currentLocation),this.preprocessor.dropParsedChunk()}this._createCharacterToken(e,t)}_emitCodePoint(e){const t=hi(e)?js.WHITESPACE_CHARACTER:e===xs.NULL?js.NULL_CHARACTER:js.CHARACTER;this._appendCharToCurrentCharacterToken(t,String.fromCodePoint(e))}_emitChars(e){this._appendCharToCurrentCharacterToken(js.CHARACTER,e)}_startCharacterReference(){this.returnState=this.state,this.state=ii.CHARACTER_REFERENCE,this.entityStartPos=this.preprocessor.pos,this.entityDecoder.startEntity(this._isCharacterReferenceInAttribute()?X.Attribute:X.Legacy)}_isCharacterReferenceInAttribute(){return this.returnState===ii.ATTRIBUTE_VALUE_DOUBLE_QUOTED||this.returnState===ii.ATTRIBUTE_VALUE_SINGLE_QUOTED||this.returnState===ii.ATTRIBUTE_VALUE_UNQUOTED}_flushCodePointConsumedAsCharacterReference(e){this._isCharacterReferenceInAttribute()?this.currentAttr.value+=String.fromCodePoint(e):this._emitCodePoint(e)}_callState(e){switch(this.state){case ii.DATA:this._stateData(e);break;case ii.RCDATA:this._stateRcdata(e);break;case ii.RAWTEXT:this._stateRawtext(e);break;case ii.SCRIPT_DATA:this._stateScriptData(e);break;case ii.PLAINTEXT:this._statePlaintext(e);break;case ii.TAG_OPEN:this._stateTagOpen(e);break;case ii.END_TAG_OPEN:this._stateEndTagOpen(e);break;case ii.TAG_NAME:this._stateTagName(e);break;case ii.RCDATA_LESS_THAN_SIGN:this._stateRcdataLessThanSign(e);break;case ii.RCDATA_END_TAG_OPEN:this._stateRcdataEndTagOpen(e);break;case ii.RCDATA_END_TAG_NAME:this._stateRcdataEndTagName(e);break;case ii.RAWTEXT_LESS_THAN_SIGN:this._stateRawtextLessThanSign(e);break;case ii.RAWTEXT_END_TAG_OPEN:this._stateRawtextEndTagOpen(e);break;case ii.RAWTEXT_END_TAG_NAME:this._stateRawtextEndTagName(e);break;case ii.SCRIPT_DATA_LESS_THAN_SIGN:this._stateScriptDataLessThanSign(e);break;case ii.SCRIPT_DATA_END_TAG_OPEN:this._stateScriptDataEndTagOpen(e);break;case ii.SCRIPT_DATA_END_TAG_NAME:this._stateScriptDataEndTagName(e);break;case ii.SCRIPT_DATA_ESCAPE_START:this._stateScriptDataEscapeStart(e);break;case ii.SCRIPT_DATA_ESCAPE_START_DASH:this._stateScriptDataEscapeStartDash(e);break;case ii.SCRIPT_DATA_ESCAPED:this._stateScriptDataEscaped(e);break;case ii.SCRIPT_DATA_ESCAPED_DASH:this._stateScriptDataEscapedDash(e);break;case ii.SCRIPT_DATA_ESCAPED_DASH_DASH:this._stateScriptDataEscapedDashDash(e);break;case ii.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN:this._stateScriptDataEscapedLessThanSign(e);break;case ii.SCRIPT_DATA_ESCAPED_END_TAG_OPEN:this._stateScriptDataEscapedEndTagOpen(e);break;case ii.SCRIPT_DATA_ESCAPED_END_TAG_NAME:this._stateScriptDataEscapedEndTagName(e);break;case ii.SCRIPT_DATA_DOUBLE_ESCAPE_START:this._stateScriptDataDoubleEscapeStart(e);break;case ii.SCRIPT_DATA_DOUBLE_ESCAPED:this._stateScriptDataDoubleEscaped(e);break;case ii.SCRIPT_DATA_DOUBLE_ESCAPED_DASH:this._stateScriptDataDoubleEscapedDash(e);break;case ii.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH:this._stateScriptDataDoubleEscapedDashDash(e);break;case ii.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN:this._stateScriptDataDoubleEscapedLessThanSign(e);break;case ii.SCRIPT_DATA_DOUBLE_ESCAPE_END:this._stateScriptDataDoubleEscapeEnd(e);break;case ii.BEFORE_ATTRIBUTE_NAME:this._stateBeforeAttributeName(e);break;case ii.ATTRIBUTE_NAME:this._stateAttributeName(e);break;case ii.AFTER_ATTRIBUTE_NAME:this._stateAfterAttributeName(e);break;case ii.BEFORE_ATTRIBUTE_VALUE:this._stateBeforeAttributeValue(e);break;case ii.ATTRIBUTE_VALUE_DOUBLE_QUOTED:this._stateAttributeValueDoubleQuoted(e);break;case ii.ATTRIBUTE_VALUE_SINGLE_QUOTED:this._stateAttributeValueSingleQuoted(e);break;case ii.ATTRIBUTE_VALUE_UNQUOTED:this._stateAttributeValueUnquoted(e);break;case ii.AFTER_ATTRIBUTE_VALUE_QUOTED:this._stateAfterAttributeValueQuoted(e);break;case ii.SELF_CLOSING_START_TAG:this._stateSelfClosingStartTag(e);break;case ii.BOGUS_COMMENT:this._stateBogusComment(e);break;case ii.MARKUP_DECLARATION_OPEN:this._stateMarkupDeclarationOpen(e);break;case ii.COMMENT_START:this._stateCommentStart(e);break;case ii.COMMENT_START_DASH:this._stateCommentStartDash(e);break;case ii.COMMENT:this._stateComment(e);break;case ii.COMMENT_LESS_THAN_SIGN:this._stateCommentLessThanSign(e);break;case ii.COMMENT_LESS_THAN_SIGN_BANG:this._stateCommentLessThanSignBang(e);break;case ii.COMMENT_LESS_THAN_SIGN_BANG_DASH:this._stateCommentLessThanSignBangDash(e);break;case ii.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH:this._stateCommentLessThanSignBangDashDash(e);break;case ii.COMMENT_END_DASH:this._stateCommentEndDash(e);break;case ii.COMMENT_END:this._stateCommentEnd(e);break;case ii.COMMENT_END_BANG:this._stateCommentEndBang(e);break;case ii.DOCTYPE:this._stateDoctype(e);break;case ii.BEFORE_DOCTYPE_NAME:this._stateBeforeDoctypeName(e);break;case ii.DOCTYPE_NAME:this._stateDoctypeName(e);break;case ii.AFTER_DOCTYPE_NAME:this._stateAfterDoctypeName(e);break;case ii.AFTER_DOCTYPE_PUBLIC_KEYWORD:this._stateAfterDoctypePublicKeyword(e);break;case ii.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER:this._stateBeforeDoctypePublicIdentifier(e);break;case ii.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED:this._stateDoctypePublicIdentifierDoubleQuoted(e);break;case ii.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED:this._stateDoctypePublicIdentifierSingleQuoted(e);break;case ii.AFTER_DOCTYPE_PUBLIC_IDENTIFIER:this._stateAfterDoctypePublicIdentifier(e);break;case ii.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS:this._stateBetweenDoctypePublicAndSystemIdentifiers(e);break;case ii.AFTER_DOCTYPE_SYSTEM_KEYWORD:this._stateAfterDoctypeSystemKeyword(e);break;case ii.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER:this._stateBeforeDoctypeSystemIdentifier(e);break;case ii.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED:this._stateDoctypeSystemIdentifierDoubleQuoted(e);break;case ii.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED:this._stateDoctypeSystemIdentifierSingleQuoted(e);break;case ii.AFTER_DOCTYPE_SYSTEM_IDENTIFIER:this._stateAfterDoctypeSystemIdentifier(e);break;case ii.BOGUS_DOCTYPE:this._stateBogusDoctype(e);break;case ii.CDATA_SECTION:this._stateCdataSection(e);break;case ii.CDATA_SECTION_BRACKET:this._stateCdataSectionBracket(e);break;case ii.CDATA_SECTION_END:this._stateCdataSectionEnd(e);break;case ii.CHARACTER_REFERENCE:this._stateCharacterReference();break;case ii.AMBIGUOUS_AMPERSAND:this._stateAmbiguousAmpersand(e);break;default:throw new Error("Unknown state")}}_stateData(e){switch(e){case xs.LESS_THAN_SIGN:this.state=ii.TAG_OPEN;break;case xs.AMPERSAND:this._startCharacterReference();break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this._emitCodePoint(e);break;case xs.EOF:this._emitEOFToken();break;default:this._emitCodePoint(e)}}_stateRcdata(e){switch(e){case xs.AMPERSAND:this._startCharacterReference();break;case xs.LESS_THAN_SIGN:this.state=ii.RCDATA_LESS_THAN_SIGN;break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this._emitChars(vs);break;case xs.EOF:this._emitEOFToken();break;default:this._emitCodePoint(e)}}_stateRawtext(e){switch(e){case xs.LESS_THAN_SIGN:this.state=ii.RAWTEXT_LESS_THAN_SIGN;break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this._emitChars(vs);break;case xs.EOF:this._emitEOFToken();break;default:this._emitCodePoint(e)}}_stateScriptData(e){switch(e){case xs.LESS_THAN_SIGN:this.state=ii.SCRIPT_DATA_LESS_THAN_SIGN;break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this._emitChars(vs);break;case xs.EOF:this._emitEOFToken();break;default:this._emitCodePoint(e)}}_statePlaintext(e){switch(e){case xs.NULL:this._err(Vs.unexpectedNullCharacter),this._emitChars(vs);break;case xs.EOF:this._emitEOFToken();break;default:this._emitCodePoint(e)}}_stateTagOpen(e){if(ci(e))this._createStartTagToken(),this.state=ii.TAG_NAME,this._stateTagName(e);else switch(e){case xs.EXCLAMATION_MARK:this.state=ii.MARKUP_DECLARATION_OPEN;break;case xs.SOLIDUS:this.state=ii.END_TAG_OPEN;break;case xs.QUESTION_MARK:this._err(Vs.unexpectedQuestionMarkInsteadOfTagName),this._createCommentToken(1),this.state=ii.BOGUS_COMMENT,this._stateBogusComment(e);break;case xs.EOF:this._err(Vs.eofBeforeTagName),this._emitChars("<"),this._emitEOFToken();break;default:this._err(Vs.invalidFirstCharacterOfTagName),this._emitChars("<"),this.state=ii.DATA,this._stateData(e)}}_stateEndTagOpen(e){if(ci(e))this._createEndTagToken(),this.state=ii.TAG_NAME,this._stateTagName(e);else switch(e){case xs.GREATER_THAN_SIGN:this._err(Vs.missingEndTagName),this.state=ii.DATA;break;case xs.EOF:this._err(Vs.eofBeforeTagName),this._emitChars("</"),this._emitEOFToken();break;default:this._err(Vs.invalidFirstCharacterOfTagName),this._createCommentToken(2),this.state=ii.BOGUS_COMMENT,this._stateBogusComment(e)}}_stateTagName(e){const t=this.currentToken;switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:this.state=ii.BEFORE_ATTRIBUTE_NAME;break;case xs.SOLIDUS:this.state=ii.SELF_CLOSING_START_TAG;break;case xs.GREATER_THAN_SIGN:this.state=ii.DATA,this.emitCurrentTagToken();break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),t.tagName+=vs;break;case xs.EOF:this._err(Vs.eofInTag),this._emitEOFToken();break;default:t.tagName+=String.fromCodePoint(oi(e)?ui(e):e)}}_stateRcdataLessThanSign(e){e===xs.SOLIDUS?this.state=ii.RCDATA_END_TAG_OPEN:(this._emitChars("<"),this.state=ii.RCDATA,this._stateRcdata(e))}_stateRcdataEndTagOpen(e){ci(e)?(this.state=ii.RCDATA_END_TAG_NAME,this._stateRcdataEndTagName(e)):(this._emitChars("</"),this.state=ii.RCDATA,this._stateRcdata(e))}handleSpecialEndTag(e){if(!this.preprocessor.startsWith(this.lastStartTagName,!1))return!this._ensureHibernation();switch(this._createEndTagToken(),this.currentToken.tagName=this.lastStartTagName,this.preprocessor.peek(this.lastStartTagName.length)){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:return this._advanceBy(this.lastStartTagName.length),this.state=ii.BEFORE_ATTRIBUTE_NAME,!1;case xs.SOLIDUS:return this._advanceBy(this.lastStartTagName.length),this.state=ii.SELF_CLOSING_START_TAG,!1;case xs.GREATER_THAN_SIGN:return this._advanceBy(this.lastStartTagName.length),this.emitCurrentTagToken(),this.state=ii.DATA,!1;default:return!this._ensureHibernation()}}_stateRcdataEndTagName(e){this.handleSpecialEndTag(e)&&(this._emitChars("</"),this.state=ii.RCDATA,this._stateRcdata(e))}_stateRawtextLessThanSign(e){e===xs.SOLIDUS?this.state=ii.RAWTEXT_END_TAG_OPEN:(this._emitChars("<"),this.state=ii.RAWTEXT,this._stateRawtext(e))}_stateRawtextEndTagOpen(e){ci(e)?(this.state=ii.RAWTEXT_END_TAG_NAME,this._stateRawtextEndTagName(e)):(this._emitChars("</"),this.state=ii.RAWTEXT,this._stateRawtext(e))}_stateRawtextEndTagName(e){this.handleSpecialEndTag(e)&&(this._emitChars("</"),this.state=ii.RAWTEXT,this._stateRawtext(e))}_stateScriptDataLessThanSign(e){switch(e){case xs.SOLIDUS:this.state=ii.SCRIPT_DATA_END_TAG_OPEN;break;case xs.EXCLAMATION_MARK:this.state=ii.SCRIPT_DATA_ESCAPE_START,this._emitChars("<!");break;default:this._emitChars("<"),this.state=ii.SCRIPT_DATA,this._stateScriptData(e)}}_stateScriptDataEndTagOpen(e){ci(e)?(this.state=ii.SCRIPT_DATA_END_TAG_NAME,this._stateScriptDataEndTagName(e)):(this._emitChars("</"),this.state=ii.SCRIPT_DATA,this._stateScriptData(e))}_stateScriptDataEndTagName(e){this.handleSpecialEndTag(e)&&(this._emitChars("</"),this.state=ii.SCRIPT_DATA,this._stateScriptData(e))}_stateScriptDataEscapeStart(e){e===xs.HYPHEN_MINUS?(this.state=ii.SCRIPT_DATA_ESCAPE_START_DASH,this._emitChars("-")):(this.state=ii.SCRIPT_DATA,this._stateScriptData(e))}_stateScriptDataEscapeStartDash(e){e===xs.HYPHEN_MINUS?(this.state=ii.SCRIPT_DATA_ESCAPED_DASH_DASH,this._emitChars("-")):(this.state=ii.SCRIPT_DATA,this._stateScriptData(e))}_stateScriptDataEscaped(e){switch(e){case xs.HYPHEN_MINUS:this.state=ii.SCRIPT_DATA_ESCAPED_DASH,this._emitChars("-");break;case xs.LESS_THAN_SIGN:this.state=ii.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this._emitChars(vs);break;case xs.EOF:this._err(Vs.eofInScriptHtmlCommentLikeText),this._emitEOFToken();break;default:this._emitCodePoint(e)}}_stateScriptDataEscapedDash(e){switch(e){case xs.HYPHEN_MINUS:this.state=ii.SCRIPT_DATA_ESCAPED_DASH_DASH,this._emitChars("-");break;case xs.LESS_THAN_SIGN:this.state=ii.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this.state=ii.SCRIPT_DATA_ESCAPED,this._emitChars(vs);break;case xs.EOF:this._err(Vs.eofInScriptHtmlCommentLikeText),this._emitEOFToken();break;default:this.state=ii.SCRIPT_DATA_ESCAPED,this._emitCodePoint(e)}}_stateScriptDataEscapedDashDash(e){switch(e){case xs.HYPHEN_MINUS:this._emitChars("-");break;case xs.LESS_THAN_SIGN:this.state=ii.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;break;case xs.GREATER_THAN_SIGN:this.state=ii.SCRIPT_DATA,this._emitChars(">");break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this.state=ii.SCRIPT_DATA_ESCAPED,this._emitChars(vs);break;case xs.EOF:this._err(Vs.eofInScriptHtmlCommentLikeText),this._emitEOFToken();break;default:this.state=ii.SCRIPT_DATA_ESCAPED,this._emitCodePoint(e)}}_stateScriptDataEscapedLessThanSign(e){e===xs.SOLIDUS?this.state=ii.SCRIPT_DATA_ESCAPED_END_TAG_OPEN:ci(e)?(this._emitChars("<"),this.state=ii.SCRIPT_DATA_DOUBLE_ESCAPE_START,this._stateScriptDataDoubleEscapeStart(e)):(this._emitChars("<"),this.state=ii.SCRIPT_DATA_ESCAPED,this._stateScriptDataEscaped(e))}_stateScriptDataEscapedEndTagOpen(e){ci(e)?(this.state=ii.SCRIPT_DATA_ESCAPED_END_TAG_NAME,this._stateScriptDataEscapedEndTagName(e)):(this._emitChars("</"),this.state=ii.SCRIPT_DATA_ESCAPED,this._stateScriptDataEscaped(e))}_stateScriptDataEscapedEndTagName(e){this.handleSpecialEndTag(e)&&(this._emitChars("</"),this.state=ii.SCRIPT_DATA_ESCAPED,this._stateScriptDataEscaped(e))}_stateScriptDataDoubleEscapeStart(e){if(this.preprocessor.startsWith(Hs,!1)&&di(this.preprocessor.peek(6))){this._emitCodePoint(e);for(let e=0;e<6;e++)this._emitCodePoint(this._consume());this.state=ii.SCRIPT_DATA_DOUBLE_ESCAPED}else this._ensureHibernation()||(this.state=ii.SCRIPT_DATA_ESCAPED,this._stateScriptDataEscaped(e))}_stateScriptDataDoubleEscaped(e){switch(e){case xs.HYPHEN_MINUS:this.state=ii.SCRIPT_DATA_DOUBLE_ESCAPED_DASH,this._emitChars("-");break;case xs.LESS_THAN_SIGN:this.state=ii.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN,this._emitChars("<");break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this._emitChars(vs);break;case xs.EOF:this._err(Vs.eofInScriptHtmlCommentLikeText),this._emitEOFToken();break;default:this._emitCodePoint(e)}}_stateScriptDataDoubleEscapedDash(e){switch(e){case xs.HYPHEN_MINUS:this.state=ii.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH,this._emitChars("-");break;case xs.LESS_THAN_SIGN:this.state=ii.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN,this._emitChars("<");break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this.state=ii.SCRIPT_DATA_DOUBLE_ESCAPED,this._emitChars(vs);break;case xs.EOF:this._err(Vs.eofInScriptHtmlCommentLikeText),this._emitEOFToken();break;default:this.state=ii.SCRIPT_DATA_DOUBLE_ESCAPED,this._emitCodePoint(e)}}_stateScriptDataDoubleEscapedDashDash(e){switch(e){case xs.HYPHEN_MINUS:this._emitChars("-");break;case xs.LESS_THAN_SIGN:this.state=ii.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN,this._emitChars("<");break;case xs.GREATER_THAN_SIGN:this.state=ii.SCRIPT_DATA,this._emitChars(">");break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this.state=ii.SCRIPT_DATA_DOUBLE_ESCAPED,this._emitChars(vs);break;case xs.EOF:this._err(Vs.eofInScriptHtmlCommentLikeText),this._emitEOFToken();break;default:this.state=ii.SCRIPT_DATA_DOUBLE_ESCAPED,this._emitCodePoint(e)}}_stateScriptDataDoubleEscapedLessThanSign(e){e===xs.SOLIDUS?(this.state=ii.SCRIPT_DATA_DOUBLE_ESCAPE_END,this._emitChars("/")):(this.state=ii.SCRIPT_DATA_DOUBLE_ESCAPED,this._stateScriptDataDoubleEscaped(e))}_stateScriptDataDoubleEscapeEnd(e){if(this.preprocessor.startsWith(Hs,!1)&&di(this.preprocessor.peek(6))){this._emitCodePoint(e);for(let e=0;e<6;e++)this._emitCodePoint(this._consume());this.state=ii.SCRIPT_DATA_ESCAPED}else this._ensureHibernation()||(this.state=ii.SCRIPT_DATA_DOUBLE_ESCAPED,this._stateScriptDataDoubleEscaped(e))}_stateBeforeAttributeName(e){switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:break;case xs.SOLIDUS:case xs.GREATER_THAN_SIGN:case xs.EOF:this.state=ii.AFTER_ATTRIBUTE_NAME,this._stateAfterAttributeName(e);break;case xs.EQUALS_SIGN:this._err(Vs.unexpectedEqualsSignBeforeAttributeName),this._createAttr("="),this.state=ii.ATTRIBUTE_NAME;break;default:this._createAttr(""),this.state=ii.ATTRIBUTE_NAME,this._stateAttributeName(e)}}_stateAttributeName(e){switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:case xs.SOLIDUS:case xs.GREATER_THAN_SIGN:case xs.EOF:this._leaveAttrName(),this.state=ii.AFTER_ATTRIBUTE_NAME,this._stateAfterAttributeName(e);break;case xs.EQUALS_SIGN:this._leaveAttrName(),this.state=ii.BEFORE_ATTRIBUTE_VALUE;break;case xs.QUOTATION_MARK:case xs.APOSTROPHE:case xs.LESS_THAN_SIGN:this._err(Vs.unexpectedCharacterInAttributeName),this.currentAttr.name+=String.fromCodePoint(e);break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this.currentAttr.name+=vs;break;default:this.currentAttr.name+=String.fromCodePoint(oi(e)?ui(e):e)}}_stateAfterAttributeName(e){switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:break;case xs.SOLIDUS:this.state=ii.SELF_CLOSING_START_TAG;break;case xs.EQUALS_SIGN:this.state=ii.BEFORE_ATTRIBUTE_VALUE;break;case xs.GREATER_THAN_SIGN:this.state=ii.DATA,this.emitCurrentTagToken();break;case xs.EOF:this._err(Vs.eofInTag),this._emitEOFToken();break;default:this._createAttr(""),this.state=ii.ATTRIBUTE_NAME,this._stateAttributeName(e)}}_stateBeforeAttributeValue(e){switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:break;case xs.QUOTATION_MARK:this.state=ii.ATTRIBUTE_VALUE_DOUBLE_QUOTED;break;case xs.APOSTROPHE:this.state=ii.ATTRIBUTE_VALUE_SINGLE_QUOTED;break;case xs.GREATER_THAN_SIGN:this._err(Vs.missingAttributeValue),this.state=ii.DATA,this.emitCurrentTagToken();break;default:this.state=ii.ATTRIBUTE_VALUE_UNQUOTED,this._stateAttributeValueUnquoted(e)}}_stateAttributeValueDoubleQuoted(e){switch(e){case xs.QUOTATION_MARK:this.state=ii.AFTER_ATTRIBUTE_VALUE_QUOTED;break;case xs.AMPERSAND:this._startCharacterReference();break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this.currentAttr.value+=vs;break;case xs.EOF:this._err(Vs.eofInTag),this._emitEOFToken();break;default:this.currentAttr.value+=String.fromCodePoint(e)}}_stateAttributeValueSingleQuoted(e){switch(e){case xs.APOSTROPHE:this.state=ii.AFTER_ATTRIBUTE_VALUE_QUOTED;break;case xs.AMPERSAND:this._startCharacterReference();break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this.currentAttr.value+=vs;break;case xs.EOF:this._err(Vs.eofInTag),this._emitEOFToken();break;default:this.currentAttr.value+=String.fromCodePoint(e)}}_stateAttributeValueUnquoted(e){switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:this._leaveAttrValue(),this.state=ii.BEFORE_ATTRIBUTE_NAME;break;case xs.AMPERSAND:this._startCharacterReference();break;case xs.GREATER_THAN_SIGN:this._leaveAttrValue(),this.state=ii.DATA,this.emitCurrentTagToken();break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this.currentAttr.value+=vs;break;case xs.QUOTATION_MARK:case xs.APOSTROPHE:case xs.LESS_THAN_SIGN:case xs.EQUALS_SIGN:case xs.GRAVE_ACCENT:this._err(Vs.unexpectedCharacterInUnquotedAttributeValue),this.currentAttr.value+=String.fromCodePoint(e);break;case xs.EOF:this._err(Vs.eofInTag),this._emitEOFToken();break;default:this.currentAttr.value+=String.fromCodePoint(e)}}_stateAfterAttributeValueQuoted(e){switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:this._leaveAttrValue(),this.state=ii.BEFORE_ATTRIBUTE_NAME;break;case xs.SOLIDUS:this._leaveAttrValue(),this.state=ii.SELF_CLOSING_START_TAG;break;case xs.GREATER_THAN_SIGN:this._leaveAttrValue(),this.state=ii.DATA,this.emitCurrentTagToken();break;case xs.EOF:this._err(Vs.eofInTag),this._emitEOFToken();break;default:this._err(Vs.missingWhitespaceBetweenAttributes),this.state=ii.BEFORE_ATTRIBUTE_NAME,this._stateBeforeAttributeName(e)}}_stateSelfClosingStartTag(e){switch(e){case xs.GREATER_THAN_SIGN:this.currentToken.selfClosing=!0,this.state=ii.DATA,this.emitCurrentTagToken();break;case xs.EOF:this._err(Vs.eofInTag),this._emitEOFToken();break;default:this._err(Vs.unexpectedSolidusInTag),this.state=ii.BEFORE_ATTRIBUTE_NAME,this._stateBeforeAttributeName(e)}}_stateBogusComment(e){const t=this.currentToken;switch(e){case xs.GREATER_THAN_SIGN:this.state=ii.DATA,this.emitCurrentComment(t);break;case xs.EOF:this.emitCurrentComment(t),this._emitEOFToken();break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),t.data+=vs;break;default:t.data+=String.fromCodePoint(e)}}_stateMarkupDeclarationOpen(e){this._consumeSequenceIfMatch("--",!0)?(this._createCommentToken(3),this.state=ii.COMMENT_START):this._consumeSequenceIfMatch(Fs,!1)?(this.currentLocation=this.getCurrentLocation(8),this.state=ii.DOCTYPE):this._consumeSequenceIfMatch(Us,!0)?this.inForeignNode?this.state=ii.CDATA_SECTION:(this._err(Vs.cdataInHtmlContent),this._createCommentToken(8),this.currentToken.data="[CDATA[",this.state=ii.BOGUS_COMMENT):this._ensureHibernation()||(this._err(Vs.incorrectlyOpenedComment),this._createCommentToken(2),this.state=ii.BOGUS_COMMENT,this._stateBogusComment(e))}_stateCommentStart(e){switch(e){case xs.HYPHEN_MINUS:this.state=ii.COMMENT_START_DASH;break;case xs.GREATER_THAN_SIGN:{this._err(Vs.abruptClosingOfEmptyComment),this.state=ii.DATA;const e=this.currentToken;this.emitCurrentComment(e);break}default:this.state=ii.COMMENT,this._stateComment(e)}}_stateCommentStartDash(e){const t=this.currentToken;switch(e){case xs.HYPHEN_MINUS:this.state=ii.COMMENT_END;break;case xs.GREATER_THAN_SIGN:this._err(Vs.abruptClosingOfEmptyComment),this.state=ii.DATA,this.emitCurrentComment(t);break;case xs.EOF:this._err(Vs.eofInComment),this.emitCurrentComment(t),this._emitEOFToken();break;default:t.data+="-",this.state=ii.COMMENT,this._stateComment(e)}}_stateComment(e){const t=this.currentToken;switch(e){case xs.HYPHEN_MINUS:this.state=ii.COMMENT_END_DASH;break;case xs.LESS_THAN_SIGN:t.data+="<",this.state=ii.COMMENT_LESS_THAN_SIGN;break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),t.data+=vs;break;case xs.EOF:this._err(Vs.eofInComment),this.emitCurrentComment(t),this._emitEOFToken();break;default:t.data+=String.fromCodePoint(e)}}_stateCommentLessThanSign(e){const t=this.currentToken;switch(e){case xs.EXCLAMATION_MARK:t.data+="!",this.state=ii.COMMENT_LESS_THAN_SIGN_BANG;break;case xs.LESS_THAN_SIGN:t.data+="<";break;default:this.state=ii.COMMENT,this._stateComment(e)}}_stateCommentLessThanSignBang(e){e===xs.HYPHEN_MINUS?this.state=ii.COMMENT_LESS_THAN_SIGN_BANG_DASH:(this.state=ii.COMMENT,this._stateComment(e))}_stateCommentLessThanSignBangDash(e){e===xs.HYPHEN_MINUS?this.state=ii.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH:(this.state=ii.COMMENT_END_DASH,this._stateCommentEndDash(e))}_stateCommentLessThanSignBangDashDash(e){e!==xs.GREATER_THAN_SIGN&&e!==xs.EOF&&this._err(Vs.nestedComment),this.state=ii.COMMENT_END,this._stateCommentEnd(e)}_stateCommentEndDash(e){const t=this.currentToken;switch(e){case xs.HYPHEN_MINUS:this.state=ii.COMMENT_END;break;case xs.EOF:this._err(Vs.eofInComment),this.emitCurrentComment(t),this._emitEOFToken();break;default:t.data+="-",this.state=ii.COMMENT,this._stateComment(e)}}_stateCommentEnd(e){const t=this.currentToken;switch(e){case xs.GREATER_THAN_SIGN:this.state=ii.DATA,this.emitCurrentComment(t);break;case xs.EXCLAMATION_MARK:this.state=ii.COMMENT_END_BANG;break;case xs.HYPHEN_MINUS:t.data+="-";break;case xs.EOF:this._err(Vs.eofInComment),this.emitCurrentComment(t),this._emitEOFToken();break;default:t.data+="--",this.state=ii.COMMENT,this._stateComment(e)}}_stateCommentEndBang(e){const t=this.currentToken;switch(e){case xs.HYPHEN_MINUS:t.data+="--!",this.state=ii.COMMENT_END_DASH;break;case xs.GREATER_THAN_SIGN:this._err(Vs.incorrectlyClosedComment),this.state=ii.DATA,this.emitCurrentComment(t);break;case xs.EOF:this._err(Vs.eofInComment),this.emitCurrentComment(t),this._emitEOFToken();break;default:t.data+="--!",this.state=ii.COMMENT,this._stateComment(e)}}_stateDoctype(e){switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:this.state=ii.BEFORE_DOCTYPE_NAME;break;case xs.GREATER_THAN_SIGN:this.state=ii.BEFORE_DOCTYPE_NAME,this._stateBeforeDoctypeName(e);break;case xs.EOF:{this._err(Vs.eofInDoctype),this._createDoctypeToken(null);const e=this.currentToken;e.forceQuirks=!0,this.emitCurrentDoctype(e),this._emitEOFToken();break}default:this._err(Vs.missingWhitespaceBeforeDoctypeName),this.state=ii.BEFORE_DOCTYPE_NAME,this._stateBeforeDoctypeName(e)}}_stateBeforeDoctypeName(e){if(oi(e))this._createDoctypeToken(String.fromCharCode(ui(e))),this.state=ii.DOCTYPE_NAME;else switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),this._createDoctypeToken(vs),this.state=ii.DOCTYPE_NAME;break;case xs.GREATER_THAN_SIGN:{this._err(Vs.missingDoctypeName),this._createDoctypeToken(null);const e=this.currentToken;e.forceQuirks=!0,this.emitCurrentDoctype(e),this.state=ii.DATA;break}case xs.EOF:{this._err(Vs.eofInDoctype),this._createDoctypeToken(null);const e=this.currentToken;e.forceQuirks=!0,this.emitCurrentDoctype(e),this._emitEOFToken();break}default:this._createDoctypeToken(String.fromCodePoint(e)),this.state=ii.DOCTYPE_NAME}}_stateDoctypeName(e){const t=this.currentToken;switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:this.state=ii.AFTER_DOCTYPE_NAME;break;case xs.GREATER_THAN_SIGN:this.state=ii.DATA,this.emitCurrentDoctype(t);break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),t.name+=vs;break;case xs.EOF:this._err(Vs.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:t.name+=String.fromCodePoint(oi(e)?ui(e):e)}}_stateAfterDoctypeName(e){const t=this.currentToken;switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:break;case xs.GREATER_THAN_SIGN:this.state=ii.DATA,this.emitCurrentDoctype(t);break;case xs.EOF:this._err(Vs.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._consumeSequenceIfMatch("public",!1)?this.state=ii.AFTER_DOCTYPE_PUBLIC_KEYWORD:this._consumeSequenceIfMatch("system",!1)?this.state=ii.AFTER_DOCTYPE_SYSTEM_KEYWORD:this._ensureHibernation()||(this._err(Vs.invalidCharacterSequenceAfterDoctypeName),t.forceQuirks=!0,this.state=ii.BOGUS_DOCTYPE,this._stateBogusDoctype(e))}}_stateAfterDoctypePublicKeyword(e){const t=this.currentToken;switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:this.state=ii.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;break;case xs.QUOTATION_MARK:this._err(Vs.missingWhitespaceAfterDoctypePublicKeyword),t.publicId="",this.state=ii.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;break;case xs.APOSTROPHE:this._err(Vs.missingWhitespaceAfterDoctypePublicKeyword),t.publicId="",this.state=ii.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;break;case xs.GREATER_THAN_SIGN:this._err(Vs.missingDoctypePublicIdentifier),t.forceQuirks=!0,this.state=ii.DATA,this.emitCurrentDoctype(t);break;case xs.EOF:this._err(Vs.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(Vs.missingQuoteBeforeDoctypePublicIdentifier),t.forceQuirks=!0,this.state=ii.BOGUS_DOCTYPE,this._stateBogusDoctype(e)}}_stateBeforeDoctypePublicIdentifier(e){const t=this.currentToken;switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:break;case xs.QUOTATION_MARK:t.publicId="",this.state=ii.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;break;case xs.APOSTROPHE:t.publicId="",this.state=ii.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;break;case xs.GREATER_THAN_SIGN:this._err(Vs.missingDoctypePublicIdentifier),t.forceQuirks=!0,this.state=ii.DATA,this.emitCurrentDoctype(t);break;case xs.EOF:this._err(Vs.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(Vs.missingQuoteBeforeDoctypePublicIdentifier),t.forceQuirks=!0,this.state=ii.BOGUS_DOCTYPE,this._stateBogusDoctype(e)}}_stateDoctypePublicIdentifierDoubleQuoted(e){const t=this.currentToken;switch(e){case xs.QUOTATION_MARK:this.state=ii.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),t.publicId+=vs;break;case xs.GREATER_THAN_SIGN:this._err(Vs.abruptDoctypePublicIdentifier),t.forceQuirks=!0,this.emitCurrentDoctype(t),this.state=ii.DATA;break;case xs.EOF:this._err(Vs.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:t.publicId+=String.fromCodePoint(e)}}_stateDoctypePublicIdentifierSingleQuoted(e){const t=this.currentToken;switch(e){case xs.APOSTROPHE:this.state=ii.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),t.publicId+=vs;break;case xs.GREATER_THAN_SIGN:this._err(Vs.abruptDoctypePublicIdentifier),t.forceQuirks=!0,this.emitCurrentDoctype(t),this.state=ii.DATA;break;case xs.EOF:this._err(Vs.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:t.publicId+=String.fromCodePoint(e)}}_stateAfterDoctypePublicIdentifier(e){const t=this.currentToken;switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:this.state=ii.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;break;case xs.GREATER_THAN_SIGN:this.state=ii.DATA,this.emitCurrentDoctype(t);break;case xs.QUOTATION_MARK:this._err(Vs.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers),t.systemId="",this.state=ii.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;break;case xs.APOSTROPHE:this._err(Vs.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers),t.systemId="",this.state=ii.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;break;case xs.EOF:this._err(Vs.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(Vs.missingQuoteBeforeDoctypeSystemIdentifier),t.forceQuirks=!0,this.state=ii.BOGUS_DOCTYPE,this._stateBogusDoctype(e)}}_stateBetweenDoctypePublicAndSystemIdentifiers(e){const t=this.currentToken;switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:break;case xs.GREATER_THAN_SIGN:this.emitCurrentDoctype(t),this.state=ii.DATA;break;case xs.QUOTATION_MARK:t.systemId="",this.state=ii.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;break;case xs.APOSTROPHE:t.systemId="",this.state=ii.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;break;case xs.EOF:this._err(Vs.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(Vs.missingQuoteBeforeDoctypeSystemIdentifier),t.forceQuirks=!0,this.state=ii.BOGUS_DOCTYPE,this._stateBogusDoctype(e)}}_stateAfterDoctypeSystemKeyword(e){const t=this.currentToken;switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:this.state=ii.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;break;case xs.QUOTATION_MARK:this._err(Vs.missingWhitespaceAfterDoctypeSystemKeyword),t.systemId="",this.state=ii.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;break;case xs.APOSTROPHE:this._err(Vs.missingWhitespaceAfterDoctypeSystemKeyword),t.systemId="",this.state=ii.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;break;case xs.GREATER_THAN_SIGN:this._err(Vs.missingDoctypeSystemIdentifier),t.forceQuirks=!0,this.state=ii.DATA,this.emitCurrentDoctype(t);break;case xs.EOF:this._err(Vs.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(Vs.missingQuoteBeforeDoctypeSystemIdentifier),t.forceQuirks=!0,this.state=ii.BOGUS_DOCTYPE,this._stateBogusDoctype(e)}}_stateBeforeDoctypeSystemIdentifier(e){const t=this.currentToken;switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:break;case xs.QUOTATION_MARK:t.systemId="",this.state=ii.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;break;case xs.APOSTROPHE:t.systemId="",this.state=ii.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;break;case xs.GREATER_THAN_SIGN:this._err(Vs.missingDoctypeSystemIdentifier),t.forceQuirks=!0,this.state=ii.DATA,this.emitCurrentDoctype(t);break;case xs.EOF:this._err(Vs.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(Vs.missingQuoteBeforeDoctypeSystemIdentifier),t.forceQuirks=!0,this.state=ii.BOGUS_DOCTYPE,this._stateBogusDoctype(e)}}_stateDoctypeSystemIdentifierDoubleQuoted(e){const t=this.currentToken;switch(e){case xs.QUOTATION_MARK:this.state=ii.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),t.systemId+=vs;break;case xs.GREATER_THAN_SIGN:this._err(Vs.abruptDoctypeSystemIdentifier),t.forceQuirks=!0,this.emitCurrentDoctype(t),this.state=ii.DATA;break;case xs.EOF:this._err(Vs.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:t.systemId+=String.fromCodePoint(e)}}_stateDoctypeSystemIdentifierSingleQuoted(e){const t=this.currentToken;switch(e){case xs.APOSTROPHE:this.state=ii.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;break;case xs.NULL:this._err(Vs.unexpectedNullCharacter),t.systemId+=vs;break;case xs.GREATER_THAN_SIGN:this._err(Vs.abruptDoctypeSystemIdentifier),t.forceQuirks=!0,this.emitCurrentDoctype(t),this.state=ii.DATA;break;case xs.EOF:this._err(Vs.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:t.systemId+=String.fromCodePoint(e)}}_stateAfterDoctypeSystemIdentifier(e){const t=this.currentToken;switch(e){case xs.SPACE:case xs.LINE_FEED:case xs.TABULATION:case xs.FORM_FEED:break;case xs.GREATER_THAN_SIGN:this.emitCurrentDoctype(t),this.state=ii.DATA;break;case xs.EOF:this._err(Vs.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(Vs.unexpectedCharacterAfterDoctypeSystemIdentifier),this.state=ii.BOGUS_DOCTYPE,this._stateBogusDoctype(e)}}_stateBogusDoctype(e){const t=this.currentToken;switch(e){case xs.GREATER_THAN_SIGN:this.emitCurrentDoctype(t),this.state=ii.DATA;break;case xs.NULL:this._err(Vs.unexpectedNullCharacter);break;case xs.EOF:this.emitCurrentDoctype(t),this._emitEOFToken()}}_stateCdataSection(e){switch(e){case xs.RIGHT_SQUARE_BRACKET:this.state=ii.CDATA_SECTION_BRACKET;break;case xs.EOF:this._err(Vs.eofInCdata),this._emitEOFToken();break;default:this._emitCodePoint(e)}}_stateCdataSectionBracket(e){e===xs.RIGHT_SQUARE_BRACKET?this.state=ii.CDATA_SECTION_END:(this._emitChars("]"),this.state=ii.CDATA_SECTION,this._stateCdataSection(e))}_stateCdataSectionEnd(e){switch(e){case xs.GREATER_THAN_SIGN:this.state=ii.DATA;break;case xs.RIGHT_SQUARE_BRACKET:this._emitChars("]");break;default:this._emitChars("]]"),this.state=ii.CDATA_SECTION,this._stateCdataSection(e)}}_stateCharacterReference(){let e=this.entityDecoder.write(this.preprocessor.html,this.preprocessor.pos);if(e<0){if(!this.preprocessor.lastChunkWritten)return this.active=!1,this.preprocessor.pos=this.preprocessor.html.length-1,this.consumedAfterSnapshot=0,void(this.preprocessor.endOfChunkHit=!0);e=this.entityDecoder.end()}0===e?(this.preprocessor.pos=this.entityStartPos,this._flushCodePointConsumedAsCharacterReference(xs.AMPERSAND),this.state=!this._isCharacterReferenceInAttribute()&&li(this.preprocessor.peek(1))?ii.AMBIGUOUS_AMPERSAND:this.returnState):this.state=this.returnState}_stateAmbiguousAmpersand(e){li(e)?this._flushCodePointConsumedAsCharacterReference(e):(e===xs.SEMICOLON&&this._err(Vs.unknownNamedCharacterReference),this.state=this.returnState,this._callState(e))}}const fi=new Set([$s.DD,$s.DT,$s.LI,$s.OPTGROUP,$s.OPTION,$s.P,$s.RB,$s.RP,$s.RT,$s.RTC]),Ei=new Set([...fi,$s.CAPTION,$s.COLGROUP,$s.TBODY,$s.TD,$s.TFOOT,$s.TH,$s.THEAD,$s.TR]),Ti=new Set([$s.APPLET,$s.CAPTION,$s.HTML,$s.MARQUEE,$s.OBJECT,$s.TABLE,$s.TD,$s.TEMPLATE,$s.TH]),mi=new Set([...Ti,$s.OL,$s.UL]),Ai=new Set([...Ti,$s.BUTTON]),gi=new Set([$s.ANNOTATION_XML,$s.MI,$s.MN,$s.MO,$s.MS,$s.MTEXT]),_i=new Set([$s.DESC,$s.FOREIGN_OBJECT,$s.TITLE]),Si=new Set([$s.TR,$s.TEMPLATE,$s.HTML]),bi=new Set([$s.TBODY,$s.TFOOT,$s.THEAD,$s.TEMPLATE,$s.HTML]),Ii=new Set([$s.TABLE,$s.TEMPLATE,$s.HTML]),Ni=new Set([$s.TD,$s.TH]);class Ci{get currentTmplContentOrNode(){return this._isInTemplate()?this.treeAdapter.getTemplateContent(this.current):this.current}constructor(e,t,n){this.treeAdapter=t,this.handler=n,this.items=[],this.tagIDs=[],this.stackTop=-1,this.tmplCount=0,this.currentTagId=$s.UNKNOWN,this.current=e}_indexOf(e){return this.items.lastIndexOf(e,this.stackTop)}_isInTemplate(){return this.currentTagId===$s.TEMPLATE&&this.treeAdapter.getNamespaceURI(this.current)===Qs.HTML}_updateCurrentElement(){this.current=this.items[this.stackTop],this.currentTagId=this.tagIDs[this.stackTop]}push(e,t){this.stackTop++,this.items[this.stackTop]=e,this.current=e,this.tagIDs[this.stackTop]=t,this.currentTagId=t,this._isInTemplate()&&this.tmplCount++,this.handler.onItemPush(e,t,!0)}pop(){const e=this.current;this.tmplCount>0&&this._isInTemplate()&&this.tmplCount--,this.stackTop--,this._updateCurrentElement(),this.handler.onItemPop(e,!0)}replace(e,t){const n=this._indexOf(e);this.items[n]=t,n===this.stackTop&&(this.current=t)}insertAfter(e,t,n){const r=this._indexOf(e)+1;this.items.splice(r,0,t),this.tagIDs.splice(r,0,n),this.stackTop++,r===this.stackTop&&this._updateCurrentElement(),this.handler.onItemPush(this.current,this.currentTagId,r===this.stackTop)}popUntilTagNamePopped(e){let t=this.stackTop+1;do{t=this.tagIDs.lastIndexOf(e,t-1)}while(t>0&&this.treeAdapter.getNamespaceURI(this.items[t])!==Qs.HTML);this.shortenToLength(t<0?0:t)}shortenToLength(e){for(;this.stackTop>=e;){const t=this.current;this.tmplCount>0&&this._isInTemplate()&&(this.tmplCount-=1),this.stackTop--,this._updateCurrentElement(),this.handler.onItemPop(t,this.stackTop<e)}}popUntilElementPopped(e){const t=this._indexOf(e);this.shortenToLength(t<0?0:t)}popUntilPopped(e,t){const n=this._indexOfTagNames(e,t);this.shortenToLength(n<0?0:n)}popUntilNumberedHeaderPopped(){this.popUntilPopped(ri,Qs.HTML)}popUntilTableCellPopped(){this.popUntilPopped(Ni,Qs.HTML)}popAllUpToHtmlElement(){this.tmplCount=0,this.shortenToLength(1)}_indexOfTagNames(e,t){for(let n=this.stackTop;n>=0;n--)if(e.has(this.tagIDs[n])&&this.treeAdapter.getNamespaceURI(this.items[n])===t)return n;return-1}clearBackTo(e,t){const n=this._indexOfTagNames(e,t);this.shortenToLength(n+1)}clearBackToTableContext(){this.clearBackTo(Ii,Qs.HTML)}clearBackToTableBodyContext(){this.clearBackTo(bi,Qs.HTML)}clearBackToTableRowContext(){this.clearBackTo(Si,Qs.HTML)}remove(e){const t=this._indexOf(e);t>=0&&(t===this.stackTop?this.pop():(this.items.splice(t,1),this.tagIDs.splice(t,1),this.stackTop--,this._updateCurrentElement(),this.handler.onItemPop(e,!1)))}tryPeekProperlyNestedBodyElement(){return this.stackTop>=1&&this.tagIDs[1]===$s.BODY?this.items[1]:null}contains(e){return this._indexOf(e)>-1}getCommonAncestor(e){const t=this._indexOf(e)-1;return t>=0?this.items[t]:null}isRootHtmlElementCurrent(){return 0===this.stackTop&&this.tagIDs[0]===$s.HTML}hasInDynamicScope(e,t){for(let n=this.stackTop;n>=0;n--){const r=this.tagIDs[n];switch(this.treeAdapter.getNamespaceURI(this.items[n])){case Qs.HTML:if(r===e)return!0;if(t.has(r))return!1;break;case Qs.SVG:if(_i.has(r))return!1;break;case Qs.MATHML:if(gi.has(r))return!1}}return!0}hasInScope(e){return this.hasInDynamicScope(e,Ti)}hasInListItemScope(e){return this.hasInDynamicScope(e,mi)}hasInButtonScope(e){return this.hasInDynamicScope(e,Ai)}hasNumberedHeaderInScope(){for(let e=this.stackTop;e>=0;e--){const t=this.tagIDs[e];switch(this.treeAdapter.getNamespaceURI(this.items[e])){case Qs.HTML:if(ri.has(t))return!0;if(Ti.has(t))return!1;break;case Qs.SVG:if(_i.has(t))return!1;break;case Qs.MATHML:if(gi.has(t))return!1}}return!0}hasInTableScope(e){for(let t=this.stackTop;t>=0;t--)if(this.treeAdapter.getNamespaceURI(this.items[t])===Qs.HTML)switch(this.tagIDs[t]){case e:return!0;case $s.TABLE:case $s.HTML:return!1}return!0}hasTableBodyContextInTableScope(){for(let e=this.stackTop;e>=0;e--)if(this.treeAdapter.getNamespaceURI(this.items[e])===Qs.HTML)switch(this.tagIDs[e]){case $s.TBODY:case $s.THEAD:case $s.TFOOT:return!0;case $s.TABLE:case $s.HTML:return!1}return!0}hasInSelectScope(e){for(let t=this.stackTop;t>=0;t--)if(this.treeAdapter.getNamespaceURI(this.items[t])===Qs.HTML)switch(this.tagIDs[t]){case e:return!0;case $s.OPTION:case $s.OPTGROUP:break;default:return!1}return!0}generateImpliedEndTags(){for(;fi.has(this.currentTagId);)this.pop()}generateImpliedEndTagsThoroughly(){for(;Ei.has(this.currentTagId);)this.pop()}generateImpliedEndTagsWithExclusion(e){for(;this.currentTagId!==e&&Ei.has(this.currentTagId);)this.pop()}}var Di;!function(e){e[e.Marker=0]="Marker",e[e.Element=1]="Element"}(Di||(Di={}));const Oi={type:Di.Marker};class yi{constructor(e){this.treeAdapter=e,this.entries=[],this.bookmark=null}_getNoahArkConditionCandidates(e,t){const n=[],r=t.length,s=this.treeAdapter.getTagName(e),i=this.treeAdapter.getNamespaceURI(e);for(let e=0;e<this.entries.length;e++){const t=this.entries[e];if(t.type===Di.Marker)break;const{element:a}=t;if(this.treeAdapter.getTagName(a)===s&&this.treeAdapter.getNamespaceURI(a)===i){const t=this.treeAdapter.getAttrList(a);t.length===r&&n.push({idx:e,attrs:t})}}return n}_ensureNoahArkCondition(e){if(this.entries.length<3)return;const t=this.treeAdapter.getAttrList(e),n=this._getNoahArkConditionCandidates(e,t);if(n.length<3)return;const r=new Map(t.map((e=>[e.name,e.value])));let s=0;for(let e=0;e<n.length;e++){const t=n[e];t.attrs.every((e=>r.get(e.name)===e.value))&&(s+=1,s>=3&&this.entries.splice(t.idx,1))}}insertMarker(){this.entries.unshift(Oi)}pushElement(e,t){this._ensureNoahArkCondition(e),this.entries.unshift({type:Di.Element,element:e,token:t})}insertElementAfterBookmark(e,t){const n=this.entries.indexOf(this.bookmark);this.entries.splice(n,0,{type:Di.Element,element:e,token:t})}removeEntry(e){const t=this.entries.indexOf(e);t>=0&&this.entries.splice(t,1)}clearToLastMarker(){const e=this.entries.indexOf(Oi);e>=0?this.entries.splice(0,e+1):this.entries.length=0}getElementEntryInScopeWithTagName(e){const t=this.entries.find((t=>t.type===Di.Marker||this.treeAdapter.getTagName(t.element)===e));return t&&t.type===Di.Element?t:null}getElementEntry(e){return this.entries.find((t=>t.type===Di.Element&&t.element===e))}}const Ri={createDocument:()=>({nodeName:"#document",mode:Ks.NO_QUIRKS,childNodes:[]}),createDocumentFragment:()=>({nodeName:"#document-fragment",childNodes:[]}),createElement:(e,t,n)=>({nodeName:e,tagName:e,attrs:n,namespaceURI:t,childNodes:[],parentNode:null}),createCommentNode:e=>({nodeName:"#comment",data:e,parentNode:null}),createTextNode:e=>({nodeName:"#text",value:e,parentNode:null}),appendChild(e,t){e.childNodes.push(t),t.parentNode=e},insertBefore(e,t,n){const r=e.childNodes.indexOf(n);e.childNodes.splice(r,0,t),t.parentNode=e},setTemplateContent(e,t){e.content=t},getTemplateContent:e=>e.content,setDocumentType(e,t,n,r){const s=e.childNodes.find((e=>"#documentType"===e.nodeName));if(s)s.name=t,s.publicId=n,s.systemId=r;else{const s={nodeName:"#documentType",name:t,publicId:n,systemId:r,parentNode:null};Ri.appendChild(e,s)}},setDocumentMode(e,t){e.mode=t},getDocumentMode:e=>e.mode,detachNode(e){if(e.parentNode){const t=e.parentNode.childNodes.indexOf(e);e.parentNode.childNodes.splice(t,1),e.parentNode=null}},insertText(e,t){if(e.childNodes.length>0){const n=e.childNodes[e.childNodes.length-1];if(Ri.isTextNode(n))return void(n.value+=t)}Ri.appendChild(e,Ri.createTextNode(t))},insertTextBefore(e,t,n){const r=e.childNodes[e.childNodes.indexOf(n)-1];r&&Ri.isTextNode(r)?r.value+=t:Ri.insertBefore(e,Ri.createTextNode(t),n)},adoptAttributes(e,t){const n=new Set(e.attrs.map((e=>e.name)));for(let r=0;r<t.length;r++)n.has(t[r].name)||e.attrs.push(t[r])},getFirstChild:e=>e.childNodes[0],getChildNodes:e=>e.childNodes,getParentNode:e=>e.parentNode,getAttrList:e=>e.attrs,getTagName:e=>e.tagName,getNamespaceURI:e=>e.namespaceURI,getTextNodeContent:e=>e.value,getCommentNodeContent:e=>e.data,getDocumentTypeNodeName:e=>e.name,getDocumentTypeNodePublicId:e=>e.publicId,getDocumentTypeNodeSystemId:e=>e.systemId,isTextNode:e=>"#text"===e.nodeName,isCommentNode:e=>"#comment"===e.nodeName,isDocumentTypeNode:e=>"#documentType"===e.nodeName,isElementNode:e=>Object.prototype.hasOwnProperty.call(e,"tagName"),setNodeSourceCodeLocation(e,t){e.sourceCodeLocation=t},getNodeSourceCodeLocation:e=>e.sourceCodeLocation,updateNodeSourceCodeLocation(e,t){e.sourceCodeLocation={...e.sourceCodeLocation,...t}}},Li="html",ki=["+//silmaril//dtd html pro v0r11 19970101//","-//as//dtd html 3.0 aswedit + extensions//","-//advasoft ltd//dtd html 3.0 aswedit + extensions//","-//ietf//dtd html 2.0 level 1//","-//ietf//dtd html 2.0 level 2//","-//ietf//dtd html 2.0 strict level 1//","-//ietf//dtd html 2.0 strict level 2//","-//ietf//dtd html 2.0 strict//","-//ietf//dtd html 2.0//","-//ietf//dtd html 2.1e//","-//ietf//dtd html 3.0//","-//ietf//dtd html 3.2 final//","-//ietf//dtd html 3.2//","-//ietf//dtd html 3//","-//ietf//dtd html level 0//","-//ietf//dtd html level 1//","-//ietf//dtd html level 2//","-//ietf//dtd html level 3//","-//ietf//dtd html strict level 0//","-//ietf//dtd html strict level 1//","-//ietf//dtd html strict level 2//","-//ietf//dtd html strict level 3//","-//ietf//dtd html strict//","-//ietf//dtd html//","-//metrius//dtd metrius presentational//","-//microsoft//dtd internet explorer 2.0 html strict//","-//microsoft//dtd internet explorer 2.0 html//","-//microsoft//dtd internet explorer 2.0 tables//","-//microsoft//dtd internet explorer 3.0 html strict//","-//microsoft//dtd internet explorer 3.0 html//","-//microsoft//dtd internet explorer 3.0 tables//","-//netscape comm. corp.//dtd html//","-//netscape comm. corp.//dtd strict html//","-//o'reilly and associates//dtd html 2.0//","-//o'reilly and associates//dtd html extended 1.0//","-//o'reilly and associates//dtd html extended relaxed 1.0//","-//sq//dtd html 2.0 hotmetal + extensions//","-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//","-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//","-//spyglass//dtd html 2.0 extended//","-//sun microsystems corp.//dtd hotjava html//","-//sun microsystems corp.//dtd hotjava strict html//","-//w3c//dtd html 3 1995-03-24//","-//w3c//dtd html 3.2 draft//","-//w3c//dtd html 3.2 final//","-//w3c//dtd html 3.2//","-//w3c//dtd html 3.2s draft//","-//w3c//dtd html 4.0 frameset//","-//w3c//dtd html 4.0 transitional//","-//w3c//dtd html experimental 19960712//","-//w3c//dtd html experimental 970421//","-//w3c//dtd w3 html//","-//w3o//dtd w3 html 3.0//","-//webtechs//dtd mozilla html 2.0//","-//webtechs//dtd mozilla html//"],Pi=[...ki,"-//w3c//dtd html 4.01 frameset//","-//w3c//dtd html 4.01 transitional//"],wi=new Set(["-//w3o//dtd w3 html strict 3.0//en//","-/w3c/dtd html 4.0 transitional/en","html"]),Mi=["-//w3c//dtd xhtml 1.0 frameset//","-//w3c//dtd xhtml 1.0 transitional//"],Bi=[...Mi,"-//w3c//dtd html 4.01 frameset//","-//w3c//dtd html 4.01 transitional//"];function vi(e,t){return t.some((t=>e.startsWith(t)))}const xi=new Map(["attributeName","attributeType","baseFrequency","baseProfile","calcMode","clipPathUnits","diffuseConstant","edgeMode","filterUnits","glyphRef","gradientTransform","gradientUnits","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","lengthAdjust","limitingConeAngle","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","numOctaves","pathLength","patternContentUnits","patternTransform","patternUnits","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","specularConstant","specularExponent","spreadMethod","startOffset","stdDeviation","stitchTiles","surfaceScale","systemLanguage","tableValues","targetX","targetY","textLength","viewBox","viewTarget","xChannelSelector","yChannelSelector","zoomAndPan"].map((e=>[e.toLowerCase(),e]))),Ui=new Map([["xlink:actuate",{prefix:"xlink",name:"actuate",namespace:Qs.XLINK}],["xlink:arcrole",{prefix:"xlink",name:"arcrole",namespace:Qs.XLINK}],["xlink:href",{prefix:"xlink",name:"href",namespace:Qs.XLINK}],["xlink:role",{prefix:"xlink",name:"role",namespace:Qs.XLINK}],["xlink:show",{prefix:"xlink",name:"show",namespace:Qs.XLINK}],["xlink:title",{prefix:"xlink",name:"title",namespace:Qs.XLINK}],["xlink:type",{prefix:"xlink",name:"type",namespace:Qs.XLINK}],["xml:lang",{prefix:"xml",name:"lang",namespace:Qs.XML}],["xml:space",{prefix:"xml",name:"space",namespace:Qs.XML}],["xmlns",{prefix:"",name:"xmlns",namespace:Qs.XMLNS}],["xmlns:xlink",{prefix:"xmlns",name:"xlink",namespace:Qs.XMLNS}]]),Fi=new Map(["altGlyph","altGlyphDef","altGlyphItem","animateColor","animateMotion","animateTransform","clipPath","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","foreignObject","glyphRef","linearGradient","radialGradient","textPath"].map((e=>[e.toLowerCase(),e]))),Hi=new Set([$s.B,$s.BIG,$s.BLOCKQUOTE,$s.BODY,$s.BR,$s.CENTER,$s.CODE,$s.DD,$s.DIV,$s.DL,$s.DT,$s.EM,$s.EMBED,$s.H1,$s.H2,$s.H3,$s.H4,$s.H5,$s.H6,$s.HEAD,$s.HR,$s.I,$s.IMG,$s.LI,$s.LISTING,$s.MENU,$s.META,$s.NOBR,$s.OL,$s.P,$s.PRE,$s.RUBY,$s.S,$s.SMALL,$s.SPAN,$s.STRONG,$s.STRIKE,$s.SUB,$s.SUP,$s.TABLE,$s.TT,$s.U,$s.UL,$s.VAR]);function Gi(e){for(let t=0;t<e.attrs.length;t++)if("definitionurl"===e.attrs[t].name){e.attrs[t].name="definitionURL";break}}function qi(e){for(let t=0;t<e.attrs.length;t++){const n=xi.get(e.attrs[t].name);null!=n&&(e.attrs[t].name=n)}}function Yi(e){for(let t=0;t<e.attrs.length;t++){const n=Ui.get(e.attrs[t].name);n&&(e.attrs[t].prefix=n.prefix,e.attrs[t].name=n.name,e.attrs[t].namespace=n.namespace)}}var Vi;!function(e){e[e.INITIAL=0]="INITIAL",e[e.BEFORE_HTML=1]="BEFORE_HTML",e[e.BEFORE_HEAD=2]="BEFORE_HEAD",e[e.IN_HEAD=3]="IN_HEAD",e[e.IN_HEAD_NO_SCRIPT=4]="IN_HEAD_NO_SCRIPT",e[e.AFTER_HEAD=5]="AFTER_HEAD",e[e.IN_BODY=6]="IN_BODY",e[e.TEXT=7]="TEXT",e[e.IN_TABLE=8]="IN_TABLE",e[e.IN_TABLE_TEXT=9]="IN_TABLE_TEXT",e[e.IN_CAPTION=10]="IN_CAPTION",e[e.IN_COLUMN_GROUP=11]="IN_COLUMN_GROUP",e[e.IN_TABLE_BODY=12]="IN_TABLE_BODY",e[e.IN_ROW=13]="IN_ROW",e[e.IN_CELL=14]="IN_CELL",e[e.IN_SELECT=15]="IN_SELECT",e[e.IN_SELECT_IN_TABLE=16]="IN_SELECT_IN_TABLE",e[e.IN_TEMPLATE=17]="IN_TEMPLATE",e[e.AFTER_BODY=18]="AFTER_BODY",e[e.IN_FRAMESET=19]="IN_FRAMESET",e[e.AFTER_FRAMESET=20]="AFTER_FRAMESET",e[e.AFTER_AFTER_BODY=21]="AFTER_AFTER_BODY",e[e.AFTER_AFTER_FRAMESET=22]="AFTER_AFTER_FRAMESET"}(Vi||(Vi={}));const ji={startLine:-1,startCol:-1,startOffset:-1,endLine:-1,endCol:-1,endOffset:-1},Qi=new Set([$s.TABLE,$s.TBODY,$s.TFOOT,$s.THEAD,$s.TR]),Wi={scriptingEnabled:!0,sourceCodeLocationInfo:!1,treeAdapter:Ri,onParseError:null};class Ki{constructor(e,t,n=null,r=null){this.fragmentContext=n,this.scriptHandler=r,this.currentToken=null,this.stopped=!1,this.insertionMode=Vi.INITIAL,this.originalInsertionMode=Vi.INITIAL,this.headElement=null,this.formElement=null,this.currentNotInHTML=!1,this.tmplInsertionModeStack=[],this.pendingCharacterTokens=[],this.hasNonWhitespacePendingCharacterToken=!1,this.framesetOk=!0,this.skipNextNewLine=!1,this.fosterParentingEnabled=!1,this.options={...Wi,...e},this.treeAdapter=this.options.treeAdapter,this.onParseError=this.options.onParseError,this.onParseError&&(this.options.sourceCodeLocationInfo=!0),this.document=null!=t?t:this.treeAdapter.createDocument(),this.tokenizer=new pi(this.options,this),this.activeFormattingElements=new yi(this.treeAdapter),this.fragmentContextID=n?ei(this.treeAdapter.getTagName(n)):$s.UNKNOWN,this._setContextModes(null!=n?n:this.document,this.fragmentContextID),this.openElements=new Ci(this.document,this.treeAdapter,this)}static parse(e,t){const n=new this(t);return n.tokenizer.write(e,!0),n.document}static getFragmentParser(e,t){const n={...Wi,...t};null!=e||(e=n.treeAdapter.createElement(Xs.TEMPLATE,Qs.HTML,[]));const r=n.treeAdapter.createElement("documentmock",Qs.HTML,[]),s=new this(n,r,e);return s.fragmentContextID===$s.TEMPLATE&&s.tmplInsertionModeStack.unshift(Vi.IN_TEMPLATE),s._initTokenizerForFragmentParsing(),s._insertFakeRootElement(),s._resetInsertionMode(),s._findFormInFragmentContext(),s}getFragment(){const e=this.treeAdapter.getFirstChild(this.document),t=this.treeAdapter.createDocumentFragment();return this._adoptNodes(e,t),t}_err(e,t,n){var r;if(!this.onParseError)return;const s=null!==(r=e.location)&&void 0!==r?r:ji,i={code:t,startLine:s.startLine,startCol:s.startCol,startOffset:s.startOffset,endLine:n?s.startLine:s.endLine,endCol:n?s.startCol:s.endCol,endOffset:n?s.startOffset:s.endOffset};this.onParseError(i)}onItemPush(e,t,n){var r,s;null===(s=(r=this.treeAdapter).onItemPush)||void 0===s||s.call(r,e),n&&this.openElements.stackTop>0&&this._setContextModes(e,t)}onItemPop(e,t){var n,r;if(this.options.sourceCodeLocationInfo&&this._setEndLocation(e,this.currentToken),null===(r=(n=this.treeAdapter).onItemPop)||void 0===r||r.call(n,e,this.openElements.current),t){let e,t;0===this.openElements.stackTop&&this.fragmentContext?(e=this.fragmentContext,t=this.fragmentContextID):({current:e,currentTagId:t}=this.openElements),this._setContextModes(e,t)}}_setContextModes(e,t){const n=e===this.document||this.treeAdapter.getNamespaceURI(e)===Qs.HTML;this.currentNotInHTML=!n,this.tokenizer.inForeignNode=!n&&!this._isIntegrationPoint(t,e)}_switchToTextParsing(e,t){this._insertElement(e,Qs.HTML),this.tokenizer.state=t,this.originalInsertionMode=this.insertionMode,this.insertionMode=Vi.TEXT}switchToPlaintextParsing(){this.insertionMode=Vi.TEXT,this.originalInsertionMode=Vi.IN_BODY,this.tokenizer.state=ai.PLAINTEXT}_getAdjustedCurrentElement(){return 0===this.openElements.stackTop&&this.fragmentContext?this.fragmentContext:this.openElements.current}_findFormInFragmentContext(){let e=this.fragmentContext;for(;e;){if(this.treeAdapter.getTagName(e)===Xs.FORM){this.formElement=e;break}e=this.treeAdapter.getParentNode(e)}}_initTokenizerForFragmentParsing(){if(this.fragmentContext&&this.treeAdapter.getNamespaceURI(this.fragmentContext)===Qs.HTML)switch(this.fragmentContextID){case $s.TITLE:case $s.TEXTAREA:this.tokenizer.state=ai.RCDATA;break;case $s.STYLE:case $s.XMP:case $s.IFRAME:case $s.NOEMBED:case $s.NOFRAMES:case $s.NOSCRIPT:this.tokenizer.state=ai.RAWTEXT;break;case $s.SCRIPT:this.tokenizer.state=ai.SCRIPT_DATA;break;case $s.PLAINTEXT:this.tokenizer.state=ai.PLAINTEXT}}_setDocumentType(e){const t=e.name||"",n=e.publicId||"",r=e.systemId||"";if(this.treeAdapter.setDocumentType(this.document,t,n,r),e.location){const t=this.treeAdapter.getChildNodes(this.document).find((e=>this.treeAdapter.isDocumentTypeNode(e)));t&&this.treeAdapter.setNodeSourceCodeLocation(t,e.location)}}_attachElementToTree(e,t){if(this.options.sourceCodeLocationInfo){const n=t&&{...t,startTag:t};this.treeAdapter.setNodeSourceCodeLocation(e,n)}if(this._shouldFosterParentOnInsertion())this._fosterParentElement(e);else{const t=this.openElements.currentTmplContentOrNode;this.treeAdapter.appendChild(t,e)}}_appendElement(e,t){const n=this.treeAdapter.createElement(e.tagName,t,e.attrs);this._attachElementToTree(n,e.location)}_insertElement(e,t){const n=this.treeAdapter.createElement(e.tagName,t,e.attrs);this._attachElementToTree(n,e.location),this.openElements.push(n,e.tagID)}_insertFakeElement(e,t){const n=this.treeAdapter.createElement(e,Qs.HTML,[]);this._attachElementToTree(n,null),this.openElements.push(n,t)}_insertTemplate(e){const t=this.treeAdapter.createElement(e.tagName,Qs.HTML,e.attrs),n=this.treeAdapter.createDocumentFragment();this.treeAdapter.setTemplateContent(t,n),this._attachElementToTree(t,e.location),this.openElements.push(t,e.tagID),this.options.sourceCodeLocationInfo&&this.treeAdapter.setNodeSourceCodeLocation(n,null)}_insertFakeRootElement(){const e=this.treeAdapter.createElement(Xs.HTML,Qs.HTML,[]);this.options.sourceCodeLocationInfo&&this.treeAdapter.setNodeSourceCodeLocation(e,null),this.treeAdapter.appendChild(this.openElements.current,e),this.openElements.push(e,$s.HTML)}_appendCommentNode(e,t){const n=this.treeAdapter.createCommentNode(e.data);this.treeAdapter.appendChild(t,n),this.options.sourceCodeLocationInfo&&this.treeAdapter.setNodeSourceCodeLocation(n,e.location)}_insertCharacters(e){let t,n;if(this._shouldFosterParentOnInsertion()?(({parent:t,beforeElement:n}=this._findFosterParentingLocation()),n?this.treeAdapter.insertTextBefore(t,e.chars,n):this.treeAdapter.insertText(t,e.chars)):(t=this.openElements.currentTmplContentOrNode,this.treeAdapter.insertText(t,e.chars)),!e.location)return;const r=this.treeAdapter.getChildNodes(t),s=n?r.lastIndexOf(n):r.length,i=r[s-1];if(this.treeAdapter.getNodeSourceCodeLocation(i)){const{endLine:t,endCol:n,endOffset:r}=e.location;this.treeAdapter.updateNodeSourceCodeLocation(i,{endLine:t,endCol:n,endOffset:r})}else this.options.sourceCodeLocationInfo&&this.treeAdapter.setNodeSourceCodeLocation(i,e.location)}_adoptNodes(e,t){for(let n=this.treeAdapter.getFirstChild(e);n;n=this.treeAdapter.getFirstChild(e))this.treeAdapter.detachNode(n),this.treeAdapter.appendChild(t,n)}_setEndLocation(e,t){if(this.treeAdapter.getNodeSourceCodeLocation(e)&&t.location){const n=t.location,r=this.treeAdapter.getTagName(e),s=t.type===js.END_TAG&&r===t.tagName?{endTag:{...n},endLine:n.endLine,endCol:n.endCol,endOffset:n.endOffset}:{endLine:n.startLine,endCol:n.startCol,endOffset:n.startOffset};this.treeAdapter.updateNodeSourceCodeLocation(e,s)}}shouldProcessStartTagTokenInForeignContent(e){if(!this.currentNotInHTML)return!1;let t,n;return 0===this.openElements.stackTop&&this.fragmentContext?(t=this.fragmentContext,n=this.fragmentContextID):({current:t,currentTagId:n}=this.openElements),(e.tagID!==$s.SVG||this.treeAdapter.getTagName(t)!==Xs.ANNOTATION_XML||this.treeAdapter.getNamespaceURI(t)!==Qs.MATHML)&&(this.tokenizer.inForeignNode||(e.tagID===$s.MGLYPH||e.tagID===$s.MALIGNMARK)&&!this._isIntegrationPoint(n,t,Qs.HTML))}_processToken(e){switch(e.type){case js.CHARACTER:this.onCharacter(e);break;case js.NULL_CHARACTER:this.onNullCharacter(e);break;case js.COMMENT:this.onComment(e);break;case js.DOCTYPE:this.onDoctype(e);break;case js.START_TAG:this._processStartTag(e);break;case js.END_TAG:this.onEndTag(e);break;case js.EOF:this.onEof(e);break;case js.WHITESPACE_CHARACTER:this.onWhitespaceCharacter(e)}}_isIntegrationPoint(e,t,n){return function(e,t,n,r){return(!r||r===Qs.HTML)&&function(e,t,n){if(t===Qs.MATHML&&e===$s.ANNOTATION_XML)for(let e=0;e<n.length;e++)if(n[e].name===Ws.ENCODING){const t=n[e].value.toLowerCase();return"text/html"===t||"application/xhtml+xml"===t}return t===Qs.SVG&&(e===$s.FOREIGN_OBJECT||e===$s.DESC||e===$s.TITLE)}(e,t,n)||(!r||r===Qs.MATHML)&&function(e,t){return t===Qs.MATHML&&(e===$s.MI||e===$s.MO||e===$s.MN||e===$s.MS||e===$s.MTEXT)}(e,t)}(e,this.treeAdapter.getNamespaceURI(t),this.treeAdapter.getAttrList(t),n)}_reconstructActiveFormattingElements(){const e=this.activeFormattingElements.entries.length;if(e){const t=this.activeFormattingElements.entries.findIndex((e=>e.type===Di.Marker||this.openElements.contains(e.element)));for(let n=t<0?e-1:t-1;n>=0;n--){const e=this.activeFormattingElements.entries[n];this._insertElement(e.token,this.treeAdapter.getNamespaceURI(e.element)),e.element=this.openElements.current}}}_closeTableCell(){this.openElements.generateImpliedEndTags(),this.openElements.popUntilTableCellPopped(),this.activeFormattingElements.clearToLastMarker(),this.insertionMode=Vi.IN_ROW}_closePElement(){this.openElements.generateImpliedEndTagsWithExclusion($s.P),this.openElements.popUntilTagNamePopped($s.P)}_resetInsertionMode(){for(let e=this.openElements.stackTop;e>=0;e--)switch(0===e&&this.fragmentContext?this.fragmentContextID:this.openElements.tagIDs[e]){case $s.TR:return void(this.insertionMode=Vi.IN_ROW);case $s.TBODY:case $s.THEAD:case $s.TFOOT:return void(this.insertionMode=Vi.IN_TABLE_BODY);case $s.CAPTION:return void(this.insertionMode=Vi.IN_CAPTION);case $s.COLGROUP:return void(this.insertionMode=Vi.IN_COLUMN_GROUP);case $s.TABLE:return void(this.insertionMode=Vi.IN_TABLE);case $s.BODY:return void(this.insertionMode=Vi.IN_BODY);case $s.FRAMESET:return void(this.insertionMode=Vi.IN_FRAMESET);case $s.SELECT:return void this._resetInsertionModeForSelect(e);case $s.TEMPLATE:return void(this.insertionMode=this.tmplInsertionModeStack[0]);case $s.HTML:return void(this.insertionMode=this.headElement?Vi.AFTER_HEAD:Vi.BEFORE_HEAD);case $s.TD:case $s.TH:if(e>0)return void(this.insertionMode=Vi.IN_CELL);break;case $s.HEAD:if(e>0)return void(this.insertionMode=Vi.IN_HEAD)}this.insertionMode=Vi.IN_BODY}_resetInsertionModeForSelect(e){if(e>0)for(let t=e-1;t>0;t--){const e=this.openElements.tagIDs[t];if(e===$s.TEMPLATE)break;if(e===$s.TABLE)return void(this.insertionMode=Vi.IN_SELECT_IN_TABLE)}this.insertionMode=Vi.IN_SELECT}_isElementCausesFosterParenting(e){return Qi.has(e)}_shouldFosterParentOnInsertion(){return this.fosterParentingEnabled&&this._isElementCausesFosterParenting(this.openElements.currentTagId)}_findFosterParentingLocation(){for(let e=this.openElements.stackTop;e>=0;e--){const t=this.openElements.items[e];switch(this.openElements.tagIDs[e]){case $s.TEMPLATE:if(this.treeAdapter.getNamespaceURI(t)===Qs.HTML)return{parent:this.treeAdapter.getTemplateContent(t),beforeElement:null};break;case $s.TABLE:{const n=this.treeAdapter.getParentNode(t);return n?{parent:n,beforeElement:t}:{parent:this.openElements.items[e-1],beforeElement:null}}}}return{parent:this.openElements.items[0],beforeElement:null}}_fosterParentElement(e){const t=this._findFosterParentingLocation();t.beforeElement?this.treeAdapter.insertBefore(t.parent,e,t.beforeElement):this.treeAdapter.appendChild(t.parent,e)}_isSpecialElement(e,t){const n=this.treeAdapter.getNamespaceURI(e);return ni[n].has(t)}onCharacter(e){if(this.skipNextNewLine=!1,this.tokenizer.inForeignNode)!function(e,t){e._insertCharacters(t),e.framesetOk=!1}(this,e);else switch(this.insertionMode){case Vi.INITIAL:sa(this,e);break;case Vi.BEFORE_HTML:ia(this,e);break;case Vi.BEFORE_HEAD:aa(this,e);break;case Vi.IN_HEAD:la(this,e);break;case Vi.IN_HEAD_NO_SCRIPT:ua(this,e);break;case Vi.AFTER_HEAD:ha(this,e);break;case Vi.IN_BODY:case Vi.IN_CAPTION:case Vi.IN_CELL:case Vi.IN_TEMPLATE:fa(this,e);break;case Vi.TEXT:case Vi.IN_SELECT:case Vi.IN_SELECT_IN_TABLE:this._insertCharacters(e);break;case Vi.IN_TABLE:case Vi.IN_TABLE_BODY:case Vi.IN_ROW:Ia(this,e);break;case Vi.IN_TABLE_TEXT:ya(this,e);break;case Vi.IN_COLUMN_GROUP:Pa(this,e);break;case Vi.AFTER_BODY:Ga(this,e);break;case Vi.AFTER_AFTER_BODY:qa(this,e)}}onNullCharacter(e){if(this.skipNextNewLine=!1,this.tokenizer.inForeignNode)!function(e,t){t.chars=vs,e._insertCharacters(t)}(this,e);else switch(this.insertionMode){case Vi.INITIAL:sa(this,e);break;case Vi.BEFORE_HTML:ia(this,e);break;case Vi.BEFORE_HEAD:aa(this,e);break;case Vi.IN_HEAD:la(this,e);break;case Vi.IN_HEAD_NO_SCRIPT:ua(this,e);break;case Vi.AFTER_HEAD:ha(this,e);break;case Vi.TEXT:this._insertCharacters(e);break;case Vi.IN_TABLE:case Vi.IN_TABLE_BODY:case Vi.IN_ROW:Ia(this,e);break;case Vi.IN_COLUMN_GROUP:Pa(this,e);break;case Vi.AFTER_BODY:Ga(this,e);break;case Vi.AFTER_AFTER_BODY:qa(this,e)}}onComment(e){if(this.skipNextNewLine=!1,this.currentNotInHTML)na(this,e);else switch(this.insertionMode){case Vi.INITIAL:case Vi.BEFORE_HTML:case Vi.BEFORE_HEAD:case Vi.IN_HEAD:case Vi.IN_HEAD_NO_SCRIPT:case Vi.AFTER_HEAD:case Vi.IN_BODY:case Vi.IN_TABLE:case Vi.IN_CAPTION:case Vi.IN_COLUMN_GROUP:case Vi.IN_TABLE_BODY:case Vi.IN_ROW:case Vi.IN_CELL:case Vi.IN_SELECT:case Vi.IN_SELECT_IN_TABLE:case Vi.IN_TEMPLATE:case Vi.IN_FRAMESET:case Vi.AFTER_FRAMESET:na(this,e);break;case Vi.IN_TABLE_TEXT:Ra(this,e);break;case Vi.AFTER_BODY:!function(e,t){e._appendCommentNode(t,e.openElements.items[0])}(this,e);break;case Vi.AFTER_AFTER_BODY:case Vi.AFTER_AFTER_FRAMESET:!function(e,t){e._appendCommentNode(t,e.document)}(this,e)}}onDoctype(e){switch(this.skipNextNewLine=!1,this.insertionMode){case Vi.INITIAL:!function(e,t){e._setDocumentType(t);const n=t.forceQuirks?Ks.QUIRKS:function(e){if(e.name!==Li)return Ks.QUIRKS;const{systemId:t}=e;if(t&&"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd"===t.toLowerCase())return Ks.QUIRKS;let{publicId:n}=e;if(null!==n){if(n=n.toLowerCase(),wi.has(n))return Ks.QUIRKS;let e=null===t?Pi:ki;if(vi(n,e))return Ks.QUIRKS;if(e=null===t?Mi:Bi,vi(n,e))return Ks.LIMITED_QUIRKS}return Ks.NO_QUIRKS}(t);(function(e){return e.name===Li&&null===e.publicId&&(null===e.systemId||"about:legacy-compat"===e.systemId)})(t)||e._err(t,Vs.nonConformingDoctype),e.treeAdapter.setDocumentMode(e.document,n),e.insertionMode=Vi.BEFORE_HTML}(this,e);break;case Vi.BEFORE_HEAD:case Vi.IN_HEAD:case Vi.IN_HEAD_NO_SCRIPT:case Vi.AFTER_HEAD:this._err(e,Vs.misplacedDoctype);break;case Vi.IN_TABLE_TEXT:Ra(this,e)}}onStartTag(e){this.skipNextNewLine=!1,this.currentToken=e,this._processStartTag(e),e.selfClosing&&!e.ackSelfClosing&&this._err(e,Vs.nonVoidHtmlElementStartTagWithTrailingSolidus)}_processStartTag(e){this.shouldProcessStartTagTokenInForeignContent(e)?function(e,t){if(function(e){const t=e.tagID;return t===$s.FONT&&e.attrs.some((({name:e})=>e===Ws.COLOR||e===Ws.SIZE||e===Ws.FACE))||Hi.has(t)}(t))Ya(e),e._startTagOutsideForeignContent(t);else{const n=e._getAdjustedCurrentElement(),r=e.treeAdapter.getNamespaceURI(n);r===Qs.MATHML?Gi(t):r===Qs.SVG&&(function(e){const t=Fi.get(e.tagName);null!=t&&(e.tagName=t,e.tagID=ei(e.tagName))}(t),qi(t)),Yi(t),t.selfClosing?e._appendElement(t,r):e._insertElement(t,r),t.ackSelfClosing=!0}}(this,e):this._startTagOutsideForeignContent(e)}_startTagOutsideForeignContent(e){switch(this.insertionMode){case Vi.INITIAL:sa(this,e);break;case Vi.BEFORE_HTML:!function(e,t){t.tagID===$s.HTML?(e._insertElement(t,Qs.HTML),e.insertionMode=Vi.BEFORE_HEAD):ia(e,t)}(this,e);break;case Vi.BEFORE_HEAD:!function(e,t){switch(t.tagID){case $s.HTML:ga(e,t);break;case $s.HEAD:e._insertElement(t,Qs.HTML),e.headElement=e.openElements.current,e.insertionMode=Vi.IN_HEAD;break;default:aa(e,t)}}(this,e);break;case Vi.IN_HEAD:oa(this,e);break;case Vi.IN_HEAD_NO_SCRIPT:!function(e,t){switch(t.tagID){case $s.HTML:ga(e,t);break;case $s.BASEFONT:case $s.BGSOUND:case $s.HEAD:case $s.LINK:case $s.META:case $s.NOFRAMES:case $s.STYLE:oa(e,t);break;case $s.NOSCRIPT:e._err(t,Vs.nestedNoscriptInHead);break;default:ua(e,t)}}(this,e);break;case Vi.AFTER_HEAD:!function(e,t){switch(t.tagID){case $s.HTML:ga(e,t);break;case $s.BODY:e._insertElement(t,Qs.HTML),e.framesetOk=!1,e.insertionMode=Vi.IN_BODY;break;case $s.FRAMESET:e._insertElement(t,Qs.HTML),e.insertionMode=Vi.IN_FRAMESET;break;case $s.BASE:case $s.BASEFONT:case $s.BGSOUND:case $s.LINK:case $s.META:case $s.NOFRAMES:case $s.SCRIPT:case $s.STYLE:case $s.TEMPLATE:case $s.TITLE:e._err(t,Vs.abandonedHeadElementChild),e.openElements.push(e.headElement,$s.HEAD),oa(e,t),e.openElements.remove(e.headElement);break;case $s.HEAD:e._err(t,Vs.misplacedStartTagForHeadElement);break;default:ha(e,t)}}(this,e);break;case Vi.IN_BODY:ga(this,e);break;case Vi.IN_TABLE:Na(this,e);break;case Vi.IN_TABLE_TEXT:Ra(this,e);break;case Vi.IN_CAPTION:!function(e,t){const n=t.tagID;La.has(n)?e.openElements.hasInTableScope($s.CAPTION)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped($s.CAPTION),e.activeFormattingElements.clearToLastMarker(),e.insertionMode=Vi.IN_TABLE,Na(e,t)):ga(e,t)}(this,e);break;case Vi.IN_COLUMN_GROUP:ka(this,e);break;case Vi.IN_TABLE_BODY:wa(this,e);break;case Vi.IN_ROW:Ba(this,e);break;case Vi.IN_CELL:!function(e,t){const n=t.tagID;La.has(n)?(e.openElements.hasInTableScope($s.TD)||e.openElements.hasInTableScope($s.TH))&&(e._closeTableCell(),Ba(e,t)):ga(e,t)}(this,e);break;case Vi.IN_SELECT:xa(this,e);break;case Vi.IN_SELECT_IN_TABLE:!function(e,t){const n=t.tagID;n===$s.CAPTION||n===$s.TABLE||n===$s.TBODY||n===$s.TFOOT||n===$s.THEAD||n===$s.TR||n===$s.TD||n===$s.TH?(e.openElements.popUntilTagNamePopped($s.SELECT),e._resetInsertionMode(),e._processStartTag(t)):xa(e,t)}(this,e);break;case Vi.IN_TEMPLATE:!function(e,t){switch(t.tagID){case $s.BASE:case $s.BASEFONT:case $s.BGSOUND:case $s.LINK:case $s.META:case $s.NOFRAMES:case $s.SCRIPT:case $s.STYLE:case $s.TEMPLATE:case $s.TITLE:oa(e,t);break;case $s.CAPTION:case $s.COLGROUP:case $s.TBODY:case $s.TFOOT:case $s.THEAD:e.tmplInsertionModeStack[0]=Vi.IN_TABLE,e.insertionMode=Vi.IN_TABLE,Na(e,t);break;case $s.COL:e.tmplInsertionModeStack[0]=Vi.IN_COLUMN_GROUP,e.insertionMode=Vi.IN_COLUMN_GROUP,ka(e,t);break;case $s.TR:e.tmplInsertionModeStack[0]=Vi.IN_TABLE_BODY,e.insertionMode=Vi.IN_TABLE_BODY,wa(e,t);break;case $s.TD:case $s.TH:e.tmplInsertionModeStack[0]=Vi.IN_ROW,e.insertionMode=Vi.IN_ROW,Ba(e,t);break;default:e.tmplInsertionModeStack[0]=Vi.IN_BODY,e.insertionMode=Vi.IN_BODY,ga(e,t)}}(this,e);break;case Vi.AFTER_BODY:!function(e,t){t.tagID===$s.HTML?ga(e,t):Ga(e,t)}(this,e);break;case Vi.IN_FRAMESET:!function(e,t){switch(t.tagID){case $s.HTML:ga(e,t);break;case $s.FRAMESET:e._insertElement(t,Qs.HTML);break;case $s.FRAME:e._appendElement(t,Qs.HTML),t.ackSelfClosing=!0;break;case $s.NOFRAMES:oa(e,t)}}(this,e);break;case Vi.AFTER_FRAMESET:!function(e,t){switch(t.tagID){case $s.HTML:ga(e,t);break;case $s.NOFRAMES:oa(e,t)}}(this,e);break;case Vi.AFTER_AFTER_BODY:!function(e,t){t.tagID===$s.HTML?ga(e,t):qa(e,t)}(this,e);break;case Vi.AFTER_AFTER_FRAMESET:!function(e,t){switch(t.tagID){case $s.HTML:ga(e,t);break;case $s.NOFRAMES:oa(e,t)}}(this,e)}}onEndTag(e){this.skipNextNewLine=!1,this.currentToken=e,this.currentNotInHTML?function(e,t){if(t.tagID===$s.P||t.tagID===$s.BR)return Ya(e),void e._endTagOutsideForeignContent(t);for(let n=e.openElements.stackTop;n>0;n--){const r=e.openElements.items[n];if(e.treeAdapter.getNamespaceURI(r)===Qs.HTML){e._endTagOutsideForeignContent(t);break}const s=e.treeAdapter.getTagName(r);if(s.toLowerCase()===t.tagName){t.tagName=s,e.openElements.shortenToLength(n);break}}}(this,e):this._endTagOutsideForeignContent(e)}_endTagOutsideForeignContent(e){switch(this.insertionMode){case Vi.INITIAL:sa(this,e);break;case Vi.BEFORE_HTML:!function(e,t){const n=t.tagID;n!==$s.HTML&&n!==$s.HEAD&&n!==$s.BODY&&n!==$s.BR||ia(e,t)}(this,e);break;case Vi.BEFORE_HEAD:!function(e,t){const n=t.tagID;n===$s.HEAD||n===$s.BODY||n===$s.HTML||n===$s.BR?aa(e,t):e._err(t,Vs.endTagWithoutMatchingOpenElement)}(this,e);break;case Vi.IN_HEAD:!function(e,t){switch(t.tagID){case $s.HEAD:e.openElements.pop(),e.insertionMode=Vi.AFTER_HEAD;break;case $s.BODY:case $s.BR:case $s.HTML:la(e,t);break;case $s.TEMPLATE:ca(e,t);break;default:e._err(t,Vs.endTagWithoutMatchingOpenElement)}}(this,e);break;case Vi.IN_HEAD_NO_SCRIPT:!function(e,t){switch(t.tagID){case $s.NOSCRIPT:e.openElements.pop(),e.insertionMode=Vi.IN_HEAD;break;case $s.BR:ua(e,t);break;default:e._err(t,Vs.endTagWithoutMatchingOpenElement)}}(this,e);break;case Vi.AFTER_HEAD:!function(e,t){switch(t.tagID){case $s.BODY:case $s.HTML:case $s.BR:ha(e,t);break;case $s.TEMPLATE:ca(e,t);break;default:e._err(t,Vs.endTagWithoutMatchingOpenElement)}}(this,e);break;case Vi.IN_BODY:Sa(this,e);break;case Vi.TEXT:!function(e,t){var n;t.tagID===$s.SCRIPT&&(null===(n=e.scriptHandler)||void 0===n||n.call(e,e.openElements.current)),e.openElements.pop(),e.insertionMode=e.originalInsertionMode}(this,e);break;case Vi.IN_TABLE:Ca(this,e);break;case Vi.IN_TABLE_TEXT:Ra(this,e);break;case Vi.IN_CAPTION:!function(e,t){const n=t.tagID;switch(n){case $s.CAPTION:case $s.TABLE:e.openElements.hasInTableScope($s.CAPTION)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped($s.CAPTION),e.activeFormattingElements.clearToLastMarker(),e.insertionMode=Vi.IN_TABLE,n===$s.TABLE&&Ca(e,t));break;case $s.BODY:case $s.COL:case $s.COLGROUP:case $s.HTML:case $s.TBODY:case $s.TD:case $s.TFOOT:case $s.TH:case $s.THEAD:case $s.TR:break;default:Sa(e,t)}}(this,e);break;case Vi.IN_COLUMN_GROUP:!function(e,t){switch(t.tagID){case $s.COLGROUP:e.openElements.currentTagId===$s.COLGROUP&&(e.openElements.pop(),e.insertionMode=Vi.IN_TABLE);break;case $s.TEMPLATE:ca(e,t);break;case $s.COL:break;default:Pa(e,t)}}(this,e);break;case Vi.IN_TABLE_BODY:Ma(this,e);break;case Vi.IN_ROW:va(this,e);break;case Vi.IN_CELL:!function(e,t){const n=t.tagID;switch(n){case $s.TD:case $s.TH:e.openElements.hasInTableScope(n)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(n),e.activeFormattingElements.clearToLastMarker(),e.insertionMode=Vi.IN_ROW);break;case $s.TABLE:case $s.TBODY:case $s.TFOOT:case $s.THEAD:case $s.TR:e.openElements.hasInTableScope(n)&&(e._closeTableCell(),va(e,t));break;case $s.BODY:case $s.CAPTION:case $s.COL:case $s.COLGROUP:case $s.HTML:break;default:Sa(e,t)}}(this,e);break;case Vi.IN_SELECT:Ua(this,e);break;case Vi.IN_SELECT_IN_TABLE:!function(e,t){const n=t.tagID;n===$s.CAPTION||n===$s.TABLE||n===$s.TBODY||n===$s.TFOOT||n===$s.THEAD||n===$s.TR||n===$s.TD||n===$s.TH?e.openElements.hasInTableScope(n)&&(e.openElements.popUntilTagNamePopped($s.SELECT),e._resetInsertionMode(),e.onEndTag(t)):Ua(e,t)}(this,e);break;case Vi.IN_TEMPLATE:!function(e,t){t.tagID===$s.TEMPLATE&&ca(e,t)}(this,e);break;case Vi.AFTER_BODY:Ha(this,e);break;case Vi.IN_FRAMESET:!function(e,t){t.tagID!==$s.FRAMESET||e.openElements.isRootHtmlElementCurrent()||(e.openElements.pop(),e.fragmentContext||e.openElements.currentTagId===$s.FRAMESET||(e.insertionMode=Vi.AFTER_FRAMESET))}(this,e);break;case Vi.AFTER_FRAMESET:!function(e,t){t.tagID===$s.HTML&&(e.insertionMode=Vi.AFTER_AFTER_FRAMESET)}(this,e);break;case Vi.AFTER_AFTER_BODY:qa(this,e)}}onEof(e){switch(this.insertionMode){case Vi.INITIAL:sa(this,e);break;case Vi.BEFORE_HTML:ia(this,e);break;case Vi.BEFORE_HEAD:aa(this,e);break;case Vi.IN_HEAD:la(this,e);break;case Vi.IN_HEAD_NO_SCRIPT:ua(this,e);break;case Vi.AFTER_HEAD:ha(this,e);break;case Vi.IN_BODY:case Vi.IN_TABLE:case Vi.IN_CAPTION:case Vi.IN_COLUMN_GROUP:case Vi.IN_TABLE_BODY:case Vi.IN_ROW:case Vi.IN_CELL:case Vi.IN_SELECT:case Vi.IN_SELECT_IN_TABLE:ba(this,e);break;case Vi.TEXT:!function(e,t){e._err(t,Vs.eofInElementThatCanContainOnlyText),e.openElements.pop(),e.insertionMode=e.originalInsertionMode,e.onEof(t)}(this,e);break;case Vi.IN_TABLE_TEXT:Ra(this,e);break;case Vi.IN_TEMPLATE:Fa(this,e);break;case Vi.AFTER_BODY:case Vi.IN_FRAMESET:case Vi.AFTER_FRAMESET:case Vi.AFTER_AFTER_BODY:case Vi.AFTER_AFTER_FRAMESET:ra(this,e)}}onWhitespaceCharacter(e){if(this.skipNextNewLine&&(this.skipNextNewLine=!1,e.chars.charCodeAt(0)===xs.LINE_FEED)){if(1===e.chars.length)return;e.chars=e.chars.substr(1)}if(this.tokenizer.inForeignNode)this._insertCharacters(e);else switch(this.insertionMode){case Vi.IN_HEAD:case Vi.IN_HEAD_NO_SCRIPT:case Vi.AFTER_HEAD:case Vi.TEXT:case Vi.IN_COLUMN_GROUP:case Vi.IN_SELECT:case Vi.IN_SELECT_IN_TABLE:case Vi.IN_FRAMESET:case Vi.AFTER_FRAMESET:this._insertCharacters(e);break;case Vi.IN_BODY:case Vi.IN_CAPTION:case Vi.IN_CELL:case Vi.IN_TEMPLATE:case Vi.AFTER_BODY:case Vi.AFTER_AFTER_BODY:case Vi.AFTER_AFTER_FRAMESET:pa(this,e);break;case Vi.IN_TABLE:case Vi.IN_TABLE_BODY:case Vi.IN_ROW:Ia(this,e);break;case Vi.IN_TABLE_TEXT:Oa(this,e)}}}function Xi(e,t){let n=e.activeFormattingElements.getElementEntryInScopeWithTagName(t.tagName);return n?e.openElements.contains(n.element)?e.openElements.hasInScope(t.tagID)||(n=null):(e.activeFormattingElements.removeEntry(n),n=null):_a(e,t),n}function $i(e,t){let n=null,r=e.openElements.stackTop;for(;r>=0;r--){const s=e.openElements.items[r];if(s===t.element)break;e._isSpecialElement(s,e.openElements.tagIDs[r])&&(n=s)}return n||(e.openElements.shortenToLength(r<0?0:r),e.activeFormattingElements.removeEntry(t)),n}function zi(e,t,n){let r=t,s=e.openElements.getCommonAncestor(t);for(let i=0,a=s;a!==n;i++,a=s){s=e.openElements.getCommonAncestor(a);const n=e.activeFormattingElements.getElementEntry(a),o=n&&i>=3;!n||o?(o&&e.activeFormattingElements.removeEntry(n),e.openElements.remove(a)):(a=Ji(e,n),r===t&&(e.activeFormattingElements.bookmark=n),e.treeAdapter.detachNode(r),e.treeAdapter.appendChild(a,r),r=a)}return r}function Ji(e,t){const n=e.treeAdapter.getNamespaceURI(t.element),r=e.treeAdapter.createElement(t.token.tagName,n,t.token.attrs);return e.openElements.replace(t.element,r),t.element=r,r}function Zi(e,t,n){const r=ei(e.treeAdapter.getTagName(t));if(e._isElementCausesFosterParenting(r))e._fosterParentElement(n);else{const s=e.treeAdapter.getNamespaceURI(t);r===$s.TEMPLATE&&s===Qs.HTML&&(t=e.treeAdapter.getTemplateContent(t)),e.treeAdapter.appendChild(t,n)}}function ea(e,t,n){const r=e.treeAdapter.getNamespaceURI(n.element),{token:s}=n,i=e.treeAdapter.createElement(s.tagName,r,s.attrs);e._adoptNodes(t,i),e.treeAdapter.appendChild(t,i),e.activeFormattingElements.insertElementAfterBookmark(i,s),e.activeFormattingElements.removeEntry(n),e.openElements.remove(n.element),e.openElements.insertAfter(t,i,s.tagID)}function ta(e,t){for(let n=0;n<8;n++){const n=Xi(e,t);if(!n)break;const r=$i(e,n);if(!r)break;e.activeFormattingElements.bookmark=n;const s=zi(e,r,n.element),i=e.openElements.getCommonAncestor(n.element);e.treeAdapter.detachNode(s),i&&Zi(e,i,s),ea(e,r,n)}}function na(e,t){e._appendCommentNode(t,e.openElements.currentTmplContentOrNode)}function ra(e,t){if(e.stopped=!0,t.location){const n=e.fragmentContext?0:2;for(let r=e.openElements.stackTop;r>=n;r--)e._setEndLocation(e.openElements.items[r],t);if(!e.fragmentContext&&e.openElements.stackTop>=0){const n=e.openElements.items[0],r=e.treeAdapter.getNodeSourceCodeLocation(n);if(r&&!r.endTag&&(e._setEndLocation(n,t),e.openElements.stackTop>=1)){const n=e.openElements.items[1],r=e.treeAdapter.getNodeSourceCodeLocation(n);r&&!r.endTag&&e._setEndLocation(n,t)}}}}function sa(e,t){e._err(t,Vs.missingDoctype,!0),e.treeAdapter.setDocumentMode(e.document,Ks.QUIRKS),e.insertionMode=Vi.BEFORE_HTML,e._processToken(t)}function ia(e,t){e._insertFakeRootElement(),e.insertionMode=Vi.BEFORE_HEAD,e._processToken(t)}function aa(e,t){e._insertFakeElement(Xs.HEAD,$s.HEAD),e.headElement=e.openElements.current,e.insertionMode=Vi.IN_HEAD,e._processToken(t)}function oa(e,t){switch(t.tagID){case $s.HTML:ga(e,t);break;case $s.BASE:case $s.BASEFONT:case $s.BGSOUND:case $s.LINK:case $s.META:e._appendElement(t,Qs.HTML),t.ackSelfClosing=!0;break;case $s.TITLE:e._switchToTextParsing(t,ai.RCDATA);break;case $s.NOSCRIPT:e.options.scriptingEnabled?e._switchToTextParsing(t,ai.RAWTEXT):(e._insertElement(t,Qs.HTML),e.insertionMode=Vi.IN_HEAD_NO_SCRIPT);break;case $s.NOFRAMES:case $s.STYLE:e._switchToTextParsing(t,ai.RAWTEXT);break;case $s.SCRIPT:e._switchToTextParsing(t,ai.SCRIPT_DATA);break;case $s.TEMPLATE:e._insertTemplate(t),e.activeFormattingElements.insertMarker(),e.framesetOk=!1,e.insertionMode=Vi.IN_TEMPLATE,e.tmplInsertionModeStack.unshift(Vi.IN_TEMPLATE);break;case $s.HEAD:e._err(t,Vs.misplacedStartTagForHeadElement);break;default:la(e,t)}}function ca(e,t){e.openElements.tmplCount>0?(e.openElements.generateImpliedEndTagsThoroughly(),e.openElements.currentTagId!==$s.TEMPLATE&&e._err(t,Vs.closingOfElementWithOpenChildElements),e.openElements.popUntilTagNamePopped($s.TEMPLATE),e.activeFormattingElements.clearToLastMarker(),e.tmplInsertionModeStack.shift(),e._resetInsertionMode()):e._err(t,Vs.endTagWithoutMatchingOpenElement)}function la(e,t){e.openElements.pop(),e.insertionMode=Vi.AFTER_HEAD,e._processToken(t)}function ua(e,t){const n=t.type===js.EOF?Vs.openElementsLeftAfterEof:Vs.disallowedContentInNoscriptInHead;e._err(t,n),e.openElements.pop(),e.insertionMode=Vi.IN_HEAD,e._processToken(t)}function ha(e,t){e._insertFakeElement(Xs.BODY,$s.BODY),e.insertionMode=Vi.IN_BODY,da(e,t)}function da(e,t){switch(t.type){case js.CHARACTER:fa(e,t);break;case js.WHITESPACE_CHARACTER:pa(e,t);break;case js.COMMENT:na(e,t);break;case js.START_TAG:ga(e,t);break;case js.END_TAG:Sa(e,t);break;case js.EOF:ba(e,t)}}function pa(e,t){e._reconstructActiveFormattingElements(),e._insertCharacters(t)}function fa(e,t){e._reconstructActiveFormattingElements(),e._insertCharacters(t),e.framesetOk=!1}function Ea(e,t){e._reconstructActiveFormattingElements(),e._appendElement(t,Qs.HTML),e.framesetOk=!1,t.ackSelfClosing=!0}function Ta(e){const t=Js(e,Ws.TYPE);return null!=t&&"hidden"===t.toLowerCase()}function ma(e,t){e._switchToTextParsing(t,ai.RAWTEXT)}function Aa(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,Qs.HTML)}function ga(e,t){switch(t.tagID){case $s.I:case $s.S:case $s.B:case $s.U:case $s.EM:case $s.TT:case $s.BIG:case $s.CODE:case $s.FONT:case $s.SMALL:case $s.STRIKE:case $s.STRONG:!function(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,Qs.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t)}(e,t);break;case $s.A:!function(e,t){const n=e.activeFormattingElements.getElementEntryInScopeWithTagName(Xs.A);n&&(ta(e,t),e.openElements.remove(n.element),e.activeFormattingElements.removeEntry(n)),e._reconstructActiveFormattingElements(),e._insertElement(t,Qs.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t)}(e,t);break;case $s.H1:case $s.H2:case $s.H3:case $s.H4:case $s.H5:case $s.H6:!function(e,t){e.openElements.hasInButtonScope($s.P)&&e._closePElement(),ri.has(e.openElements.currentTagId)&&e.openElements.pop(),e._insertElement(t,Qs.HTML)}(e,t);break;case $s.P:case $s.DL:case $s.OL:case $s.UL:case $s.DIV:case $s.DIR:case $s.NAV:case $s.MAIN:case $s.MENU:case $s.ASIDE:case $s.CENTER:case $s.FIGURE:case $s.FOOTER:case $s.HEADER:case $s.HGROUP:case $s.DIALOG:case $s.DETAILS:case $s.ADDRESS:case $s.ARTICLE:case $s.SEARCH:case $s.SECTION:case $s.SUMMARY:case $s.FIELDSET:case $s.BLOCKQUOTE:case $s.FIGCAPTION:!function(e,t){e.openElements.hasInButtonScope($s.P)&&e._closePElement(),e._insertElement(t,Qs.HTML)}(e,t);break;case $s.LI:case $s.DD:case $s.DT:!function(e,t){e.framesetOk=!1;const n=t.tagID;for(let t=e.openElements.stackTop;t>=0;t--){const r=e.openElements.tagIDs[t];if(n===$s.LI&&r===$s.LI||(n===$s.DD||n===$s.DT)&&(r===$s.DD||r===$s.DT)){e.openElements.generateImpliedEndTagsWithExclusion(r),e.openElements.popUntilTagNamePopped(r);break}if(r!==$s.ADDRESS&&r!==$s.DIV&&r!==$s.P&&e._isSpecialElement(e.openElements.items[t],r))break}e.openElements.hasInButtonScope($s.P)&&e._closePElement(),e._insertElement(t,Qs.HTML)}(e,t);break;case $s.BR:case $s.IMG:case $s.WBR:case $s.AREA:case $s.EMBED:case $s.KEYGEN:Ea(e,t);break;case $s.HR:!function(e,t){e.openElements.hasInButtonScope($s.P)&&e._closePElement(),e._appendElement(t,Qs.HTML),e.framesetOk=!1,t.ackSelfClosing=!0}(e,t);break;case $s.RB:case $s.RTC:!function(e,t){e.openElements.hasInScope($s.RUBY)&&e.openElements.generateImpliedEndTags(),e._insertElement(t,Qs.HTML)}(e,t);break;case $s.RT:case $s.RP:!function(e,t){e.openElements.hasInScope($s.RUBY)&&e.openElements.generateImpliedEndTagsWithExclusion($s.RTC),e._insertElement(t,Qs.HTML)}(e,t);break;case $s.PRE:case $s.LISTING:!function(e,t){e.openElements.hasInButtonScope($s.P)&&e._closePElement(),e._insertElement(t,Qs.HTML),e.skipNextNewLine=!0,e.framesetOk=!1}(e,t);break;case $s.XMP:!function(e,t){e.openElements.hasInButtonScope($s.P)&&e._closePElement(),e._reconstructActiveFormattingElements(),e.framesetOk=!1,e._switchToTextParsing(t,ai.RAWTEXT)}(e,t);break;case $s.SVG:!function(e,t){e._reconstructActiveFormattingElements(),qi(t),Yi(t),t.selfClosing?e._appendElement(t,Qs.SVG):e._insertElement(t,Qs.SVG),t.ackSelfClosing=!0}(e,t);break;case $s.HTML:!function(e,t){0===e.openElements.tmplCount&&e.treeAdapter.adoptAttributes(e.openElements.items[0],t.attrs)}(e,t);break;case $s.BASE:case $s.LINK:case $s.META:case $s.STYLE:case $s.TITLE:case $s.SCRIPT:case $s.BGSOUND:case $s.BASEFONT:case $s.TEMPLATE:oa(e,t);break;case $s.BODY:!function(e,t){const n=e.openElements.tryPeekProperlyNestedBodyElement();n&&0===e.openElements.tmplCount&&(e.framesetOk=!1,e.treeAdapter.adoptAttributes(n,t.attrs))}(e,t);break;case $s.FORM:!function(e,t){const n=e.openElements.tmplCount>0;e.formElement&&!n||(e.openElements.hasInButtonScope($s.P)&&e._closePElement(),e._insertElement(t,Qs.HTML),n||(e.formElement=e.openElements.current))}(e,t);break;case $s.NOBR:!function(e,t){e._reconstructActiveFormattingElements(),e.openElements.hasInScope($s.NOBR)&&(ta(e,t),e._reconstructActiveFormattingElements()),e._insertElement(t,Qs.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t)}(e,t);break;case $s.MATH:!function(e,t){e._reconstructActiveFormattingElements(),Gi(t),Yi(t),t.selfClosing?e._appendElement(t,Qs.MATHML):e._insertElement(t,Qs.MATHML),t.ackSelfClosing=!0}(e,t);break;case $s.TABLE:!function(e,t){e.treeAdapter.getDocumentMode(e.document)!==Ks.QUIRKS&&e.openElements.hasInButtonScope($s.P)&&e._closePElement(),e._insertElement(t,Qs.HTML),e.framesetOk=!1,e.insertionMode=Vi.IN_TABLE}(e,t);break;case $s.INPUT:!function(e,t){e._reconstructActiveFormattingElements(),e._appendElement(t,Qs.HTML),Ta(t)||(e.framesetOk=!1),t.ackSelfClosing=!0}(e,t);break;case $s.PARAM:case $s.TRACK:case $s.SOURCE:!function(e,t){e._appendElement(t,Qs.HTML),t.ackSelfClosing=!0}(e,t);break;case $s.IMAGE:!function(e,t){t.tagName=Xs.IMG,t.tagID=$s.IMG,Ea(e,t)}(e,t);break;case $s.BUTTON:!function(e,t){e.openElements.hasInScope($s.BUTTON)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped($s.BUTTON)),e._reconstructActiveFormattingElements(),e._insertElement(t,Qs.HTML),e.framesetOk=!1}(e,t);break;case $s.APPLET:case $s.OBJECT:case $s.MARQUEE:!function(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,Qs.HTML),e.activeFormattingElements.insertMarker(),e.framesetOk=!1}(e,t);break;case $s.IFRAME:!function(e,t){e.framesetOk=!1,e._switchToTextParsing(t,ai.RAWTEXT)}(e,t);break;case $s.SELECT:!function(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,Qs.HTML),e.framesetOk=!1,e.insertionMode=e.insertionMode===Vi.IN_TABLE||e.insertionMode===Vi.IN_CAPTION||e.insertionMode===Vi.IN_TABLE_BODY||e.insertionMode===Vi.IN_ROW||e.insertionMode===Vi.IN_CELL?Vi.IN_SELECT_IN_TABLE:Vi.IN_SELECT}(e,t);break;case $s.OPTION:case $s.OPTGROUP:!function(e,t){e.openElements.currentTagId===$s.OPTION&&e.openElements.pop(),e._reconstructActiveFormattingElements(),e._insertElement(t,Qs.HTML)}(e,t);break;case $s.NOEMBED:case $s.NOFRAMES:ma(e,t);break;case $s.FRAMESET:!function(e,t){const n=e.openElements.tryPeekProperlyNestedBodyElement();e.framesetOk&&n&&(e.treeAdapter.detachNode(n),e.openElements.popAllUpToHtmlElement(),e._insertElement(t,Qs.HTML),e.insertionMode=Vi.IN_FRAMESET)}(e,t);break;case $s.TEXTAREA:!function(e,t){e._insertElement(t,Qs.HTML),e.skipNextNewLine=!0,e.tokenizer.state=ai.RCDATA,e.originalInsertionMode=e.insertionMode,e.framesetOk=!1,e.insertionMode=Vi.TEXT}(e,t);break;case $s.NOSCRIPT:e.options.scriptingEnabled?ma(e,t):Aa(e,t);break;case $s.PLAINTEXT:!function(e,t){e.openElements.hasInButtonScope($s.P)&&e._closePElement(),e._insertElement(t,Qs.HTML),e.tokenizer.state=ai.PLAINTEXT}(e,t);break;case $s.COL:case $s.TH:case $s.TD:case $s.TR:case $s.HEAD:case $s.FRAME:case $s.TBODY:case $s.TFOOT:case $s.THEAD:case $s.CAPTION:case $s.COLGROUP:break;default:Aa(e,t)}}function _a(e,t){const n=t.tagName,r=t.tagID;for(let t=e.openElements.stackTop;t>0;t--){const s=e.openElements.items[t],i=e.openElements.tagIDs[t];if(r===i&&(r!==$s.UNKNOWN||e.treeAdapter.getTagName(s)===n)){e.openElements.generateImpliedEndTagsWithExclusion(r),e.openElements.stackTop>=t&&e.openElements.shortenToLength(t);break}if(e._isSpecialElement(s,i))break}}function Sa(e,t){switch(t.tagID){case $s.A:case $s.B:case $s.I:case $s.S:case $s.U:case $s.EM:case $s.TT:case $s.BIG:case $s.CODE:case $s.FONT:case $s.NOBR:case $s.SMALL:case $s.STRIKE:case $s.STRONG:ta(e,t);break;case $s.P:!function(e){e.openElements.hasInButtonScope($s.P)||e._insertFakeElement(Xs.P,$s.P),e._closePElement()}(e);break;case $s.DL:case $s.UL:case $s.OL:case $s.DIR:case $s.DIV:case $s.NAV:case $s.PRE:case $s.MAIN:case $s.MENU:case $s.ASIDE:case $s.BUTTON:case $s.CENTER:case $s.FIGURE:case $s.FOOTER:case $s.HEADER:case $s.HGROUP:case $s.DIALOG:case $s.ADDRESS:case $s.ARTICLE:case $s.DETAILS:case $s.SEARCH:case $s.SECTION:case $s.SUMMARY:case $s.LISTING:case $s.FIELDSET:case $s.BLOCKQUOTE:case $s.FIGCAPTION:!function(e,t){const n=t.tagID;e.openElements.hasInScope(n)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(n))}(e,t);break;case $s.LI:!function(e){e.openElements.hasInListItemScope($s.LI)&&(e.openElements.generateImpliedEndTagsWithExclusion($s.LI),e.openElements.popUntilTagNamePopped($s.LI))}(e);break;case $s.DD:case $s.DT:!function(e,t){const n=t.tagID;e.openElements.hasInScope(n)&&(e.openElements.generateImpliedEndTagsWithExclusion(n),e.openElements.popUntilTagNamePopped(n))}(e,t);break;case $s.H1:case $s.H2:case $s.H3:case $s.H4:case $s.H5:case $s.H6:!function(e){e.openElements.hasNumberedHeaderInScope()&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilNumberedHeaderPopped())}(e);break;case $s.BR:!function(e){e._reconstructActiveFormattingElements(),e._insertFakeElement(Xs.BR,$s.BR),e.openElements.pop(),e.framesetOk=!1}(e);break;case $s.BODY:!function(e,t){if(e.openElements.hasInScope($s.BODY)&&(e.insertionMode=Vi.AFTER_BODY,e.options.sourceCodeLocationInfo)){const n=e.openElements.tryPeekProperlyNestedBodyElement();n&&e._setEndLocation(n,t)}}(e,t);break;case $s.HTML:!function(e,t){e.openElements.hasInScope($s.BODY)&&(e.insertionMode=Vi.AFTER_BODY,Ha(e,t))}(e,t);break;case $s.FORM:!function(e){const t=e.openElements.tmplCount>0,{formElement:n}=e;t||(e.formElement=null),(n||t)&&e.openElements.hasInScope($s.FORM)&&(e.openElements.generateImpliedEndTags(),t?e.openElements.popUntilTagNamePopped($s.FORM):n&&e.openElements.remove(n))}(e);break;case $s.APPLET:case $s.OBJECT:case $s.MARQUEE:!function(e,t){const n=t.tagID;e.openElements.hasInScope(n)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(n),e.activeFormattingElements.clearToLastMarker())}(e,t);break;case $s.TEMPLATE:ca(e,t);break;default:_a(e,t)}}function ba(e,t){e.tmplInsertionModeStack.length>0?Fa(e,t):ra(e,t)}function Ia(e,t){if(Qi.has(e.openElements.currentTagId))switch(e.pendingCharacterTokens.length=0,e.hasNonWhitespacePendingCharacterToken=!1,e.originalInsertionMode=e.insertionMode,e.insertionMode=Vi.IN_TABLE_TEXT,t.type){case js.CHARACTER:ya(e,t);break;case js.WHITESPACE_CHARACTER:Oa(e,t)}else Da(e,t)}function Na(e,t){switch(t.tagID){case $s.TD:case $s.TH:case $s.TR:!function(e,t){e.openElements.clearBackToTableContext(),e._insertFakeElement(Xs.TBODY,$s.TBODY),e.insertionMode=Vi.IN_TABLE_BODY,wa(e,t)}(e,t);break;case $s.STYLE:case $s.SCRIPT:case $s.TEMPLATE:oa(e,t);break;case $s.COL:!function(e,t){e.openElements.clearBackToTableContext(),e._insertFakeElement(Xs.COLGROUP,$s.COLGROUP),e.insertionMode=Vi.IN_COLUMN_GROUP,ka(e,t)}(e,t);break;case $s.FORM:!function(e,t){e.formElement||0!==e.openElements.tmplCount||(e._insertElement(t,Qs.HTML),e.formElement=e.openElements.current,e.openElements.pop())}(e,t);break;case $s.TABLE:!function(e,t){e.openElements.hasInTableScope($s.TABLE)&&(e.openElements.popUntilTagNamePopped($s.TABLE),e._resetInsertionMode(),e._processStartTag(t))}(e,t);break;case $s.TBODY:case $s.TFOOT:case $s.THEAD:!function(e,t){e.openElements.clearBackToTableContext(),e._insertElement(t,Qs.HTML),e.insertionMode=Vi.IN_TABLE_BODY}(e,t);break;case $s.INPUT:!function(e,t){Ta(t)?e._appendElement(t,Qs.HTML):Da(e,t),t.ackSelfClosing=!0}(e,t);break;case $s.CAPTION:!function(e,t){e.openElements.clearBackToTableContext(),e.activeFormattingElements.insertMarker(),e._insertElement(t,Qs.HTML),e.insertionMode=Vi.IN_CAPTION}(e,t);break;case $s.COLGROUP:!function(e,t){e.openElements.clearBackToTableContext(),e._insertElement(t,Qs.HTML),e.insertionMode=Vi.IN_COLUMN_GROUP}(e,t);break;default:Da(e,t)}}function Ca(e,t){switch(t.tagID){case $s.TABLE:e.openElements.hasInTableScope($s.TABLE)&&(e.openElements.popUntilTagNamePopped($s.TABLE),e._resetInsertionMode());break;case $s.TEMPLATE:ca(e,t);break;case $s.BODY:case $s.CAPTION:case $s.COL:case $s.COLGROUP:case $s.HTML:case $s.TBODY:case $s.TD:case $s.TFOOT:case $s.TH:case $s.THEAD:case $s.TR:break;default:Da(e,t)}}function Da(e,t){const n=e.fosterParentingEnabled;e.fosterParentingEnabled=!0,da(e,t),e.fosterParentingEnabled=n}function Oa(e,t){e.pendingCharacterTokens.push(t)}function ya(e,t){e.pendingCharacterTokens.push(t),e.hasNonWhitespacePendingCharacterToken=!0}function Ra(e,t){let n=0;if(e.hasNonWhitespacePendingCharacterToken)for(;n<e.pendingCharacterTokens.length;n++)Da(e,e.pendingCharacterTokens[n]);else for(;n<e.pendingCharacterTokens.length;n++)e._insertCharacters(e.pendingCharacterTokens[n]);e.insertionMode=e.originalInsertionMode,e._processToken(t)}const La=new Set([$s.CAPTION,$s.COL,$s.COLGROUP,$s.TBODY,$s.TD,$s.TFOOT,$s.TH,$s.THEAD,$s.TR]);function ka(e,t){switch(t.tagID){case $s.HTML:ga(e,t);break;case $s.COL:e._appendElement(t,Qs.HTML),t.ackSelfClosing=!0;break;case $s.TEMPLATE:oa(e,t);break;default:Pa(e,t)}}function Pa(e,t){e.openElements.currentTagId===$s.COLGROUP&&(e.openElements.pop(),e.insertionMode=Vi.IN_TABLE,e._processToken(t))}function wa(e,t){switch(t.tagID){case $s.TR:e.openElements.clearBackToTableBodyContext(),e._insertElement(t,Qs.HTML),e.insertionMode=Vi.IN_ROW;break;case $s.TH:case $s.TD:e.openElements.clearBackToTableBodyContext(),e._insertFakeElement(Xs.TR,$s.TR),e.insertionMode=Vi.IN_ROW,Ba(e,t);break;case $s.CAPTION:case $s.COL:case $s.COLGROUP:case $s.TBODY:case $s.TFOOT:case $s.THEAD:e.openElements.hasTableBodyContextInTableScope()&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=Vi.IN_TABLE,Na(e,t));break;default:Na(e,t)}}function Ma(e,t){const n=t.tagID;switch(t.tagID){case $s.TBODY:case $s.TFOOT:case $s.THEAD:e.openElements.hasInTableScope(n)&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=Vi.IN_TABLE);break;case $s.TABLE:e.openElements.hasTableBodyContextInTableScope()&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=Vi.IN_TABLE,Ca(e,t));break;case $s.BODY:case $s.CAPTION:case $s.COL:case $s.COLGROUP:case $s.HTML:case $s.TD:case $s.TH:case $s.TR:break;default:Ca(e,t)}}function Ba(e,t){switch(t.tagID){case $s.TH:case $s.TD:e.openElements.clearBackToTableRowContext(),e._insertElement(t,Qs.HTML),e.insertionMode=Vi.IN_CELL,e.activeFormattingElements.insertMarker();break;case $s.CAPTION:case $s.COL:case $s.COLGROUP:case $s.TBODY:case $s.TFOOT:case $s.THEAD:case $s.TR:e.openElements.hasInTableScope($s.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=Vi.IN_TABLE_BODY,wa(e,t));break;default:Na(e,t)}}function va(e,t){switch(t.tagID){case $s.TR:e.openElements.hasInTableScope($s.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=Vi.IN_TABLE_BODY);break;case $s.TABLE:e.openElements.hasInTableScope($s.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=Vi.IN_TABLE_BODY,Ma(e,t));break;case $s.TBODY:case $s.TFOOT:case $s.THEAD:(e.openElements.hasInTableScope(t.tagID)||e.openElements.hasInTableScope($s.TR))&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=Vi.IN_TABLE_BODY,Ma(e,t));break;case $s.BODY:case $s.CAPTION:case $s.COL:case $s.COLGROUP:case $s.HTML:case $s.TD:case $s.TH:break;default:Ca(e,t)}}function xa(e,t){switch(t.tagID){case $s.HTML:ga(e,t);break;case $s.OPTION:e.openElements.currentTagId===$s.OPTION&&e.openElements.pop(),e._insertElement(t,Qs.HTML);break;case $s.OPTGROUP:e.openElements.currentTagId===$s.OPTION&&e.openElements.pop(),e.openElements.currentTagId===$s.OPTGROUP&&e.openElements.pop(),e._insertElement(t,Qs.HTML);break;case $s.HR:e.openElements.currentTagId===$s.OPTION&&e.openElements.pop(),e.openElements.currentTagId===$s.OPTGROUP&&e.openElements.pop(),e._appendElement(t,Qs.HTML),t.ackSelfClosing=!0;break;case $s.INPUT:case $s.KEYGEN:case $s.TEXTAREA:case $s.SELECT:e.openElements.hasInSelectScope($s.SELECT)&&(e.openElements.popUntilTagNamePopped($s.SELECT),e._resetInsertionMode(),t.tagID!==$s.SELECT&&e._processStartTag(t));break;case $s.SCRIPT:case $s.TEMPLATE:oa(e,t)}}function Ua(e,t){switch(t.tagID){case $s.OPTGROUP:e.openElements.stackTop>0&&e.openElements.currentTagId===$s.OPTION&&e.openElements.tagIDs[e.openElements.stackTop-1]===$s.OPTGROUP&&e.openElements.pop(),e.openElements.currentTagId===$s.OPTGROUP&&e.openElements.pop();break;case $s.OPTION:e.openElements.currentTagId===$s.OPTION&&e.openElements.pop();break;case $s.SELECT:e.openElements.hasInSelectScope($s.SELECT)&&(e.openElements.popUntilTagNamePopped($s.SELECT),e._resetInsertionMode());break;case $s.TEMPLATE:ca(e,t)}}function Fa(e,t){e.openElements.tmplCount>0?(e.openElements.popUntilTagNamePopped($s.TEMPLATE),e.activeFormattingElements.clearToLastMarker(),e.tmplInsertionModeStack.shift(),e._resetInsertionMode(),e.onEof(t)):ra(e,t)}function Ha(e,t){var n;if(t.tagID===$s.HTML){if(e.fragmentContext||(e.insertionMode=Vi.AFTER_AFTER_BODY),e.options.sourceCodeLocationInfo&&e.openElements.tagIDs[0]===$s.HTML){e._setEndLocation(e.openElements.items[0],t);const r=e.openElements.items[1];r&&!(null===(n=e.treeAdapter.getNodeSourceCodeLocation(r))||void 0===n?void 0:n.endTag)&&e._setEndLocation(r,t)}}else Ga(e,t)}function Ga(e,t){e.insertionMode=Vi.IN_BODY,da(e,t)}function qa(e,t){e.insertionMode=Vi.IN_BODY,da(e,t)}function Ya(e){for(;e.treeAdapter.getNamespaceURI(e.openElements.current)!==Qs.HTML&&!e._isIntegrationPoint(e.openElements.currentTagId,e.openElements.current);)e.openElements.pop()}const Va=new Set([Xs.AREA,Xs.BASE,Xs.BASEFONT,Xs.BGSOUND,Xs.BR,Xs.COL,Xs.EMBED,Xs.FRAME,Xs.HR,Xs.IMG,Xs.INPUT,Xs.KEYGEN,Xs.LINK,Xs.META,Xs.PARAM,Xs.SOURCE,Xs.TRACK,Xs.WBR]);const ja={treeAdapter:Ri,scriptingEnabled:!0};function Qa(e,t){return Wa(e,{...ja,...t})}function Wa(e,t){return t.treeAdapter.isElementNode(e)?function(e,t){const n=t.treeAdapter.getTagName(e);return`<${n}${function(e,{treeAdapter:t}){let n="";for(const r of t.getAttrList(e)){if(n+=" ",r.namespace)switch(r.namespace){case Qs.XML:n+=`xml:${r.name}`;break;case Qs.XMLNS:"xmlns"!==r.name&&(n+="xmlns:"),n+=r.name;break;case Qs.XLINK:n+=`xlink:${r.name}`;break;default:n+=`${r.prefix}:${r.name}`}else n+=r.name;n+=`="${oe(r.value)}"`}return n}(e,t)}>${function(e,t){return t.treeAdapter.isElementNode(e)&&t.treeAdapter.getNamespaceURI(e)===Qs.HTML&&Va.has(t.treeAdapter.getTagName(e))}(e,t)?"":`${function(e,t){let n="";const r=t.treeAdapter.isElementNode(e)&&t.treeAdapter.getTagName(e)===Xs.TEMPLATE&&t.treeAdapter.getNamespaceURI(e)===Qs.HTML?t.treeAdapter.getTemplateContent(e):e,s=t.treeAdapter.getChildNodes(r);if(s)for(const e of s)n+=Wa(e,t);return n}(e,t)}</${n}>`}`}(e,t):t.treeAdapter.isTextNode(e)?function(e,t){const{treeAdapter:n}=t,r=n.getTextNodeContent(e),s=n.getParentNode(e),i=s&&n.isElementNode(s)&&n.getTagName(s);return i&&n.getNamespaceURI(s)===Qs.HTML&&(a=i,o=t.scriptingEnabled,si.has(a)||o&&a===Xs.NOSCRIPT)?r:ce(r);var a,o}(e,t):t.treeAdapter.isCommentNode(e)?function(e,{treeAdapter:t}){return`\x3c!--${t.getCommentNodeContent(e)}--\x3e`}(e,t):t.treeAdapter.isDocumentTypeNode(e)?function(e,{treeAdapter:t}){return`<!DOCTYPE ${t.getDocumentTypeNodeName(e)}>`}(e,t):""}function Ka(e){const t=e.includes('"')?"'":'"';return t+e+t}const Xa={isCommentNode:w,isElementNode:L,isTextNode:P,createDocument(){const e=new y([]);return e["x-mode"]=Ks.NO_QUIRKS,e},createDocumentFragment:()=>new y([]),createElement(e,t,n){const r=Object.create(null),s=Object.create(null),i=Object.create(null);for(let e=0;e<n.length;e++){const t=n[e].name;r[t]=n[e].value,s[t]=n[e].namespace,i[t]=n[e].prefix}const a=new R(e,r,[]);return a.namespace=t,a["x-attribsNamespace"]=s,a["x-attribsPrefix"]=i,a},createCommentNode:e=>new N(e),createTextNode:e=>new I(e),appendChild(e,t){const n=e.children[e.children.length-1];n&&(n.next=t,t.prev=n),e.children.push(t),t.parent=e},insertBefore(e,t,n){const r=e.children.indexOf(n),{prev:s}=n;s&&(s.next=t,t.prev=s),n.prev=t,t.next=n,e.children.splice(r,0,t),t.parent=e},setTemplateContent(e,t){Xa.appendChild(e,t)},getTemplateContent:e=>e.children[0],setDocumentType(e,t,n,r){const s=function(e,t,n){let r="!DOCTYPE ";return e&&(r+=e),t?r+=` PUBLIC ${Ka(t)}`:n&&(r+=" SYSTEM"),n&&(r+=` ${Ka(n)}`),r}(t,n,r);let i=e.children.find((e=>M(e)&&"!doctype"===e.name));i?i.data=null!=s?s:null:(i=new C("!doctype",s),Xa.appendChild(e,i)),i["x-name"]=t,i["x-publicId"]=n,i["x-systemId"]=r},setDocumentMode(e,t){e["x-mode"]=t},getDocumentMode:e=>e["x-mode"],detachNode(e){if(e.parent){const t=e.parent.children.indexOf(e),{prev:n,next:r}=e;e.prev=null,e.next=null,n&&(n.next=r),r&&(r.prev=n),e.parent.children.splice(t,1),e.parent=null}},insertText(e,t){const n=e.children[e.children.length-1];n&&P(n)?n.data+=t:Xa.appendChild(e,Xa.createTextNode(t))},insertTextBefore(e,t,n){const r=e.children[e.children.indexOf(n)-1];r&&P(r)?r.data+=t:Xa.insertBefore(e,Xa.createTextNode(t),n)},adoptAttributes(e,t){for(let n=0;n<t.length;n++){const r=t[n].name;void 0===e.attribs[r]&&(e.attribs[r]=t[n].value,e["x-attribsNamespace"][r]=t[n].namespace,e["x-attribsPrefix"][r]=t[n].prefix)}},getFirstChild:e=>e.children[0],getChildNodes:e=>e.children,getParentNode:e=>e.parent,getAttrList:e=>e.attributes,getTagName:e=>e.name,getNamespaceURI:e=>e.namespace,getTextNodeContent:e=>e.data,getCommentNodeContent:e=>e.data,getDocumentTypeNodeName(e){var t;return null!==(t=e["x-name"])&&void 0!==t?t:""},getDocumentTypeNodePublicId(e){var t;return null!==(t=e["x-publicId"])&&void 0!==t?t:""},getDocumentTypeNodeSystemId(e){var t;return null!==(t=e["x-systemId"])&&void 0!==t?t:""},isDocumentTypeNode:e=>M(e)&&"!doctype"===e.name,setNodeSourceCodeLocation(e,t){t&&(e.startIndex=t.startOffset,e.endIndex=t.endOffset),e.sourceCodeLocation=t},getNodeSourceCodeLocation:e=>e.sourceCodeLocation,updateNodeSourceCodeLocation(e,t){null!=t.endOffset&&(e.endIndex=t.endOffset),e.sourceCodeLocation={...e.sourceCodeLocation,...t}}};const $a={treeAdapter:Xa};var za,Ja,Za;function eo(e){return e===za.Space||e===za.NewLine||e===za.Tab||e===za.FormFeed||e===za.CarriageReturn}function to(e){return e===za.Slash||e===za.Gt||eo(e)}!function(e){e[e.Tab=9]="Tab",e[e.NewLine=10]="NewLine",e[e.FormFeed=12]="FormFeed",e[e.CarriageReturn=13]="CarriageReturn",e[e.Space=32]="Space",e[e.ExclamationMark=33]="ExclamationMark",e[e.Number=35]="Number",e[e.Amp=38]="Amp",e[e.SingleQuote=39]="SingleQuote",e[e.DoubleQuote=34]="DoubleQuote",e[e.Dash=45]="Dash",e[e.Slash=47]="Slash",e[e.Zero=48]="Zero",e[e.Nine=57]="Nine",e[e.Semi=59]="Semi",e[e.Lt=60]="Lt",e[e.Eq=61]="Eq",e[e.Gt=62]="Gt",e[e.Questionmark=63]="Questionmark",e[e.UpperA=65]="UpperA",e[e.LowerA=97]="LowerA",e[e.UpperF=70]="UpperF",e[e.LowerF=102]="LowerF",e[e.UpperZ=90]="UpperZ",e[e.LowerZ=122]="LowerZ",e[e.LowerX=120]="LowerX",e[e.OpeningSquareBracket=91]="OpeningSquareBracket"}(za||(za={})),function(e){e[e.Text=1]="Text",e[e.BeforeTagName=2]="BeforeTagName",e[e.InTagName=3]="InTagName",e[e.InSelfClosingTag=4]="InSelfClosingTag",e[e.BeforeClosingTagName=5]="BeforeClosingTagName",e[e.InClosingTagName=6]="InClosingTagName",e[e.AfterClosingTagName=7]="AfterClosingTagName",e[e.BeforeAttributeName=8]="BeforeAttributeName",e[e.InAttributeName=9]="InAttributeName",e[e.AfterAttributeName=10]="AfterAttributeName",e[e.BeforeAttributeValue=11]="BeforeAttributeValue",e[e.InAttributeValueDq=12]="InAttributeValueDq",e[e.InAttributeValueSq=13]="InAttributeValueSq",e[e.InAttributeValueNq=14]="InAttributeValueNq",e[e.BeforeDeclaration=15]="BeforeDeclaration",e[e.InDeclaration=16]="InDeclaration",e[e.InProcessingInstruction=17]="InProcessingInstruction",e[e.BeforeComment=18]="BeforeComment",e[e.CDATASequence=19]="CDATASequence",e[e.InSpecialComment=20]="InSpecialComment",e[e.InCommentLike=21]="InCommentLike",e[e.BeforeSpecialS=22]="BeforeSpecialS",e[e.BeforeSpecialT=23]="BeforeSpecialT",e[e.SpecialStartSequence=24]="SpecialStartSequence",e[e.InSpecialTag=25]="InSpecialTag",e[e.InEntity=26]="InEntity"}(Ja||(Ja={})),function(e){e[e.NoValue=0]="NoValue",e[e.Unquoted=1]="Unquoted",e[e.Single=2]="Single",e[e.Double=3]="Double"}(Za||(Za={}));const no={Cdata:new Uint8Array([67,68,65,84,65,91]),CdataEnd:new Uint8Array([93,93,62]),CommentEnd:new Uint8Array([45,45,62]),ScriptEnd:new Uint8Array([60,47,115,99,114,105,112,116]),StyleEnd:new Uint8Array([60,47,115,116,121,108,101]),TitleEnd:new Uint8Array([60,47,116,105,116,108,101]),TextareaEnd:new Uint8Array([60,47,116,101,120,116,97,114,101,97])};class ro{constructor({xmlMode:e=!1,decodeEntities:t=!0},n){this.cbs=n,this.state=Ja.Text,this.buffer="",this.sectionStart=0,this.index=0,this.entityStart=0,this.baseState=Ja.Text,this.isSpecial=!1,this.running=!0,this.offset=0,this.currentSequence=void 0,this.sequenceIndex=0,this.xmlMode=e,this.decodeEntities=t,this.entityDecoder=new J(e?q:G,((e,t)=>this.emitCodePoint(e,t)))}reset(){this.state=Ja.Text,this.buffer="",this.sectionStart=0,this.index=0,this.baseState=Ja.Text,this.currentSequence=void 0,this.running=!0,this.offset=0}write(e){this.offset+=this.buffer.length,this.buffer=e,this.parse()}end(){this.running&&this.finish()}pause(){this.running=!1}resume(){this.running=!0,this.index<this.buffer.length+this.offset&&this.parse()}stateText(e){e===za.Lt||!this.decodeEntities&&this.fastForwardTo(za.Lt)?(this.index>this.sectionStart&&this.cbs.ontext(this.sectionStart,this.index),this.state=Ja.BeforeTagName,this.sectionStart=this.index):this.decodeEntities&&e===za.Amp&&this.startEntity()}stateSpecialStartSequence(e){const t=this.sequenceIndex===this.currentSequence.length;if(t?to(e):(32|e)===this.currentSequence[this.sequenceIndex]){if(!t)return void this.sequenceIndex++}else this.isSpecial=!1;this.sequenceIndex=0,this.state=Ja.InTagName,this.stateInTagName(e)}stateInSpecialTag(e){if(this.sequenceIndex===this.currentSequence.length){if(e===za.Gt||eo(e)){const t=this.index-this.currentSequence.length;if(this.sectionStart<t){const e=this.index;this.index=t,this.cbs.ontext(this.sectionStart,t),this.index=e}return this.isSpecial=!1,this.sectionStart=t+2,void this.stateInClosingTagName(e)}this.sequenceIndex=0}(32|e)===this.currentSequence[this.sequenceIndex]?this.sequenceIndex+=1:0===this.sequenceIndex?this.currentSequence===no.TitleEnd?this.decodeEntities&&e===za.Amp&&this.startEntity():this.fastForwardTo(za.Lt)&&(this.sequenceIndex=1):this.sequenceIndex=Number(e===za.Lt)}stateCDATASequence(e){e===no.Cdata[this.sequenceIndex]?++this.sequenceIndex===no.Cdata.length&&(this.state=Ja.InCommentLike,this.currentSequence=no.CdataEnd,this.sequenceIndex=0,this.sectionStart=this.index+1):(this.sequenceIndex=0,this.state=Ja.InDeclaration,this.stateInDeclaration(e))}fastForwardTo(e){for(;++this.index<this.buffer.length+this.offset;)if(this.buffer.charCodeAt(this.index-this.offset)===e)return!0;return this.index=this.buffer.length+this.offset-1,!1}stateInCommentLike(e){e===this.currentSequence[this.sequenceIndex]?++this.sequenceIndex===this.currentSequence.length&&(this.currentSequence===no.CdataEnd?this.cbs.oncdata(this.sectionStart,this.index,2):this.cbs.oncomment(this.sectionStart,this.index,2),this.sequenceIndex=0,this.sectionStart=this.index+1,this.state=Ja.Text):0===this.sequenceIndex?this.fastForwardTo(this.currentSequence[0])&&(this.sequenceIndex=1):e!==this.currentSequence[this.sequenceIndex-1]&&(this.sequenceIndex=0)}isTagStartChar(e){return this.xmlMode?!to(e):function(e){return e>=za.LowerA&&e<=za.LowerZ||e>=za.UpperA&&e<=za.UpperZ}(e)}startSpecial(e,t){this.isSpecial=!0,this.currentSequence=e,this.sequenceIndex=t,this.state=Ja.SpecialStartSequence}stateBeforeTagName(e){if(e===za.ExclamationMark)this.state=Ja.BeforeDeclaration,this.sectionStart=this.index+1;else if(e===za.Questionmark)this.state=Ja.InProcessingInstruction,this.sectionStart=this.index+1;else if(this.isTagStartChar(e)){const t=32|e;this.sectionStart=this.index,this.xmlMode?this.state=Ja.InTagName:t===no.ScriptEnd[2]?this.state=Ja.BeforeSpecialS:t===no.TitleEnd[2]?this.state=Ja.BeforeSpecialT:this.state=Ja.InTagName}else e===za.Slash?this.state=Ja.BeforeClosingTagName:(this.state=Ja.Text,this.stateText(e))}stateInTagName(e){to(e)&&(this.cbs.onopentagname(this.sectionStart,this.index),this.sectionStart=-1,this.state=Ja.BeforeAttributeName,this.stateBeforeAttributeName(e))}stateBeforeClosingTagName(e){eo(e)||(e===za.Gt?this.state=Ja.Text:(this.state=this.isTagStartChar(e)?Ja.InClosingTagName:Ja.InSpecialComment,this.sectionStart=this.index))}stateInClosingTagName(e){(e===za.Gt||eo(e))&&(this.cbs.onclosetag(this.sectionStart,this.index),this.sectionStart=-1,this.state=Ja.AfterClosingTagName,this.stateAfterClosingTagName(e))}stateAfterClosingTagName(e){(e===za.Gt||this.fastForwardTo(za.Gt))&&(this.state=Ja.Text,this.sectionStart=this.index+1)}stateBeforeAttributeName(e){e===za.Gt?(this.cbs.onopentagend(this.index),this.isSpecial?(this.state=Ja.InSpecialTag,this.sequenceIndex=0):this.state=Ja.Text,this.sectionStart=this.index+1):e===za.Slash?this.state=Ja.InSelfClosingTag:eo(e)||(this.state=Ja.InAttributeName,this.sectionStart=this.index)}stateInSelfClosingTag(e){e===za.Gt?(this.cbs.onselfclosingtag(this.index),this.state=Ja.Text,this.sectionStart=this.index+1,this.isSpecial=!1):eo(e)||(this.state=Ja.BeforeAttributeName,this.stateBeforeAttributeName(e))}stateInAttributeName(e){(e===za.Eq||to(e))&&(this.cbs.onattribname(this.sectionStart,this.index),this.sectionStart=this.index,this.state=Ja.AfterAttributeName,this.stateAfterAttributeName(e))}stateAfterAttributeName(e){e===za.Eq?this.state=Ja.BeforeAttributeValue:e===za.Slash||e===za.Gt?(this.cbs.onattribend(Za.NoValue,this.sectionStart),this.sectionStart=-1,this.state=Ja.BeforeAttributeName,this.stateBeforeAttributeName(e)):eo(e)||(this.cbs.onattribend(Za.NoValue,this.sectionStart),this.state=Ja.InAttributeName,this.sectionStart=this.index)}stateBeforeAttributeValue(e){e===za.DoubleQuote?(this.state=Ja.InAttributeValueDq,this.sectionStart=this.index+1):e===za.SingleQuote?(this.state=Ja.InAttributeValueSq,this.sectionStart=this.index+1):eo(e)||(this.sectionStart=this.index,this.state=Ja.InAttributeValueNq,this.stateInAttributeValueNoQuotes(e))}handleInAttributeValue(e,t){e===t||!this.decodeEntities&&this.fastForwardTo(t)?(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=-1,this.cbs.onattribend(t===za.DoubleQuote?Za.Double:Za.Single,this.index+1),this.state=Ja.BeforeAttributeName):this.decodeEntities&&e===za.Amp&&this.startEntity()}stateInAttributeValueDoubleQuotes(e){this.handleInAttributeValue(e,za.DoubleQuote)}stateInAttributeValueSingleQuotes(e){this.handleInAttributeValue(e,za.SingleQuote)}stateInAttributeValueNoQuotes(e){eo(e)||e===za.Gt?(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=-1,this.cbs.onattribend(Za.Unquoted,this.index),this.state=Ja.BeforeAttributeName,this.stateBeforeAttributeName(e)):this.decodeEntities&&e===za.Amp&&this.startEntity()}stateBeforeDeclaration(e){e===za.OpeningSquareBracket?(this.state=Ja.CDATASequence,this.sequenceIndex=0):this.state=e===za.Dash?Ja.BeforeComment:Ja.InDeclaration}stateInDeclaration(e){(e===za.Gt||this.fastForwardTo(za.Gt))&&(this.cbs.ondeclaration(this.sectionStart,this.index),this.state=Ja.Text,this.sectionStart=this.index+1)}stateInProcessingInstruction(e){(e===za.Gt||this.fastForwardTo(za.Gt))&&(this.cbs.onprocessinginstruction(this.sectionStart,this.index),this.state=Ja.Text,this.sectionStart=this.index+1)}stateBeforeComment(e){e===za.Dash?(this.state=Ja.InCommentLike,this.currentSequence=no.CommentEnd,this.sequenceIndex=2,this.sectionStart=this.index+1):this.state=Ja.InDeclaration}stateInSpecialComment(e){(e===za.Gt||this.fastForwardTo(za.Gt))&&(this.cbs.oncomment(this.sectionStart,this.index,0),this.state=Ja.Text,this.sectionStart=this.index+1)}stateBeforeSpecialS(e){const t=32|e;t===no.ScriptEnd[3]?this.startSpecial(no.ScriptEnd,4):t===no.StyleEnd[3]?this.startSpecial(no.StyleEnd,4):(this.state=Ja.InTagName,this.stateInTagName(e))}stateBeforeSpecialT(e){const t=32|e;t===no.TitleEnd[3]?this.startSpecial(no.TitleEnd,4):t===no.TextareaEnd[3]?this.startSpecial(no.TextareaEnd,4):(this.state=Ja.InTagName,this.stateInTagName(e))}startEntity(){this.baseState=this.state,this.state=Ja.InEntity,this.entityStart=this.index,this.entityDecoder.startEntity(this.xmlMode?X.Strict:this.baseState===Ja.Text||this.baseState===Ja.InSpecialTag?X.Legacy:X.Attribute)}stateInEntity(){const e=this.entityDecoder.write(this.buffer,this.index-this.offset);e>=0?(this.state=this.baseState,0===e&&(this.index=this.entityStart)):this.index=this.offset+this.buffer.length-1}cleanup(){this.running&&this.sectionStart!==this.index&&(this.state===Ja.Text||this.state===Ja.InSpecialTag&&0===this.sequenceIndex?(this.cbs.ontext(this.sectionStart,this.index),this.sectionStart=this.index):this.state!==Ja.InAttributeValueDq&&this.state!==Ja.InAttributeValueSq&&this.state!==Ja.InAttributeValueNq||(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=this.index))}shouldContinue(){return this.index<this.buffer.length+this.offset&&this.running}parse(){for(;this.shouldContinue();){const e=this.buffer.charCodeAt(this.index-this.offset);switch(this.state){case Ja.Text:this.stateText(e);break;case Ja.SpecialStartSequence:this.stateSpecialStartSequence(e);break;case Ja.InSpecialTag:this.stateInSpecialTag(e);break;case Ja.CDATASequence:this.stateCDATASequence(e);break;case Ja.InAttributeValueDq:this.stateInAttributeValueDoubleQuotes(e);break;case Ja.InAttributeName:this.stateInAttributeName(e);break;case Ja.InCommentLike:this.stateInCommentLike(e);break;case Ja.InSpecialComment:this.stateInSpecialComment(e);break;case Ja.BeforeAttributeName:this.stateBeforeAttributeName(e);break;case Ja.InTagName:this.stateInTagName(e);break;case Ja.InClosingTagName:this.stateInClosingTagName(e);break;case Ja.BeforeTagName:this.stateBeforeTagName(e);break;case Ja.AfterAttributeName:this.stateAfterAttributeName(e);break;case Ja.InAttributeValueSq:this.stateInAttributeValueSingleQuotes(e);break;case Ja.BeforeAttributeValue:this.stateBeforeAttributeValue(e);break;case Ja.BeforeClosingTagName:this.stateBeforeClosingTagName(e);break;case Ja.AfterClosingTagName:this.stateAfterClosingTagName(e);break;case Ja.BeforeSpecialS:this.stateBeforeSpecialS(e);break;case Ja.BeforeSpecialT:this.stateBeforeSpecialT(e);break;case Ja.InAttributeValueNq:this.stateInAttributeValueNoQuotes(e);break;case Ja.InSelfClosingTag:this.stateInSelfClosingTag(e);break;case Ja.InDeclaration:this.stateInDeclaration(e);break;case Ja.BeforeDeclaration:this.stateBeforeDeclaration(e);break;case Ja.BeforeComment:this.stateBeforeComment(e);break;case Ja.InProcessingInstruction:this.stateInProcessingInstruction(e);break;case Ja.InEntity:this.stateInEntity()}this.index++}this.cleanup()}finish(){this.state===Ja.InEntity&&(this.entityDecoder.end(),this.state=this.baseState),this.handleTrailingData(),this.cbs.onend()}handleTrailingData(){const e=this.buffer.length+this.offset;this.sectionStart>=e||(this.state===Ja.InCommentLike?this.currentSequence===no.CdataEnd?this.cbs.oncdata(this.sectionStart,e,0):this.cbs.oncomment(this.sectionStart,e,0):this.state===Ja.InTagName||this.state===Ja.BeforeAttributeName||this.state===Ja.BeforeAttributeValue||this.state===Ja.AfterAttributeName||this.state===Ja.InAttributeName||this.state===Ja.InAttributeValueSq||this.state===Ja.InAttributeValueDq||this.state===Ja.InAttributeValueNq||this.state===Ja.InClosingTagName||this.cbs.ontext(this.sectionStart,e))}emitCodePoint(e,t){this.baseState!==Ja.Text&&this.baseState!==Ja.InSpecialTag?(this.sectionStart<this.entityStart&&this.cbs.onattribdata(this.sectionStart,this.entityStart),this.sectionStart=this.entityStart+t,this.index=this.sectionStart-1,this.cbs.onattribentity(e)):(this.sectionStart<this.entityStart&&this.cbs.ontext(this.sectionStart,this.entityStart),this.sectionStart=this.entityStart+t,this.index=this.sectionStart-1,this.cbs.ontextentity(e,this.sectionStart))}}const so=new Set(["input","option","optgroup","select","button","datalist","textarea"]),io=new Set(["p"]),ao=new Set(["thead","tbody"]),oo=new Set(["dd","dt"]),co=new Set(["rt","rp"]),lo=new Map([["tr",new Set(["tr","th","td"])],["th",new Set(["th"])],["td",new Set(["thead","th","td"])],["body",new Set(["head","link","script"])],["li",new Set(["li"])],["p",io],["h1",io],["h2",io],["h3",io],["h4",io],["h5",io],["h6",io],["select",so],["input",so],["output",so],["button",so],["datalist",so],["textarea",so],["option",new Set(["option"])],["optgroup",new Set(["optgroup","option"])],["dd",oo],["dt",oo],["address",io],["article",io],["aside",io],["blockquote",io],["details",io],["div",io],["dl",io],["fieldset",io],["figcaption",io],["figure",io],["footer",io],["form",io],["header",io],["hr",io],["main",io],["nav",io],["ol",io],["pre",io],["section",io],["table",io],["ul",io],["rt",co],["rp",co],["tbody",ao],["tfoot",ao]]),uo=new Set(["area","base","basefont","br","col","command","embed","frame","hr","img","input","isindex","keygen","link","meta","param","source","track","wbr"]),ho=new Set(["math","svg"]),po=new Set(["mi","mo","mn","ms","mtext","annotation-xml","foreignobject","desc","title"]),fo=/\s|\//;class Eo{constructor(e,t={}){var n,r,s,i,a,o;this.options=t,this.startIndex=0,this.endIndex=0,this.openTagStart=0,this.tagname="",this.attribname="",this.attribvalue="",this.attribs=null,this.stack=[],this.buffers=[],this.bufferOffset=0,this.writeIndex=0,this.ended=!1,this.cbs=null!=e?e:{},this.htmlMode=!this.options.xmlMode,this.lowerCaseTagNames=null!==(n=t.lowerCaseTags)&&void 0!==n?n:this.htmlMode,this.lowerCaseAttributeNames=null!==(r=t.lowerCaseAttributeNames)&&void 0!==r?r:this.htmlMode,this.recognizeSelfClosing=null!==(s=t.recognizeSelfClosing)&&void 0!==s?s:!this.htmlMode,this.tokenizer=new(null!==(i=t.Tokenizer)&&void 0!==i?i:ro)(this.options,this),this.foreignContext=[!this.htmlMode],null===(o=(a=this.cbs).onparserinit)||void 0===o||o.call(a,this)}ontext(e,t){var n,r;const s=this.getSlice(e,t);this.endIndex=t-1,null===(r=(n=this.cbs).ontext)||void 0===r||r.call(n,s),this.startIndex=t}ontextentity(e,t){var n,r;this.endIndex=t-1,null===(r=(n=this.cbs).ontext)||void 0===r||r.call(n,j(e)),this.startIndex=t}isVoidElement(e){return this.htmlMode&&uo.has(e)}onopentagname(e,t){this.endIndex=t;let n=this.getSlice(e,t);this.lowerCaseTagNames&&(n=n.toLowerCase()),this.emitOpenTag(n)}emitOpenTag(e){var t,n,r,s;this.openTagStart=this.startIndex,this.tagname=e;const i=this.htmlMode&&lo.get(e);if(i)for(;this.stack.length>0&&i.has(this.stack[0]);){const e=this.stack.shift();null===(n=(t=this.cbs).onclosetag)||void 0===n||n.call(t,e,!0)}this.isVoidElement(e)||(this.stack.unshift(e),this.htmlMode&&(ho.has(e)?this.foreignContext.unshift(!0):po.has(e)&&this.foreignContext.unshift(!1))),null===(s=(r=this.cbs).onopentagname)||void 0===s||s.call(r,e),this.cbs.onopentag&&(this.attribs={})}endOpenTag(e){var t,n;this.startIndex=this.openTagStart,this.attribs&&(null===(n=(t=this.cbs).onopentag)||void 0===n||n.call(t,this.tagname,this.attribs,e),this.attribs=null),this.cbs.onclosetag&&this.isVoidElement(this.tagname)&&this.cbs.onclosetag(this.tagname,!0),this.tagname=""}onopentagend(e){this.endIndex=e,this.endOpenTag(!1),this.startIndex=e+1}onclosetag(e,t){var n,r,s,i,a,o,c,l;this.endIndex=t;let u=this.getSlice(e,t);if(this.lowerCaseTagNames&&(u=u.toLowerCase()),this.htmlMode&&(ho.has(u)||po.has(u))&&this.foreignContext.shift(),this.isVoidElement(u))this.htmlMode&&"br"===u&&(null===(i=(s=this.cbs).onopentagname)||void 0===i||i.call(s,"br"),null===(o=(a=this.cbs).onopentag)||void 0===o||o.call(a,"br",{},!0),null===(l=(c=this.cbs).onclosetag)||void 0===l||l.call(c,"br",!1));else{const e=this.stack.indexOf(u);if(-1!==e)for(let t=0;t<=e;t++){const s=this.stack.shift();null===(r=(n=this.cbs).onclosetag)||void 0===r||r.call(n,s,t!==e)}else this.htmlMode&&"p"===u&&(this.emitOpenTag("p"),this.closeCurrentTag(!0))}this.startIndex=t+1}onselfclosingtag(e){this.endIndex=e,this.recognizeSelfClosing||this.foreignContext[0]?(this.closeCurrentTag(!1),this.startIndex=e+1):this.onopentagend(e)}closeCurrentTag(e){var t,n;const r=this.tagname;this.endOpenTag(e),this.stack[0]===r&&(null===(n=(t=this.cbs).onclosetag)||void 0===n||n.call(t,r,!e),this.stack.shift())}onattribname(e,t){this.startIndex=e;const n=this.getSlice(e,t);this.attribname=this.lowerCaseAttributeNames?n.toLowerCase():n}onattribdata(e,t){this.attribvalue+=this.getSlice(e,t)}onattribentity(e){this.attribvalue+=j(e)}onattribend(e,t){var n,r;this.endIndex=t,null===(r=(n=this.cbs).onattribute)||void 0===r||r.call(n,this.attribname,this.attribvalue,e===Za.Double?'"':e===Za.Single?"'":e===Za.NoValue?void 0:null),this.attribs&&!Object.prototype.hasOwnProperty.call(this.attribs,this.attribname)&&(this.attribs[this.attribname]=this.attribvalue),this.attribvalue=""}getInstructionName(e){const t=e.search(fo);let n=t<0?e:e.substr(0,t);return this.lowerCaseTagNames&&(n=n.toLowerCase()),n}ondeclaration(e,t){this.endIndex=t;const n=this.getSlice(e,t);if(this.cbs.onprocessinginstruction){const e=this.getInstructionName(n);this.cbs.onprocessinginstruction(`!${e}`,`!${n}`)}this.startIndex=t+1}onprocessinginstruction(e,t){this.endIndex=t;const n=this.getSlice(e,t);if(this.cbs.onprocessinginstruction){const e=this.getInstructionName(n);this.cbs.onprocessinginstruction(`?${e}`,`?${n}`)}this.startIndex=t+1}oncomment(e,t,n){var r,s,i,a;this.endIndex=t,null===(s=(r=this.cbs).oncomment)||void 0===s||s.call(r,this.getSlice(e,t-n)),null===(a=(i=this.cbs).oncommentend)||void 0===a||a.call(i),this.startIndex=t+1}oncdata(e,t,n){var r,s,i,a,o,c,l,u,h,d;this.endIndex=t;const p=this.getSlice(e,t-n);!this.htmlMode||this.options.recognizeCDATA?(null===(s=(r=this.cbs).oncdatastart)||void 0===s||s.call(r),null===(a=(i=this.cbs).ontext)||void 0===a||a.call(i,p),null===(c=(o=this.cbs).oncdataend)||void 0===c||c.call(o)):(null===(u=(l=this.cbs).oncomment)||void 0===u||u.call(l,`[CDATA[${p}]]`),null===(d=(h=this.cbs).oncommentend)||void 0===d||d.call(h)),this.startIndex=t+1}onend(){var e,t;if(this.cbs.onclosetag){this.endIndex=this.startIndex;for(let e=0;e<this.stack.length;e++)this.cbs.onclosetag(this.stack[e],!0)}null===(t=(e=this.cbs).onend)||void 0===t||t.call(e)}reset(){var e,t,n,r;null===(t=(e=this.cbs).onreset)||void 0===t||t.call(e),this.tokenizer.reset(),this.tagname="",this.attribname="",this.attribs=null,this.stack.length=0,this.startIndex=0,this.endIndex=0,null===(r=(n=this.cbs).onparserinit)||void 0===r||r.call(n,this),this.buffers.length=0,this.foreignContext.length=0,this.foreignContext.unshift(!this.htmlMode),this.bufferOffset=0,this.writeIndex=0,this.ended=!1}parseComplete(e){this.reset(),this.end(e)}getSlice(e,t){for(;e-this.bufferOffset>=this.buffers[0].length;)this.shiftBuffer();let n=this.buffers[0].slice(e-this.bufferOffset,t-this.bufferOffset);for(;t-this.bufferOffset>this.buffers[0].length;)this.shiftBuffer(),n+=this.buffers[0].slice(0,t-this.bufferOffset);return n}shiftBuffer(){this.bufferOffset+=this.buffers[0].length,this.writeIndex--,this.buffers.shift()}write(e){var t,n;this.ended?null===(n=(t=this.cbs).onerror)||void 0===n||n.call(t,new Error(".write() after done!")):(this.buffers.push(e),this.tokenizer.running&&(this.tokenizer.write(e),this.writeIndex++))}end(e){var t,n;this.ended?null===(n=(t=this.cbs).onerror)||void 0===n||n.call(t,new Error(".end() after done!")):(e&&this.write(e),this.ended=!0,this.tokenizer.end())}pause(){this.tokenizer.pause()}resume(){for(this.tokenizer.resume();this.tokenizer.running&&this.writeIndex<this.buffers.length;)this.tokenizer.write(this.buffers[this.writeIndex++]);this.ended&&this.tokenizer.end()}parseChunk(e){this.write(e)}done(e){this.end(e)}}const To=(mo=(e,t,n,r)=>t._useHtmlParser2?function(e,t){const n=new H(void 0,t);return new Eo(n,t).end(e),n.root}(e,t):function(e,t,n,r){var s;return null!==(s=t.treeAdapter)&&void 0!==s||(t.treeAdapter=Xa),!1!==t.scriptingEnabled&&(t.scriptingEnabled=!0),n?function(e,t){return Ki.parse(e,t)}(e,t):function(e,t,n){"string"==typeof e&&(n=t,t=e,e=null);const r=Ki.getFragmentParser(e,n);return r.tokenizer.write(t,!0),r.getFragment()}(r,e,t)}(e,t,n,r),function(e,t,n,r){if("undefined"!=typeof Buffer&&Buffer.isBuffer(e)&&(e=e.toString()),"string"==typeof e)return mo(e,t,n,r);const s=e;if(!Array.isArray(s)&&B(s))return s;const i=new y([]);return es(s,i),i});var mo;const Ao=(go=To,function e(t,n,r=!0){if(null==t)throw new Error("cheerio.load() expects a string");const i=Et(n),a=go(t,i,r,null);class o extends Ms{_make(e,t){const n=c(e,t);return n.prevObject=this,n}_parse(e,t,n,r){return go(e,t,n,r)}_render(e){return((e,t)=>t._useHtmlParser2?me(e,t):function(e){const t="length"in e?e:[e];for(let e=0;e<t.length;e+=1){const n=t[e];B(n)&&Array.prototype.splice.call(t,e,1,...n.children)}let n="";for(let e=0;e<t.length;e+=1)n+=Qa(t[e],$a);return n}(e))(e,this.options)}}function c(e,t,n=a,r){if(e&&Dt(e))return e;const s=Et(r,i),c="string"==typeof n?[go(n,s,!1,null)]:"length"in n?n:[n],l=Dt(c)?c:new o(c,null,s);if(l._root=l,!e)return new o(void 0,l,s);const u="string"==typeof e&&Rt(e)?go(e,s,!1,null).children:(h=e).name||"root"===h.type||"text"===h.type||"comment"===h.type?[e]:Array.isArray(e)?e:void 0;var h;const d=new o(u,l,s);if(u)return d;if("string"!=typeof e)throw new TypeError("Unexpected type of selector");let p=e;const f=t?"string"==typeof t?Rt(t)?new o([go(t,s,!1,null)],l,s):(p=`${t} ${p}`,l):Dt(t)?t:new o(Array.isArray(t)?t:[t],l,s):l;return f?f.find(p):d}return Object.assign(c,s,{load:e,_root:a,_options:i,fn:o.prototype,prototype:o.prototype}),c});var go},70:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=n(710),i=r(n(425)),a=n(287);class o{constructor(e,t,n){this.interceptor=e,this.requestTimeout=n??2e4,this.requestsPerSecond=t??2.5}async getDefaultUserAgent(){return""}async schedule(e,t){this.interceptor&&(e=await this.interceptor.interceptRequest(e));let n=e.headers??{},r=e.data;"object"==typeof r&&n["content-type"]?.includes("application/x-www-form-urlencoded")&&(r="",Object.keys(e.data).forEach((t=>{r.length>0&&(r+="&"),r+=`${t}=${e.data[t]}`})));let s=await(0,i.default)(`${e.url}${e.param??""}`,{method:e.method,headers:n,data:r,timeout:this.requestTimeout||0,responseType:"arraybuffer"}),o={rawData:App.createRawData({byteArray:s.data}),data:a.Buffer.from(s.data,"binary").toString(),status:s.status,headers:s.headers,request:e};return this.interceptor&&(o=await this.interceptor.interceptResponse(o)),o}}s.PaperbackPolyfills.createRequestManager=function(e){return new o(e.interceptor,e.requestsPerSecond,e.requestTimeout)}},127:function(e,t,n){"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g&&n.g,e.exports=function(){"use strict";var e,t="3.7.7",n=t,r="function"==typeof Buffer,s="function"==typeof TextDecoder?new TextDecoder:void 0,i="function"==typeof TextEncoder?new TextEncoder:void 0,a=Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="),o=(e={},a.forEach((function(t,n){return e[t]=n})),e),c=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,l=String.fromCharCode.bind(String),u="function"==typeof Uint8Array.from?Uint8Array.from.bind(Uint8Array):function(e){return new Uint8Array(Array.prototype.slice.call(e,0))},h=function(e){return e.replace(/=/g,"").replace(/[+\/]/g,(function(e){return"+"==e?"-":"_"}))},d=function(e){return e.replace(/[^A-Za-z0-9\+\/]/g,"")},p=function(e){for(var t,n,r,s,i="",o=e.length%3,c=0;c<e.length;){if((n=e.charCodeAt(c++))>255||(r=e.charCodeAt(c++))>255||(s=e.charCodeAt(c++))>255)throw new TypeError("invalid character found");i+=a[(t=n<<16|r<<8|s)>>18&63]+a[t>>12&63]+a[t>>6&63]+a[63&t]}return o?i.slice(0,o-3)+"===".substring(o):i},f="function"==typeof btoa?function(e){return btoa(e)}:r?function(e){return Buffer.from(e,"binary").toString("base64")}:p,E=r?function(e){return Buffer.from(e).toString("base64")}:function(e){for(var t=[],n=0,r=e.length;n<r;n+=4096)t.push(l.apply(null,e.subarray(n,n+4096)));return f(t.join(""))},T=function(e,t){return void 0===t&&(t=!1),t?h(E(e)):E(e)},m=function(e){if(e.length<2)return(t=e.charCodeAt(0))<128?e:t<2048?l(192|t>>>6)+l(128|63&t):l(224|t>>>12&15)+l(128|t>>>6&63)+l(128|63&t);var t=65536+1024*(e.charCodeAt(0)-55296)+(e.charCodeAt(1)-56320);return l(240|t>>>18&7)+l(128|t>>>12&63)+l(128|t>>>6&63)+l(128|63&t)},A=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,g=function(e){return e.replace(A,m)},_=r?function(e){return Buffer.from(e,"utf8").toString("base64")}:i?function(e){return E(i.encode(e))}:function(e){return f(g(e))},S=function(e,t){return void 0===t&&(t=!1),t?h(_(e)):_(e)},b=function(e){return S(e,!0)},I=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,N=function(e){switch(e.length){case 4:var t=((7&e.charCodeAt(0))<<18|(63&e.charCodeAt(1))<<12|(63&e.charCodeAt(2))<<6|63&e.charCodeAt(3))-65536;return l(55296+(t>>>10))+l(56320+(1023&t));case 3:return l((15&e.charCodeAt(0))<<12|(63&e.charCodeAt(1))<<6|63&e.charCodeAt(2));default:return l((31&e.charCodeAt(0))<<6|63&e.charCodeAt(1))}},C=function(e){return e.replace(I,N)},D=function(e){if(e=e.replace(/\s+/g,""),!c.test(e))throw new TypeError("malformed base64.");e+="==".slice(2-(3&e.length));for(var t,n,r,s="",i=0;i<e.length;)t=o[e.charAt(i++)]<<18|o[e.charAt(i++)]<<12|(n=o[e.charAt(i++)])<<6|(r=o[e.charAt(i++)]),s+=64===n?l(t>>16&255):64===r?l(t>>16&255,t>>8&255):l(t>>16&255,t>>8&255,255&t);return s},O="function"==typeof atob?function(e){return atob(d(e))}:r?function(e){return Buffer.from(e,"base64").toString("binary")}:D,y=r?function(e){return u(Buffer.from(e,"base64"))}:function(e){return u(O(e).split("").map((function(e){return e.charCodeAt(0)})))},R=function(e){return y(k(e))},L=r?function(e){return Buffer.from(e,"base64").toString("utf8")}:s?function(e){return s.decode(y(e))}:function(e){return C(O(e))},k=function(e){return d(e.replace(/[-_]/g,(function(e){return"-"==e?"+":"/"})))},P=function(e){return L(k(e))},w=function(e){return{value:e,enumerable:!1,writable:!0,configurable:!0}},M=function(){var e=function(e,t){return Object.defineProperty(String.prototype,e,w(t))};e("fromBase64",(function(){return P(this)})),e("toBase64",(function(e){return S(this,e)})),e("toBase64URI",(function(){return S(this,!0)})),e("toBase64URL",(function(){return S(this,!0)})),e("toUint8Array",(function(){return R(this)}))},B=function(){var e=function(e,t){return Object.defineProperty(Uint8Array.prototype,e,w(t))};e("toBase64",(function(e){return T(this,e)})),e("toBase64URI",(function(){return T(this,!0)})),e("toBase64URL",(function(){return T(this,!0)}))},v={version:t,VERSION:n,atob:O,atobPolyfill:D,btoa:f,btoaPolyfill:p,fromBase64:P,toBase64:S,encode:S,encodeURI:b,encodeURL:b,utob:g,btou:C,decode:P,isValid:function(e){if("string"!=typeof e)return!1;var t=e.replace(/\s+/g,"").replace(/={0,2}$/,"");return!/[^\s0-9a-zA-Z\+/]/.test(t)||!/[^\s0-9a-zA-Z\-_]/.test(t)},fromUint8Array:T,toUint8Array:R,extendString:M,extendUint8Array:B,extendBuiltins:function(){M(),B()},Base64:{}};return Object.keys(v).forEach((function(e){return v.Base64[e]=v[e]})),v}()},156:function(e,t,n){"use strict";var r,s=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||(r=function(e){return r=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},r(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=r(e),a=0;a<n.length;a++)"default"!==n[a]&&s(t,e,n[a]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0});const o=n(710);n(550),n(70),n(631),n(422),n(302);const c=a(n(10));globalThis.App=new Proxy(o.PaperbackPolyfills,{get:(e,t)=>e[t]?e[t]:"string"==typeof t&&t.startsWith("create")?e=>e:void 0}),globalThis.cheerio=c},251:(e,t)=>{t.read=function(e,t,n,r,s){var i,a,o=8*s-r-1,c=(1<<o)-1,l=c>>1,u=-7,h=n?s-1:0,d=n?-1:1,p=e[t+h];for(h+=d,i=p&(1<<-u)-1,p>>=-u,u+=o;u>0;i=256*i+e[t+h],h+=d,u-=8);for(a=i&(1<<-u)-1,i>>=-u,u+=r;u>0;a=256*a+e[t+h],h+=d,u-=8);if(0===i)i=1-l;else{if(i===c)return a?NaN:1/0*(p?-1:1);a+=Math.pow(2,r),i-=l}return(p?-1:1)*a*Math.pow(2,i-r)},t.write=function(e,t,n,r,s,i){var a,o,c,l=8*i-s-1,u=(1<<l)-1,h=u>>1,d=23===s?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:i-1,f=r?1:-1,E=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(o=isNaN(t)?1:0,a=u):(a=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-a))<1&&(a--,c*=2),(t+=a+h>=1?d/c:d*Math.pow(2,1-h))*c>=2&&(a++,c/=2),a+h>=u?(o=0,a=u):a+h>=1?(o=(t*c-1)*Math.pow(2,s),a+=h):(o=t*Math.pow(2,h-1)*Math.pow(2,s),a=0));s>=8;e[n+p]=255&o,p+=f,o/=256,s-=8);for(a=a<<s|o,l+=s;l>0;e[n+p]=255&a,p+=f,a/=256,l-=8);e[n+p-f]|=128*E}},264:e=>{e.exports={trueFunc:function(){return!0},falseFunc:function(){return!1}}},287:(e,t,n)=>{"use strict";const r=n(526),s=n(251),i="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;t.Buffer=c,t.SlowBuffer=function(e){return+e!=e&&(e=0),c.alloc(+e)},t.INSPECT_MAX_BYTES=50;const a=2147483647;function o(e){if(e>a)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,c.prototype),t}function c(e,t,n){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return h(e)}return l(e,t,n)}function l(e,t,n){if("string"==typeof e)return function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!c.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const n=0|E(e,t);let r=o(n);const s=r.write(e,t);return s!==n&&(r=r.slice(0,s)),r}(e,t);if(ArrayBuffer.isView(e))return function(e){if(X(e,Uint8Array)){const t=new Uint8Array(e);return p(t.buffer,t.byteOffset,t.byteLength)}return d(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(X(e,ArrayBuffer)||e&&X(e.buffer,ArrayBuffer))return p(e,t,n);if("undefined"!=typeof SharedArrayBuffer&&(X(e,SharedArrayBuffer)||e&&X(e.buffer,SharedArrayBuffer)))return p(e,t,n);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const r=e.valueOf&&e.valueOf();if(null!=r&&r!==e)return c.from(r,t,n);const s=function(e){if(c.isBuffer(e)){const t=0|f(e.length),n=o(t);return 0===n.length||e.copy(n,0,0,t),n}return void 0!==e.length?"number"!=typeof e.length||$(e.length)?o(0):d(e):"Buffer"===e.type&&Array.isArray(e.data)?d(e.data):void 0}(e);if(s)return s;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return c.from(e[Symbol.toPrimitive]("string"),t,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function u(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function h(e){return u(e),o(e<0?0:0|f(e))}function d(e){const t=e.length<0?0:0|f(e.length),n=o(t);for(let r=0;r<t;r+=1)n[r]=255&e[r];return n}function p(e,t,n){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw new RangeError('"length" is outside of buffer bounds');let r;return r=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n),Object.setPrototypeOf(r,c.prototype),r}function f(e){if(e>=a)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a.toString(16)+" bytes");return 0|e}function E(e,t){if(c.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||X(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const n=e.length,r=arguments.length>2&&!0===arguments[2];if(!r&&0===n)return 0;let s=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return Q(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return W(e).length;default:if(s)return r?-1:Q(e).length;t=(""+t).toLowerCase(),s=!0}}function T(e,t,n){let r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return L(this,t,n);case"utf8":case"utf-8":return D(this,t,n);case"ascii":return y(this,t,n);case"latin1":case"binary":return R(this,t,n);case"base64":return C(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function m(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function A(e,t,n,r,s){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),$(n=+n)&&(n=s?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(s)return-1;n=e.length-1}else if(n<0){if(!s)return-1;n=0}if("string"==typeof t&&(t=c.from(t,r)),c.isBuffer(t))return 0===t.length?-1:g(e,t,n,r,s);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?s?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):g(e,[t],n,r,s);throw new TypeError("val must be string, number or Buffer")}function g(e,t,n,r,s){let i,a=1,o=e.length,c=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;a=2,o/=2,c/=2,n/=2}function l(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(s){let r=-1;for(i=n;i<o;i++)if(l(e,i)===l(t,-1===r?0:i-r)){if(-1===r&&(r=i),i-r+1===c)return r*a}else-1!==r&&(i-=i-r),r=-1}else for(n+c>o&&(n=o-c),i=n;i>=0;i--){let n=!0;for(let r=0;r<c;r++)if(l(e,i+r)!==l(t,r)){n=!1;break}if(n)return i}return-1}function _(e,t,n,r){n=Number(n)||0;const s=e.length-n;r?(r=Number(r))>s&&(r=s):r=s;const i=t.length;let a;for(r>i/2&&(r=i/2),a=0;a<r;++a){const r=parseInt(t.substr(2*a,2),16);if($(r))return a;e[n+a]=r}return a}function S(e,t,n,r){return K(Q(t,e.length-n),e,n,r)}function b(e,t,n,r){return K(function(e){const t=[];for(let n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function I(e,t,n,r){return K(W(t),e,n,r)}function N(e,t,n,r){return K(function(e,t){let n,r,s;const i=[];for(let a=0;a<e.length&&!((t-=2)<0);++a)n=e.charCodeAt(a),r=n>>8,s=n%256,i.push(s),i.push(r);return i}(t,e.length-n),e,n,r)}function C(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function D(e,t,n){n=Math.min(e.length,n);const r=[];let s=t;for(;s<n;){const t=e[s];let i=null,a=t>239?4:t>223?3:t>191?2:1;if(s+a<=n){let n,r,o,c;switch(a){case 1:t<128&&(i=t);break;case 2:n=e[s+1],128==(192&n)&&(c=(31&t)<<6|63&n,c>127&&(i=c));break;case 3:n=e[s+1],r=e[s+2],128==(192&n)&&128==(192&r)&&(c=(15&t)<<12|(63&n)<<6|63&r,c>2047&&(c<55296||c>57343)&&(i=c));break;case 4:n=e[s+1],r=e[s+2],o=e[s+3],128==(192&n)&&128==(192&r)&&128==(192&o)&&(c=(15&t)<<18|(63&n)<<12|(63&r)<<6|63&o,c>65535&&c<1114112&&(i=c))}}null===i?(i=65533,a=1):i>65535&&(i-=65536,r.push(i>>>10&1023|55296),i=56320|1023&i),r.push(i),s+=a}return function(e){const t=e.length;if(t<=O)return String.fromCharCode.apply(String,e);let n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=O));return n}(r)}t.kMaxLength=a,c.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),c.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(c.prototype,"parent",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.buffer}}),Object.defineProperty(c.prototype,"offset",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.byteOffset}}),c.poolSize=8192,c.from=function(e,t,n){return l(e,t,n)},Object.setPrototypeOf(c.prototype,Uint8Array.prototype),Object.setPrototypeOf(c,Uint8Array),c.alloc=function(e,t,n){return function(e,t,n){return u(e),e<=0?o(e):void 0!==t?"string"==typeof n?o(e).fill(t,n):o(e).fill(t):o(e)}(e,t,n)},c.allocUnsafe=function(e){return h(e)},c.allocUnsafeSlow=function(e){return h(e)},c.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==c.prototype},c.compare=function(e,t){if(X(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),X(t,Uint8Array)&&(t=c.from(t,t.offset,t.byteLength)),!c.isBuffer(e)||!c.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let n=e.length,r=t.length;for(let s=0,i=Math.min(n,r);s<i;++s)if(e[s]!==t[s]){n=e[s],r=t[s];break}return n<r?-1:r<n?1:0},c.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return c.alloc(0);let n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;const r=c.allocUnsafe(t);let s=0;for(n=0;n<e.length;++n){let t=e[n];if(X(t,Uint8Array))s+t.length>r.length?(c.isBuffer(t)||(t=c.from(t)),t.copy(r,s)):Uint8Array.prototype.set.call(r,t,s);else{if(!c.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(r,s)}s+=t.length}return r},c.byteLength=E,c.prototype._isBuffer=!0,c.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)m(this,t,t+1);return this},c.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)m(this,t,t+3),m(this,t+1,t+2);return this},c.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)m(this,t,t+7),m(this,t+1,t+6),m(this,t+2,t+5),m(this,t+3,t+4);return this},c.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?D(this,0,e):T.apply(this,arguments)},c.prototype.toLocaleString=c.prototype.toString,c.prototype.equals=function(e){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===c.compare(this,e)},c.prototype.inspect=function(){let e="";const n=t.INSPECT_MAX_BYTES;return e=this.toString("hex",0,n).replace(/(.{2})/g,"$1 ").trim(),this.length>n&&(e+=" ... "),"<Buffer "+e+">"},i&&(c.prototype[i]=c.prototype.inspect),c.prototype.compare=function(e,t,n,r,s){if(X(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),!c.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===s&&(s=this.length),t<0||n>e.length||r<0||s>this.length)throw new RangeError("out of range index");if(r>=s&&t>=n)return 0;if(r>=s)return-1;if(t>=n)return 1;if(this===e)return 0;let i=(s>>>=0)-(r>>>=0),a=(n>>>=0)-(t>>>=0);const o=Math.min(i,a),l=this.slice(r,s),u=e.slice(t,n);for(let e=0;e<o;++e)if(l[e]!==u[e]){i=l[e],a=u[e];break}return i<a?-1:a<i?1:0},c.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},c.prototype.indexOf=function(e,t,n){return A(this,e,t,n,!0)},c.prototype.lastIndexOf=function(e,t,n){return A(this,e,t,n,!1)},c.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(n)?(n>>>=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}const s=this.length-t;if((void 0===n||n>s)&&(n=s),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");let i=!1;for(;;)switch(r){case"hex":return _(this,e,t,n);case"utf8":case"utf-8":return S(this,e,t,n);case"ascii":case"latin1":case"binary":return b(this,e,t,n);case"base64":return I(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return N(this,e,t,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const O=4096;function y(e,t,n){let r="";n=Math.min(e.length,n);for(let s=t;s<n;++s)r+=String.fromCharCode(127&e[s]);return r}function R(e,t,n){let r="";n=Math.min(e.length,n);for(let s=t;s<n;++s)r+=String.fromCharCode(e[s]);return r}function L(e,t,n){const r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);let s="";for(let r=t;r<n;++r)s+=z[e[r]];return s}function k(e,t,n){const r=e.slice(t,n);let s="";for(let e=0;e<r.length-1;e+=2)s+=String.fromCharCode(r[e]+256*r[e+1]);return s}function P(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function w(e,t,n,r,s,i){if(!c.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>s||t<i)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function M(e,t,n,r,s){q(t,r,s,e,n,7);let i=Number(t&BigInt(4294967295));e[n++]=i,i>>=8,e[n++]=i,i>>=8,e[n++]=i,i>>=8,e[n++]=i;let a=Number(t>>BigInt(32)&BigInt(4294967295));return e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a,n}function B(e,t,n,r,s){q(t,r,s,e,n,7);let i=Number(t&BigInt(4294967295));e[n+7]=i,i>>=8,e[n+6]=i,i>>=8,e[n+5]=i,i>>=8,e[n+4]=i;let a=Number(t>>BigInt(32)&BigInt(4294967295));return e[n+3]=a,a>>=8,e[n+2]=a,a>>=8,e[n+1]=a,a>>=8,e[n]=a,n+8}function v(e,t,n,r,s,i){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function x(e,t,n,r,i){return t=+t,n>>>=0,i||v(e,0,n,4),s.write(e,t,n,r,23,4),n+4}function U(e,t,n,r,i){return t=+t,n>>>=0,i||v(e,0,n,8),s.write(e,t,n,r,52,8),n+8}c.prototype.slice=function(e,t){const n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e);const r=this.subarray(e,t);return Object.setPrototypeOf(r,c.prototype),r},c.prototype.readUintLE=c.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||P(e,t,this.length);let r=this[e],s=1,i=0;for(;++i<t&&(s*=256);)r+=this[e+i]*s;return r},c.prototype.readUintBE=c.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||P(e,t,this.length);let r=this[e+--t],s=1;for(;t>0&&(s*=256);)r+=this[e+--t]*s;return r},c.prototype.readUint8=c.prototype.readUInt8=function(e,t){return e>>>=0,t||P(e,1,this.length),this[e]},c.prototype.readUint16LE=c.prototype.readUInt16LE=function(e,t){return e>>>=0,t||P(e,2,this.length),this[e]|this[e+1]<<8},c.prototype.readUint16BE=c.prototype.readUInt16BE=function(e,t){return e>>>=0,t||P(e,2,this.length),this[e]<<8|this[e+1]},c.prototype.readUint32LE=c.prototype.readUInt32LE=function(e,t){return e>>>=0,t||P(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},c.prototype.readUint32BE=c.prototype.readUInt32BE=function(e,t){return e>>>=0,t||P(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},c.prototype.readBigUInt64LE=J((function(e){Y(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||V(e,this.length-8);const r=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,s=this[++e]+256*this[++e]+65536*this[++e]+n*2**24;return BigInt(r)+(BigInt(s)<<BigInt(32))})),c.prototype.readBigUInt64BE=J((function(e){Y(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||V(e,this.length-8);const r=t*2**24+65536*this[++e]+256*this[++e]+this[++e],s=this[++e]*2**24+65536*this[++e]+256*this[++e]+n;return(BigInt(r)<<BigInt(32))+BigInt(s)})),c.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||P(e,t,this.length);let r=this[e],s=1,i=0;for(;++i<t&&(s*=256);)r+=this[e+i]*s;return s*=128,r>=s&&(r-=Math.pow(2,8*t)),r},c.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||P(e,t,this.length);let r=t,s=1,i=this[e+--r];for(;r>0&&(s*=256);)i+=this[e+--r]*s;return s*=128,i>=s&&(i-=Math.pow(2,8*t)),i},c.prototype.readInt8=function(e,t){return e>>>=0,t||P(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},c.prototype.readInt16LE=function(e,t){e>>>=0,t||P(e,2,this.length);const n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt16BE=function(e,t){e>>>=0,t||P(e,2,this.length);const n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt32LE=function(e,t){return e>>>=0,t||P(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},c.prototype.readInt32BE=function(e,t){return e>>>=0,t||P(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},c.prototype.readBigInt64LE=J((function(e){Y(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||V(e,this.length-8);const r=this[e+4]+256*this[e+5]+65536*this[e+6]+(n<<24);return(BigInt(r)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),c.prototype.readBigInt64BE=J((function(e){Y(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||V(e,this.length-8);const r=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(r)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+n)})),c.prototype.readFloatLE=function(e,t){return e>>>=0,t||P(e,4,this.length),s.read(this,e,!0,23,4)},c.prototype.readFloatBE=function(e,t){return e>>>=0,t||P(e,4,this.length),s.read(this,e,!1,23,4)},c.prototype.readDoubleLE=function(e,t){return e>>>=0,t||P(e,8,this.length),s.read(this,e,!0,52,8)},c.prototype.readDoubleBE=function(e,t){return e>>>=0,t||P(e,8,this.length),s.read(this,e,!1,52,8)},c.prototype.writeUintLE=c.prototype.writeUIntLE=function(e,t,n,r){e=+e,t>>>=0,n>>>=0,r||w(this,e,t,n,Math.pow(2,8*n)-1,0);let s=1,i=0;for(this[t]=255&e;++i<n&&(s*=256);)this[t+i]=e/s&255;return t+n},c.prototype.writeUintBE=c.prototype.writeUIntBE=function(e,t,n,r){e=+e,t>>>=0,n>>>=0,r||w(this,e,t,n,Math.pow(2,8*n)-1,0);let s=n-1,i=1;for(this[t+s]=255&e;--s>=0&&(i*=256);)this[t+s]=e/i&255;return t+n},c.prototype.writeUint8=c.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||w(this,e,t,1,255,0),this[t]=255&e,t+1},c.prototype.writeUint16LE=c.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||w(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},c.prototype.writeUint16BE=c.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||w(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},c.prototype.writeUint32LE=c.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||w(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},c.prototype.writeUint32BE=c.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||w(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},c.prototype.writeBigUInt64LE=J((function(e,t=0){return M(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeBigUInt64BE=J((function(e,t=0){return B(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t>>>=0,!r){const r=Math.pow(2,8*n-1);w(this,e,t,n,r-1,-r)}let s=0,i=1,a=0;for(this[t]=255&e;++s<n&&(i*=256);)e<0&&0===a&&0!==this[t+s-1]&&(a=1),this[t+s]=(e/i|0)-a&255;return t+n},c.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t>>>=0,!r){const r=Math.pow(2,8*n-1);w(this,e,t,n,r-1,-r)}let s=n-1,i=1,a=0;for(this[t+s]=255&e;--s>=0&&(i*=256);)e<0&&0===a&&0!==this[t+s+1]&&(a=1),this[t+s]=(e/i|0)-a&255;return t+n},c.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||w(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},c.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||w(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},c.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||w(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},c.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||w(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},c.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||w(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},c.prototype.writeBigInt64LE=J((function(e,t=0){return M(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeBigInt64BE=J((function(e,t=0){return B(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeFloatLE=function(e,t,n){return x(this,e,t,!0,n)},c.prototype.writeFloatBE=function(e,t,n){return x(this,e,t,!1,n)},c.prototype.writeDoubleLE=function(e,t,n){return U(this,e,t,!0,n)},c.prototype.writeDoubleBE=function(e,t,n){return U(this,e,t,!1,n)},c.prototype.copy=function(e,t,n,r){if(!c.isBuffer(e))throw new TypeError("argument should be a Buffer");if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);const s=r-n;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,n,r):Uint8Array.prototype.set.call(e,this.subarray(n,r),t),s},c.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!c.isEncoding(r))throw new TypeError("Unknown encoding: "+r);if(1===e.length){const t=e.charCodeAt(0);("utf8"===r&&t<128||"latin1"===r)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;let s;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(s=t;s<n;++s)this[s]=e;else{const i=c.isBuffer(e)?e:c.from(e,r),a=i.length;if(0===a)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(s=0;s<n-t;++s)this[s+t]=i[s%a]}return this};const F={};function H(e,t,n){F[e]=class extends n{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function G(e){let t="",n=e.length;const r="-"===e[0]?1:0;for(;n>=r+4;n-=3)t=`_${e.slice(n-3,n)}${t}`;return`${e.slice(0,n)}${t}`}function q(e,t,n,r,s,i){if(e>n||e<t){const r="bigint"==typeof t?"n":"";let s;throw s=i>3?0===t||t===BigInt(0)?`>= 0${r} and < 2${r} ** ${8*(i+1)}${r}`:`>= -(2${r} ** ${8*(i+1)-1}${r}) and < 2 ** ${8*(i+1)-1}${r}`:`>= ${t}${r} and <= ${n}${r}`,new F.ERR_OUT_OF_RANGE("value",s,e)}!function(e,t,n){Y(t,"offset"),void 0!==e[t]&&void 0!==e[t+n]||V(t,e.length-(n+1))}(r,s,i)}function Y(e,t){if("number"!=typeof e)throw new F.ERR_INVALID_ARG_TYPE(t,"number",e)}function V(e,t,n){if(Math.floor(e)!==e)throw Y(e,n),new F.ERR_OUT_OF_RANGE(n||"offset","an integer",e);if(t<0)throw new F.ERR_BUFFER_OUT_OF_BOUNDS;throw new F.ERR_OUT_OF_RANGE(n||"offset",`>= ${n?1:0} and <= ${t}`,e)}H("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),H("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),H("ERR_OUT_OF_RANGE",(function(e,t,n){let r=`The value of "${e}" is out of range.`,s=n;return Number.isInteger(n)&&Math.abs(n)>2**32?s=G(String(n)):"bigint"==typeof n&&(s=String(n),(n>BigInt(2)**BigInt(32)||n<-(BigInt(2)**BigInt(32)))&&(s=G(s)),s+="n"),r+=` It must be ${t}. Received ${s}`,r}),RangeError);const j=/[^+/0-9A-Za-z-_]/g;function Q(e,t){let n;t=t||1/0;const r=e.length;let s=null;const i=[];for(let a=0;a<r;++a){if(n=e.charCodeAt(a),n>55295&&n<57344){if(!s){if(n>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(a+1===r){(t-=3)>-1&&i.push(239,191,189);continue}s=n;continue}if(n<56320){(t-=3)>-1&&i.push(239,191,189),s=n;continue}n=65536+(s-55296<<10|n-56320)}else s&&(t-=3)>-1&&i.push(239,191,189);if(s=null,n<128){if((t-=1)<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function W(e){return r.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(j,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function K(e,t,n,r){let s;for(s=0;s<r&&!(s+n>=t.length||s>=e.length);++s)t[s+n]=e[s];return s}function X(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function $(e){return e!=e}const z=function(){const e="0123456789abcdef",t=new Array(256);for(let n=0;n<16;++n){const r=16*n;for(let s=0;s<16;++s)t[r+s]=e[n]+e[s]}return t}();function J(e){return"undefined"==typeof BigInt?Z:e}function Z(){throw new Error("BigInt not supported")}},302:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bindingMap=void 0;const r=n(710);function s(e,n){"function"==typeof n?(console.log(`Registering binding ${e} to function ${n.name}`),t.bindingMap[e]=n,console.log(`Successfully saved binding?: ${e in t.bindingMap}`)):(console.log(`Registering DUIBinding ${e}.get and ${e}.set`),t.bindingMap[`${e}.get`]=n.get,t.bindingMap[`${e}.set`]=n.set,console.log(`Successfully saved binding?: ${`${e}.get`in t.bindingMap}`))}async function i(e){switch(e.type){case"DUIButton":return await async function(e){let t=e;return s(t.id,t.onTap),{...t}}(e);case"DUINavigationButton":return await async function(e){let t=e,n=await async function(e){let t=e,n=await t.sections(),r=await Promise.all(n.map((async e=>await a(e))));return{type:t.type,sections:r,hasSubmit:"onSubmit"in t}}(t.form);return"onSubmit"in t.form&&s(t.id,t.form.onSubmit),{type:t.type,id:t.id,label:t.label,form:n}}(e);case"DUISelect":return await async function(e){let t=e,n={};for await(const e of t.options)n[e]=await t.labelResolver(e);return s(t.id,t.value),{...t,labels:n}}(e);case"DUIInputField":case"DUISecureInputField":case"DUISwitch":case"DUIStepper":return await async function(e){let t=e;return s(t.id,t.value),{...t}}(e);case"DUIOAuthButton":return await async function(e){let t=e;return s(t.id,t.successHandler),{...t}}(e);default:return e}}async function a(e){let t=e,n=await t.rows(),r=await Promise.all(n.map((async e=>await i(e))));return{type:"DUISection",id:t.id,header:t.header,footer:t.footer,isHidden:t.isHidden,rows:r}}t.bindingMap={},r.PaperbackPolyfills.createDUISection=function(e){return{type:"DUISection",_rows:e.rows,...e}},r.PaperbackPolyfills.createDUIForm=function(e){return{type:"DUIForm",...e}},r.PaperbackPolyfills.createDUIButton=function(e){return{type:"DUIButton",...e}},r.PaperbackPolyfills.createDUISelect=function(e){return{type:"DUISelect",...e}},r.PaperbackPolyfills.createDUIInputField=function(e){return{type:"DUIInputField",...e}},r.PaperbackPolyfills.createDUISecureInputField=function(e){return{type:"DUISecureInputField",...e}},r.PaperbackPolyfills.createDUINavigationButton=function(e){return{type:"DUINavigationButton",...e}},r.PaperbackPolyfills.createDUISwitch=function(e){return{type:"DUISwitch",...e}},r.PaperbackPolyfills.createDUIStepper=function(e){return{type:"DUIStepper",...e}},r.PaperbackPolyfills.createDUILabel=function(e){return{type:"DUILabel",...e}},r.PaperbackPolyfills.createDUIOAuthButton=function(e){return{type:"DUIOAuthButton",...e}},r.PaperbackPolyfills.createDUIMultilineLabel=function(e){return{type:"DUIMultilineLabel",...e}},r.PaperbackPolyfills.createDUIHeader=function(e){return{type:"DUIHeader",...e}},globalThis.processSourceMenu=async function(e){let t=await(e.getSourceMenu?.());if(void 0!==t)return await a(t);throw Error("No menu")},globalThis.callBinding=async function(e,...n){if(e in t.bindingMap){let r=t.bindingMap[e];return await r(...n)}console.log(`Binding ${e} not found`)}},407:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},422:function(e,t,n){"use strict";var r,s=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||(r=function(e){return r=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},r(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=r(e),a=0;a<n.length;a++)"default"!==n[a]&&s(t,e,n[a]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0});const o=a(n(425)),c=n(127),l=new Set(["user-agent","referer"]);o.default.interceptors.request.use((e=>{var t;return"retried"in e||(e.url=`http://localhost:8527/proxy/${t=e.url+(e.params??""),c.Base64.encode(t,!0)}`),l.forEach((t=>{e.headers instanceof o.AxiosHeaders&&e.headers.delete(t)})),e})),o.default.interceptors.response.use((e=>e),(e=>e.config.retried?Promise.reject(e):(e.config.retried=!0,o.default.request(e.config))))},425:(e,t,n)=>{"use strict";function r(e,t){return function(){return e.apply(t,arguments)}}const{toString:s}=Object.prototype,{getPrototypeOf:i}=Object,a=(o=Object.create(null),e=>{const t=s.call(e);return o[t]||(o[t]=t.slice(8,-1).toLowerCase())});var o;const c=e=>(e=e.toLowerCase(),t=>a(t)===e),l=e=>t=>typeof t===e,{isArray:u}=Array,h=l("undefined"),d=c("ArrayBuffer"),p=l("string"),f=l("function"),E=l("number"),T=e=>null!==e&&"object"==typeof e,m=e=>{if("object"!==a(e))return!1;const t=i(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},A=c("Date"),g=c("File"),_=c("Blob"),S=c("FileList"),b=c("URLSearchParams"),[I,N,C,D]=["ReadableStream","Request","Response","Headers"].map(c);function O(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,s;if("object"!=typeof e&&(e=[e]),u(e))for(r=0,s=e.length;r<s;r++)t.call(null,e[r],r,e);else{const s=n?Object.getOwnPropertyNames(e):Object.keys(e),i=s.length;let a;for(r=0;r<i;r++)a=s[r],t.call(null,e[a],a,e)}}function y(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,s=n.length;for(;s-- >0;)if(r=n[s],t===r.toLowerCase())return r;return null}const R="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:n.g,L=e=>!h(e)&&e!==R,k=(P="undefined"!=typeof Uint8Array&&i(Uint8Array),e=>P&&e instanceof P);var P;const w=c("HTMLFormElement"),M=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),B=c("RegExp"),v=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};O(n,((n,s)=>{let i;!1!==(i=t(n,s,e))&&(r[s]=i||n)})),Object.defineProperties(e,r)},x=c("AsyncFunction"),U=(F="function"==typeof setImmediate,H=f(R.postMessage),F?setImmediate:H?(G=`axios@${Math.random()}`,q=[],R.addEventListener("message",(({source:e,data:t})=>{e===R&&t===G&&q.length&&q.shift()()}),!1),e=>{q.push(e),R.postMessage(G,"*")}):e=>setTimeout(e));var F,H,G,q;const Y="undefined"!=typeof queueMicrotask?queueMicrotask.bind(R):"undefined"!=typeof process&&process.nextTick||U;var V={isArray:u,isArrayBuffer:d,isBuffer:function(e){return null!==e&&!h(e)&&null!==e.constructor&&!h(e.constructor)&&f(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||f(e.append)&&("formdata"===(t=a(e))||"object"===t&&f(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&d(e.buffer),t},isString:p,isNumber:E,isBoolean:e=>!0===e||!1===e,isObject:T,isPlainObject:m,isReadableStream:I,isRequest:N,isResponse:C,isHeaders:D,isUndefined:h,isDate:A,isFile:g,isBlob:_,isRegExp:B,isFunction:f,isStream:e=>T(e)&&f(e.pipe),isURLSearchParams:b,isTypedArray:k,isFileList:S,forEach:O,merge:function e(){const{caseless:t}=L(this)&&this||{},n={},r=(r,s)=>{const i=t&&y(n,s)||s;m(n[i])&&m(r)?n[i]=e(n[i],r):m(r)?n[i]=e({},r):u(r)?n[i]=r.slice():n[i]=r};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&O(arguments[e],r);return n},extend:(e,t,n,{allOwnKeys:s}={})=>(O(t,((t,s)=>{n&&f(t)?e[s]=r(t,n):e[s]=t}),{allOwnKeys:s}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let s,a,o;const c={};if(t=t||{},null==e)return t;do{for(s=Object.getOwnPropertyNames(e),a=s.length;a-- >0;)o=s[a],r&&!r(o,e,t)||c[o]||(t[o]=e[o],c[o]=!0);e=!1!==n&&i(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:a,kindOfTest:c,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if(u(e))return e;let t=e.length;if(!E(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:w,hasOwnProperty:M,hasOwnProp:M,reduceDescriptors:v,freezeMethods:e=>{v(e,((t,n)=>{if(f(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];f(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach((e=>{n[e]=!0}))};return u(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>null!=e&&Number.isFinite(e=+e)?e:t,findKey:y,global:R,isContextDefined:L,isSpecCompliantForm:function(e){return!!(e&&f(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,r)=>{if(T(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[r]=e;const s=u(e)?[]:{};return O(e,((e,t)=>{const i=n(e,r+1);!h(i)&&(s[t]=i)})),t[r]=void 0,s}}return e};return n(e,0)},isAsyncFn:x,isThenable:e=>e&&(T(e)||f(e))&&f(e.then)&&f(e.catch),setImmediate:U,asap:Y};function j(e,t,n,r,s){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),s&&(this.response=s,this.status=s.status?s.status:null)}V.inherits(j,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:V.toJSONObject(this.config),code:this.code,status:this.status}}});const Q=j.prototype,W={};function K(e){return V.isPlainObject(e)||V.isArray(e)}function X(e){return V.endsWith(e,"[]")?e.slice(0,-2):e}function $(e,t,n){return e?e.concat(t).map((function(e,t){return e=X(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{W[e]={value:e}})),Object.defineProperties(j,W),Object.defineProperty(Q,"isAxiosError",{value:!0}),j.from=(e,t,n,r,s,i)=>{const a=Object.create(Q);return V.toFlatObject(e,a,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),j.call(a,e.message,t,n,r,s),a.cause=e,a.name=e.name,i&&Object.assign(a,i),a};const z=V.toFlatObject(V,{},null,(function(e){return/^is[A-Z]/.test(e)}));function J(e,t,n){if(!V.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const r=(n=V.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!V.isUndefined(t[e])}))).metaTokens,s=n.visitor||l,i=n.dots,a=n.indexes,o=(n.Blob||"undefined"!=typeof Blob&&Blob)&&V.isSpecCompliantForm(t);if(!V.isFunction(s))throw new TypeError("visitor must be a function");function c(e){if(null===e)return"";if(V.isDate(e))return e.toISOString();if(!o&&V.isBlob(e))throw new j("Blob is not supported. Use a Buffer instead.");return V.isArrayBuffer(e)||V.isTypedArray(e)?o&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function l(e,n,s){let o=e;if(e&&!s&&"object"==typeof e)if(V.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(V.isArray(e)&&function(e){return V.isArray(e)&&!e.some(K)}(e)||(V.isFileList(e)||V.endsWith(n,"[]"))&&(o=V.toArray(e)))return n=X(n),o.forEach((function(e,r){!V.isUndefined(e)&&null!==e&&t.append(!0===a?$([n],r,i):null===a?n:n+"[]",c(e))})),!1;return!!K(e)||(t.append($(s,n,i),c(e)),!1)}const u=[],h=Object.assign(z,{defaultVisitor:l,convertValue:c,isVisitable:K});if(!V.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!V.isUndefined(n)){if(-1!==u.indexOf(n))throw Error("Circular reference detected in "+r.join("."));u.push(n),V.forEach(n,(function(n,i){!0===(!(V.isUndefined(n)||null===n)&&s.call(t,n,V.isString(i)?i.trim():i,r,h))&&e(n,r?r.concat(i):[i])})),u.pop()}}(e),t}function Z(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function ee(e,t){this._pairs=[],e&&J(e,this,t)}const te=ee.prototype;function ne(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function re(e,t,n){if(!t)return e;const r=n&&n.encode||ne;V.isFunction(n)&&(n={serialize:n});const s=n&&n.serialize;let i;if(i=s?s(t,n):V.isURLSearchParams(t)?t.toString():new ee(t,n).toString(r),i){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}te.append=function(e,t){this._pairs.push([e,t])},te.toString=function(e){const t=e?function(t){return e.call(this,t,Z)}:Z;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};var se=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){V.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},ie={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},ae={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:ee,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]};const oe="undefined"!=typeof window&&"undefined"!=typeof document,ce="object"==typeof navigator&&navigator||void 0,le=oe&&(!ce||["ReactNative","NativeScript","NS"].indexOf(ce.product)<0),ue="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,he=oe&&window.location.href||"http://localhost";var de={...Object.freeze({__proto__:null,hasBrowserEnv:oe,hasStandardBrowserWebWorkerEnv:ue,hasStandardBrowserEnv:le,navigator:ce,origin:he}),...ae};function pe(e){function t(e,n,r,s){let i=e[s++];if("__proto__"===i)return!0;const a=Number.isFinite(+i),o=s>=e.length;return i=!i&&V.isArray(r)?r.length:i,o?(V.hasOwnProp(r,i)?r[i]=[r[i],n]:r[i]=n,!a):(r[i]&&V.isObject(r[i])||(r[i]=[]),t(e,n,r[i],s)&&V.isArray(r[i])&&(r[i]=function(e){const t={},n=Object.keys(e);let r;const s=n.length;let i;for(r=0;r<s;r++)i=n[r],t[i]=e[i];return t}(r[i])),!a)}if(V.isFormData(e)&&V.isFunction(e.entries)){const n={};return V.forEachEntry(e,((e,r)=>{t(function(e){return V.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,n,0)})),n}return null}const fe={transitional:ie,adapter:["xhr","http","fetch"],transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,s=V.isObject(e);if(s&&V.isHTMLForm(e)&&(e=new FormData(e)),V.isFormData(e))return r?JSON.stringify(pe(e)):e;if(V.isArrayBuffer(e)||V.isBuffer(e)||V.isStream(e)||V.isFile(e)||V.isBlob(e)||V.isReadableStream(e))return e;if(V.isArrayBufferView(e))return e.buffer;if(V.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let i;if(s){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return J(e,new de.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return de.isNode&&V.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((i=V.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return J(i?{"files[]":e}:e,t&&new t,this.formSerializer)}}return s||r?(t.setContentType("application/json",!1),function(e){if(V.isString(e))try{return(0,JSON.parse)(e),V.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||fe.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(V.isResponse(e)||V.isReadableStream(e))return e;if(e&&V.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw j.from(e,j.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:de.classes.FormData,Blob:de.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};V.forEach(["delete","get","head","post","put","patch"],(e=>{fe.headers[e]={}}));var Ee=fe;const Te=V.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),me=Symbol("internals");function Ae(e){return e&&String(e).trim().toLowerCase()}function ge(e){return!1===e||null==e?e:V.isArray(e)?e.map(ge):String(e)}function _e(e,t,n,r,s){return V.isFunction(r)?r.call(this,t,n):(s&&(t=n),V.isString(t)?V.isString(r)?-1!==t.indexOf(r):V.isRegExp(r)?r.test(t):void 0:void 0)}class Se{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function s(e,t,n){const s=Ae(t);if(!s)throw new Error("header name must be a non-empty string");const i=V.findKey(r,s);(!i||void 0===r[i]||!0===n||void 0===n&&!1!==r[i])&&(r[i||t]=ge(e))}const i=(e,t)=>V.forEach(e,((e,n)=>s(e,n,t)));if(V.isPlainObject(e)||e instanceof this.constructor)i(e,t);else if(V.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim()))i((e=>{const t={};let n,r,s;return e&&e.split("\n").forEach((function(e){s=e.indexOf(":"),n=e.substring(0,s).trim().toLowerCase(),r=e.substring(s+1).trim(),!n||t[n]&&Te[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t})(e),t);else if(V.isHeaders(e))for(const[t,r]of e.entries())s(r,t,n);else null!=e&&s(t,e,n);return this}get(e,t){if(e=Ae(e)){const n=V.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(V.isFunction(t))return t.call(this,e,n);if(V.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=Ae(e)){const n=V.findKey(this,e);return!(!n||void 0===this[n]||t&&!_e(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function s(e){if(e=Ae(e)){const s=V.findKey(n,e);!s||t&&!_e(0,n[s],s,t)||(delete n[s],r=!0)}}return V.isArray(e)?e.forEach(s):s(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const s=t[n];e&&!_e(0,this[s],s,e,!0)||(delete this[s],r=!0)}return r}normalize(e){const t=this,n={};return V.forEach(this,((r,s)=>{const i=V.findKey(n,s);if(i)return t[i]=ge(r),void delete t[s];const a=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(s):String(s).trim();a!==s&&delete t[s],t[a]=ge(r),n[a]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return V.forEach(this,((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&V.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[me]=this[me]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=Ae(e);t[r]||(function(e,t){const n=V.toCamelCase(" "+t);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+n,{value:function(e,n,s){return this[r].call(this,t,e,n,s)},configurable:!0})}))}(n,e),t[r]=!0)}return V.isArray(e)?e.forEach(r):r(e),this}}Se.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),V.reduceDescriptors(Se.prototype,(({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}})),V.freezeMethods(Se);var be=Se;function Ie(e,t){const n=this||Ee,r=t||n,s=be.from(r.headers);let i=r.data;return V.forEach(e,(function(e){i=e.call(n,i,s.normalize(),t?t.status:void 0)})),s.normalize(),i}function Ne(e){return!(!e||!e.__CANCEL__)}function Ce(e,t,n){j.call(this,null==e?"canceled":e,j.ERR_CANCELED,t,n),this.name="CanceledError"}function De(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new j("Request failed with status code "+n.status,[j.ERR_BAD_REQUEST,j.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}V.inherits(Ce,j,{__CANCEL__:!0});const Oe=(e,t,n=3)=>{let r=0;const s=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let s,i=0,a=0;return t=void 0!==t?t:1e3,function(o){const c=Date.now(),l=r[a];s||(s=c),n[i]=o,r[i]=c;let u=a,h=0;for(;u!==i;)h+=n[u++],u%=e;if(i=(i+1)%e,i===a&&(a=(a+1)%e),c-s<t)return;const d=l&&c-l;return d?Math.round(1e3*h/d):void 0}}(50,250);return function(e,t){let n,r,s=0,i=1e3/t;const a=(t,i=Date.now())=>{s=i,n=null,r&&(clearTimeout(r),r=null),e.apply(null,t)};return[(...e)=>{const t=Date.now(),o=t-s;o>=i?a(e,t):(n=e,r||(r=setTimeout((()=>{r=null,a(n)}),i-o)))},()=>n&&a(n)]}((n=>{const i=n.loaded,a=n.lengthComputable?n.total:void 0,o=i-r,c=s(o);r=i,e({loaded:i,total:a,progress:a?i/a:void 0,bytes:o,rate:c||void 0,estimated:c&&a&&i<=a?(a-i)/c:void 0,event:n,lengthComputable:null!=a,[t?"download":"upload"]:!0})}),n)},ye=(e,t)=>{const n=null!=e;return[r=>t[0]({lengthComputable:n,total:e,loaded:r}),t[1]]},Re=e=>(...t)=>V.asap((()=>e(...t)));var Le=de.hasStandardBrowserEnv?((e,t)=>n=>(n=new URL(n,de.origin),e.protocol===n.protocol&&e.host===n.host&&(t||e.port===n.port)))(new URL(de.origin),de.navigator&&/(msie|trident)/i.test(de.navigator.userAgent)):()=>!0,ke=de.hasStandardBrowserEnv?{write(e,t,n,r,s,i){const a=[e+"="+encodeURIComponent(t)];V.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),V.isString(r)&&a.push("path="+r),V.isString(s)&&a.push("domain="+s),!0===i&&a.push("secure"),document.cookie=a.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function Pe(e,t,n){let r=!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t);return e&&r||0==n?function(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const we=e=>e instanceof be?{...e}:e;function Me(e,t){t=t||{};const n={};function r(e,t,n,r){return V.isPlainObject(e)&&V.isPlainObject(t)?V.merge.call({caseless:r},e,t):V.isPlainObject(t)?V.merge({},t):V.isArray(t)?t.slice():t}function s(e,t,n,s){return V.isUndefined(t)?V.isUndefined(e)?void 0:r(void 0,e,0,s):r(e,t,0,s)}function i(e,t){if(!V.isUndefined(t))return r(void 0,t)}function a(e,t){return V.isUndefined(t)?V.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function o(n,s,i){return i in t?r(n,s):i in e?r(void 0,n):void 0}const c={url:i,method:i,data:i,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,withXSRFToken:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,beforeRedirect:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:o,headers:(e,t,n)=>s(we(e),we(t),0,!0)};return V.forEach(Object.keys(Object.assign({},e,t)),(function(r){const i=c[r]||s,a=i(e[r],t[r],r);V.isUndefined(a)&&i!==o||(n[r]=a)})),n}var Be=e=>{const t=Me({},e);let n,{data:r,withXSRFToken:s,xsrfHeaderName:i,xsrfCookieName:a,headers:o,auth:c}=t;if(t.headers=o=be.from(o),t.url=re(Pe(t.baseURL,t.url),e.params,e.paramsSerializer),c&&o.set("Authorization","Basic "+btoa((c.username||"")+":"+(c.password?unescape(encodeURIComponent(c.password)):""))),V.isFormData(r))if(de.hasStandardBrowserEnv||de.hasStandardBrowserWebWorkerEnv)o.setContentType(void 0);else if(!1!==(n=o.getContentType())){const[e,...t]=n?n.split(";").map((e=>e.trim())).filter(Boolean):[];o.setContentType([e||"multipart/form-data",...t].join("; "))}if(de.hasStandardBrowserEnv&&(s&&V.isFunction(s)&&(s=s(t)),s||!1!==s&&Le(t.url))){const e=i&&a&&ke.read(a);e&&o.set(i,e)}return t},ve="undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){const r=Be(e);let s=r.data;const i=be.from(r.headers).normalize();let a,o,c,l,u,{responseType:h,onUploadProgress:d,onDownloadProgress:p}=r;function f(){l&&l(),u&&u(),r.cancelToken&&r.cancelToken.unsubscribe(a),r.signal&&r.signal.removeEventListener("abort",a)}let E=new XMLHttpRequest;function T(){if(!E)return;const r=be.from("getAllResponseHeaders"in E&&E.getAllResponseHeaders());De((function(e){t(e),f()}),(function(e){n(e),f()}),{data:h&&"text"!==h&&"json"!==h?E.response:E.responseText,status:E.status,statusText:E.statusText,headers:r,config:e,request:E}),E=null}E.open(r.method.toUpperCase(),r.url,!0),E.timeout=r.timeout,"onloadend"in E?E.onloadend=T:E.onreadystatechange=function(){E&&4===E.readyState&&(0!==E.status||E.responseURL&&0===E.responseURL.indexOf("file:"))&&setTimeout(T)},E.onabort=function(){E&&(n(new j("Request aborted",j.ECONNABORTED,e,E)),E=null)},E.onerror=function(){n(new j("Network Error",j.ERR_NETWORK,e,E)),E=null},E.ontimeout=function(){let t=r.timeout?"timeout of "+r.timeout+"ms exceeded":"timeout exceeded";const s=r.transitional||ie;r.timeoutErrorMessage&&(t=r.timeoutErrorMessage),n(new j(t,s.clarifyTimeoutError?j.ETIMEDOUT:j.ECONNABORTED,e,E)),E=null},void 0===s&&i.setContentType(null),"setRequestHeader"in E&&V.forEach(i.toJSON(),(function(e,t){E.setRequestHeader(t,e)})),V.isUndefined(r.withCredentials)||(E.withCredentials=!!r.withCredentials),h&&"json"!==h&&(E.responseType=r.responseType),p&&([c,u]=Oe(p,!0),E.addEventListener("progress",c)),d&&E.upload&&([o,l]=Oe(d),E.upload.addEventListener("progress",o),E.upload.addEventListener("loadend",l)),(r.cancelToken||r.signal)&&(a=t=>{E&&(n(!t||t.type?new Ce(null,e,E):t),E.abort(),E=null)},r.cancelToken&&r.cancelToken.subscribe(a),r.signal&&(r.signal.aborted?a():r.signal.addEventListener("abort",a)));const m=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(r.url);m&&-1===de.protocols.indexOf(m)?n(new j("Unsupported protocol "+m+":",j.ERR_BAD_REQUEST,e)):E.send(s||null)}))},xe=(e,t)=>{const{length:n}=e=e?e.filter(Boolean):[];if(t||n){let n,r=new AbortController;const s=function(e){if(!n){n=!0,a();const t=e instanceof Error?e:this.reason;r.abort(t instanceof j?t:new Ce(t instanceof Error?t.message:t))}};let i=t&&setTimeout((()=>{i=null,s(new j(`timeout ${t} of ms exceeded`,j.ETIMEDOUT))}),t);const a=()=>{e&&(i&&clearTimeout(i),i=null,e.forEach((e=>{e.unsubscribe?e.unsubscribe(s):e.removeEventListener("abort",s)})),e=null)};e.forEach((e=>e.addEventListener("abort",s)));const{signal:o}=r;return o.unsubscribe=()=>V.asap(a),o}};const Ue=function*(e,t){let n=e.byteLength;if(!t||n<t)return void(yield e);let r,s=0;for(;s<n;)r=s+t,yield e.slice(s,r),s=r},Fe=(e,t,n,r)=>{const s=async function*(e,t){for await(const n of async function*(e){if(e[Symbol.asyncIterator])return void(yield*e);const t=e.getReader();try{for(;;){const{done:e,value:n}=await t.read();if(e)break;yield n}}finally{await t.cancel()}}(e))yield*Ue(n,t)}(e,t);let i,a=0,o=e=>{i||(i=!0,r&&r(e))};return new ReadableStream({async pull(e){try{const{done:t,value:r}=await s.next();if(t)return o(),void e.close();let i=r.byteLength;if(n){let e=a+=i;n(e)}e.enqueue(new Uint8Array(r))}catch(e){throw o(e),e}},cancel:e=>(o(e),s.return())},{highWaterMark:2})},He="function"==typeof fetch&&"function"==typeof Request&&"function"==typeof Response,Ge=He&&"function"==typeof ReadableStream,qe=He&&("function"==typeof TextEncoder?(Ye=new TextEncoder,e=>Ye.encode(e)):async e=>new Uint8Array(await new Response(e).arrayBuffer()));var Ye;const Ve=(e,...t)=>{try{return!!e(...t)}catch(e){return!1}},je=Ge&&Ve((()=>{let e=!1;const t=new Request(de.origin,{body:new ReadableStream,method:"POST",get duplex(){return e=!0,"half"}}).headers.has("Content-Type");return e&&!t})),Qe=Ge&&Ve((()=>V.isReadableStream(new Response("").body))),We={stream:Qe&&(e=>e.body)};var Ke;He&&(Ke=new Response,["text","arrayBuffer","blob","formData","stream"].forEach((e=>{!We[e]&&(We[e]=V.isFunction(Ke[e])?t=>t[e]():(t,n)=>{throw new j(`Response type '${e}' is not supported`,j.ERR_NOT_SUPPORT,n)})})));const Xe={http:null,xhr:ve,fetch:He&&(async e=>{let{url:t,method:n,data:r,signal:s,cancelToken:i,timeout:a,onDownloadProgress:o,onUploadProgress:c,responseType:l,headers:u,withCredentials:h="same-origin",fetchOptions:d}=Be(e);l=l?(l+"").toLowerCase():"text";let p,f=xe([s,i&&i.toAbortSignal()],a);const E=f&&f.unsubscribe&&(()=>{f.unsubscribe()});let T;try{if(c&&je&&"get"!==n&&"head"!==n&&0!==(T=await(async(e,t)=>{const n=V.toFiniteNumber(e.getContentLength());return null==n?(async e=>{if(null==e)return 0;if(V.isBlob(e))return e.size;if(V.isSpecCompliantForm(e)){const t=new Request(de.origin,{method:"POST",body:e});return(await t.arrayBuffer()).byteLength}return V.isArrayBufferView(e)||V.isArrayBuffer(e)?e.byteLength:(V.isURLSearchParams(e)&&(e+=""),V.isString(e)?(await qe(e)).byteLength:void 0)})(t):n})(u,r))){let e,n=new Request(t,{method:"POST",body:r,duplex:"half"});if(V.isFormData(r)&&(e=n.headers.get("content-type"))&&u.setContentType(e),n.body){const[e,t]=ye(T,Oe(Re(c)));r=Fe(n.body,65536,e,t)}}V.isString(h)||(h=h?"include":"omit");const s="credentials"in Request.prototype;p=new Request(t,{...d,signal:f,method:n.toUpperCase(),headers:u.normalize().toJSON(),body:r,duplex:"half",credentials:s?h:void 0});let i=await fetch(p);const a=Qe&&("stream"===l||"response"===l);if(Qe&&(o||a&&E)){const e={};["status","statusText","headers"].forEach((t=>{e[t]=i[t]}));const t=V.toFiniteNumber(i.headers.get("content-length")),[n,r]=o&&ye(t,Oe(Re(o),!0))||[];i=new Response(Fe(i.body,65536,n,(()=>{r&&r(),E&&E()})),e)}l=l||"text";let m=await We[V.findKey(We,l)||"text"](i,e);return!a&&E&&E(),await new Promise(((t,n)=>{De(t,n,{data:m,headers:be.from(i.headers),status:i.status,statusText:i.statusText,config:e,request:p})}))}catch(t){if(E&&E(),t&&"TypeError"===t.name&&/fetch/i.test(t.message))throw Object.assign(new j("Network Error",j.ERR_NETWORK,e,p),{cause:t.cause||t});throw j.from(t,t&&t.code,e,p)}})};V.forEach(Xe,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const $e=e=>`- ${e}`,ze=e=>V.isFunction(e)||null===e||!1===e;var Je=e=>{e=V.isArray(e)?e:[e];const{length:t}=e;let n,r;const s={};for(let i=0;i<t;i++){let t;if(n=e[i],r=n,!ze(n)&&(r=Xe[(t=String(n)).toLowerCase()],void 0===r))throw new j(`Unknown adapter '${t}'`);if(r)break;s[t||"#"+i]=r}if(!r){const e=Object.entries(s).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));throw new j("There is no suitable adapter to dispatch the request "+(t?e.length>1?"since :\n"+e.map($e).join("\n"):" "+$e(e[0]):"as no adapter specified"),"ERR_NOT_SUPPORT")}return r};function Ze(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new Ce(null,e)}function et(e){return Ze(e),e.headers=be.from(e.headers),e.data=Ie.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),Je(e.adapter||Ee.adapter)(e).then((function(t){return Ze(e),t.data=Ie.call(e,e.transformResponse,t),t.headers=be.from(t.headers),t}),(function(t){return Ne(t)||(Ze(e),t&&t.response&&(t.response.data=Ie.call(e,e.transformResponse,t.response),t.response.headers=be.from(t.response.headers))),Promise.reject(t)}))}const tt={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{tt[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const nt={};tt.transitional=function(e,t,n){function r(e,t){return"[Axios v1.8.2] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,s,i)=>{if(!1===e)throw new j(r(s," has been removed"+(t?" in "+t:"")),j.ERR_DEPRECATED);return t&&!nt[s]&&(nt[s]=!0,console.warn(r(s," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,s,i)}},tt.spelling=function(e){return(t,n)=>(console.warn(`${n} is likely a misspelling of ${e}`),!0)};var rt={assertOptions:function(e,t,n){if("object"!=typeof e)throw new j("options must be an object",j.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let s=r.length;for(;s-- >0;){const i=r[s],a=t[i];if(a){const t=e[i],n=void 0===t||a(t,i,e);if(!0!==n)throw new j("option "+i+" must be "+n,j.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new j("Unknown option "+i,j.ERR_BAD_OPTION)}},validators:tt};const st=rt.validators;class it{constructor(e){this.defaults=e,this.interceptors={request:new se,response:new se}}async request(e,t){try{return await this._request(e,t)}catch(e){if(e instanceof Error){let t={};Error.captureStackTrace?Error.captureStackTrace(t):t=new Error;const n=t.stack?t.stack.replace(/^.+\n/,""):"";try{e.stack?n&&!String(e.stack).endsWith(n.replace(/^.+\n.+\n/,""))&&(e.stack+="\n"+n):e.stack=n}catch(e){}}throw e}}_request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=Me(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:s}=t;void 0!==n&&rt.assertOptions(n,{silentJSONParsing:st.transitional(st.boolean),forcedJSONParsing:st.transitional(st.boolean),clarifyTimeoutError:st.transitional(st.boolean)},!1),null!=r&&(V.isFunction(r)?t.paramsSerializer={serialize:r}:rt.assertOptions(r,{encode:st.function,serialize:st.function},!0)),void 0!==t.allowAbsoluteUrls||(void 0!==this.defaults.allowAbsoluteUrls?t.allowAbsoluteUrls=this.defaults.allowAbsoluteUrls:t.allowAbsoluteUrls=!0),rt.assertOptions(t,{baseUrl:st.spelling("baseURL"),withXsrfToken:st.spelling("withXSRFToken")},!0),t.method=(t.method||this.defaults.method||"get").toLowerCase();let i=s&&V.merge(s.common,s[t.method]);s&&V.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete s[e]})),t.headers=be.concat(i,s);const a=[];let o=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(o=o&&e.synchronous,a.unshift(e.fulfilled,e.rejected))}));const c=[];let l;this.interceptors.response.forEach((function(e){c.push(e.fulfilled,e.rejected)}));let u,h=0;if(!o){const e=[et.bind(this),void 0];for(e.unshift.apply(e,a),e.push.apply(e,c),u=e.length,l=Promise.resolve(t);h<u;)l=l.then(e[h++],e[h++]);return l}u=a.length;let d=t;for(h=0;h<u;){const e=a[h++],t=a[h++];try{d=e(d)}catch(e){t.call(this,e);break}}try{l=et.call(this,d)}catch(e){return Promise.reject(e)}for(h=0,u=c.length;h<u;)l=l.then(c[h++],c[h++]);return l}getUri(e){return re(Pe((e=Me(this.defaults,e)).baseURL,e.url,e.allowAbsoluteUrls),e.params,e.paramsSerializer)}}V.forEach(["delete","get","head","options"],(function(e){it.prototype[e]=function(t,n){return this.request(Me(n||{},{method:e,url:t,data:(n||{}).data}))}})),V.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,s){return this.request(Me(s||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}it.prototype[e]=t(),it.prototype[e+"Form"]=t(!0)}));var at=it;class ot{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const r=new Promise((e=>{n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,s){n.reason||(n.reason=new Ce(e,r,s),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}toAbortSignal(){const e=new AbortController,t=t=>{e.abort(t)};return this.subscribe(t),e.signal.unsubscribe=()=>this.unsubscribe(t),e.signal}static source(){let e;return{token:new ot((function(t){e=t})),cancel:e}}}var ct=ot;const lt={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(lt).forEach((([e,t])=>{lt[t]=e}));var ut=lt;const ht=function e(t){const n=new at(t),s=r(at.prototype.request,n);return V.extend(s,at.prototype,n,{allOwnKeys:!0}),V.extend(s,n,null,{allOwnKeys:!0}),s.create=function(n){return e(Me(t,n))},s}(Ee);ht.Axios=at,ht.CanceledError=Ce,ht.CancelToken=ct,ht.isCancel=Ne,ht.VERSION="1.8.2",ht.toFormData=J,ht.AxiosError=j,ht.Cancel=ht.CanceledError,ht.all=function(e){return Promise.all(e)},ht.spread=function(e){return function(t){return e.apply(null,t)}},ht.isAxiosError=function(e){return V.isObject(e)&&!0===e.isAxiosError},ht.mergeConfig=Me,ht.AxiosHeaders=be,ht.formToJSON=e=>pe(V.isHTMLForm(e)?new FormData(e):e),ht.getAdapter=Je,ht.HttpStatusCode=ut,ht.default=ht,e.exports=ht},526:(e,t)=>{"use strict";t.byteLength=function(e){var t=o(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){var t,n,i=o(e),a=i[0],c=i[1],l=new s(function(e,t,n){return 3*(t+n)/4-n}(0,a,c)),u=0,h=c>0?a-4:a;for(n=0;n<h;n+=4)t=r[e.charCodeAt(n)]<<18|r[e.charCodeAt(n+1)]<<12|r[e.charCodeAt(n+2)]<<6|r[e.charCodeAt(n+3)],l[u++]=t>>16&255,l[u++]=t>>8&255,l[u++]=255&t;return 2===c&&(t=r[e.charCodeAt(n)]<<2|r[e.charCodeAt(n+1)]>>4,l[u++]=255&t),1===c&&(t=r[e.charCodeAt(n)]<<10|r[e.charCodeAt(n+1)]<<4|r[e.charCodeAt(n+2)]>>2,l[u++]=t>>8&255,l[u++]=255&t),l},t.fromByteArray=function(e){for(var t,r=e.length,s=r%3,i=[],a=16383,o=0,l=r-s;o<l;o+=a)i.push(c(e,o,o+a>l?l:o+a));return 1===s?(t=e[r-1],i.push(n[t>>2]+n[t<<4&63]+"==")):2===s&&(t=(e[r-2]<<8)+e[r-1],i.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"=")),i.join("")};for(var n=[],r=[],s="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0;a<64;++a)n[a]=i[a],r[i.charCodeAt(a)]=a;function o(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function c(e,t,r){for(var s,i,a=[],o=t;o<r;o+=3)s=(e[o]<<16&16711680)+(e[o+1]<<8&65280)+(255&e[o+2]),a.push(n[(i=s)>>18&63]+n[i>>12&63]+n[i>>6&63]+n[63&i]);return a.join("")}r["-".charCodeAt(0)]=62,r["_".charCodeAt(0)]=63},550:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(710);r.PaperbackPolyfills.createByteArray=function(e){return new Uint8Array(e)},r.PaperbackPolyfills.createRawData=function({byteArray:e}){return{...e,length:e.length,toString:function(){var e,t,n,r,s,i;for(e="",n=this.length,t=0;t<n;)switch((r=this[t++])>>4){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:e+=String.fromCharCode(r);break;case 12:case 13:s=this[t++],e+=String.fromCharCode((31&r)<<6|63&s);break;case 14:s=this[t++],i=this[t++],e+=String.fromCharCode((15&r)<<12|(63&s)<<6|63&i)}return e}}}},631:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(710);n(407);class s{constructor(){this.objectStore={}}async store(e,t){"gagaku"in globalThis?(void 0===t&&(t=null),globalThis.gagaku?.callHandler("setState",e,t)):this.objectStore[e]=t}async retrieve(e){return"gagaku"in globalThis?globalThis.gagaku?.callHandler("getState",e):this.objectStore[e]}}class i{constructor(){this.keychain=new s,this.objectStore={}}async store(e,t){"gagaku"in globalThis?(void 0===t&&(t=null),globalThis.gagaku?.callHandler("setState",e,t)):this.objectStore[e]=t}async retrieve(e){return"gagaku"in globalThis?globalThis.gagaku?.callHandler("getState",e):this.objectStore[e]}}r.PaperbackPolyfills.createSourceStateManager=function(){return new i}},710:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PaperbackPolyfills=void 0,t.PaperbackPolyfills={}}},t={};function n(r){var s=t[r];if(void 0!==s)return s.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(156)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'mangadex/model/config.dart';
import 'mangadex/model/model.dart';
import 'model/config.dart';
import 'reader/model/config.dart';
import 'web/model/config.dart';
import 'web/model/types.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 111371867039964082),
    name: 'ExtensionConfig',
    lastPropertyId: const obx_int.IdUid(3, 7984173099377989269),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 702809558348999022),
        name: 'dbid',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5985338773610867635),
        name: 'defaultCategory',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7984173099377989269),
        name: 'categoriesToUpdate',
        type: 30,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 1272000531801260819),
    name: 'ExtensionStateDB',
    lastPropertyId: const obx_int.IdUid(3, 1246967688683176227),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 115932406367781731),
        name: 'dbid',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1875153273166999490),
        name: 'secure',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1246967688683176227),
        name: 'dbState',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 8905727601441002465),
    name: 'GagakuConfig',
    lastPropertyId: const obx_int.IdUid(4, 6453226003670022507),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1559597783665220129),
        name: 'dbid',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2110717126852364305),
        name: 'dbThemeMode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8212265773720154373),
        name: 'dbTheme',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6453226003670022507),
        name: 'dbGridAlbumExtent',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 1731686531402752321),
    name: 'HistoryLink',
    lastPropertyId: const obx_int.IdUid(6, 5672925307293041980),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6301968151465478333),
        name: 'dbid',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8498260008821564787),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5825434813974606690),
        name: 'url',
        type: 9,
        flags: 2080,
        indexId: const obx_int.IdUid(1, 2004028906787386225),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2744254492303125238),
        name: 'cover',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 1795425056450642708),
        name: 'dbHandle',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 5672925307293041980),
        name: 'lastAccessed',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 328409103611464470),
    name: 'MangaDexConfig',
    lastPropertyId: const obx_int.IdUid(6, 7690923916094463004),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5078479494134166421),
        name: 'dbid',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5552028329157906873),
        name: 'dataSaver',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 9047988088348082660),
        name: 'dbTranslatedLanguages',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1319046327165113185),
        name: 'dbOriginalLanguage',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 632580891264039739),
        name: 'dbContentRating',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 7690923916094463004),
        name: 'dbGroupBlacklist',
        type: 30,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 3370728645524358735),
    name: 'MangaDexHistoryDB',
    lastPropertyId: const obx_int.IdUid(2, 434704016439297341),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1440474707735404635),
        name: 'dbid',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 434704016439297341),
        name: 'queue',
        type: 30,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(7, 498247088879987685),
    name: 'ReadMarkersDB',
    lastPropertyId: const obx_int.IdUid(2, 6057485554336798550),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5471831078013833691),
        name: 'dbid',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6057485554336798550),
        name: 'dbMarkers',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(8, 7567026327644554216),
    name: 'ReaderConfig',
    lastPropertyId: const obx_int.IdUid(7, 5687569147950667128),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4967797488300071842),
        name: 'dbid',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7222737130680534089),
        name: 'showProgressBar',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5670763750426433158),
        name: 'clickToTurn',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5346617553991309448),
        name: 'swipeGestures',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 1426230389998423643),
        name: 'precacheCount',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 7812811181229093298),
        name: 'dbFormat',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 5687569147950667128),
        name: 'dbDirection',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(9, 1939789569100104357),
    name: 'RepoInfo',
    lastPropertyId: const obx_int.IdUid(3, 3439045353928553187),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8342235021692432378),
        name: 'dbid',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8648990468587137733),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3439045353928553187),
        name: 'url',
        type: 9,
        flags: 34848,
        indexId: const obx_int.IdUid(4, 7797636678653461826),
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(10, 8266095565985557519),
    name: 'WebFavoritesList',
    lastPropertyId: const obx_int.IdUid(4, 5082996902578126382),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 165971761666034467),
        name: 'dbid',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3870597866393859547),
        name: 'id',
        type: 9,
        flags: 2080,
        indexId: const obx_int.IdUid(2, 2983538901360366658),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4918574492809522315),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5082996902578126382),
        name: 'sortOrder',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(1, 5189061811819065121),
        name: 'list',
        targetId: const obx_int.IdUid(4, 1731686531402752321),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(11, 1274503423913450017),
    name: 'WebSourceInfo',
    lastPropertyId: const obx_int.IdUid(8, 4028296935011566577),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3465719663841848016),
        name: 'dbid',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4575450355582749360),
        name: 'id',
        type: 9,
        flags: 34848,
        indexId: const obx_int.IdUid(3, 973920413218894359),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1178427608296848149),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2897245036507037625),
        name: 'repo',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8000323717328380231),
        name: 'baseUrl',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 3514955494789857955),
        name: 'icon',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 4069525431648659974),
        name: 'dbVersion',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 4028296935011566577),
        name: 'dbCapabilities',
        type: 27,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(11, 1274503423913450017),
    lastIndexId: const obx_int.IdUid(4, 7797636678653461826),
    lastRelationId: const obx_int.IdUid(1, 5189061811819065121),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    ExtensionConfig: obx_int.EntityDefinition<ExtensionConfig>(
      model: _entities[0],
      toOneRelations: (ExtensionConfig object) => [],
      toManyRelations: (ExtensionConfig object) => {},
      getId: (ExtensionConfig object) => object.dbid,
      setId: (ExtensionConfig object, int id) {
        object.dbid = id;
      },
      objectToFB: (ExtensionConfig object, fb.Builder fbb) {
        final defaultCategoryOffset = fbb.writeString(object.defaultCategory);
        final categoriesToUpdateOffset = fbb.writeList(
          object.categoriesToUpdate
              .map(fbb.writeString)
              .toList(growable: false),
        );
        fbb.startTable(4);
        fbb.addInt64(0, object.dbid);
        fbb.addOffset(1, defaultCategoryOffset);
        fbb.addOffset(2, categoriesToUpdateOffset);
        fbb.finish(fbb.endTable());
        return object.dbid;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final dbidParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final defaultCategoryParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final categoriesToUpdateParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 8, []);
        final object = ExtensionConfig(
          dbid: dbidParam,
          defaultCategory: defaultCategoryParam,
          categoriesToUpdate: categoriesToUpdateParam,
        );

        return object;
      },
    ),
    ExtensionStateDB: obx_int.EntityDefinition<ExtensionStateDB>(
      model: _entities[1],
      toOneRelations: (ExtensionStateDB object) => [],
      toManyRelations: (ExtensionStateDB object) => {},
      getId: (ExtensionStateDB object) => object.dbid,
      setId: (ExtensionStateDB object, int id) {
        object.dbid = id;
      },
      objectToFB: (ExtensionStateDB object, fb.Builder fbb) {
        final dbStateOffset = fbb.writeString(object.dbState);
        fbb.startTable(4);
        fbb.addInt64(0, object.dbid);
        fbb.addBool(1, object.secure);
        fbb.addOffset(2, dbStateOffset);
        fbb.finish(fbb.endTable());
        return object.dbid;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final dbidParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final secureParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          6,
          false,
        );
        final object = ExtensionStateDB(dbid: dbidParam, secure: secureParam)
          ..dbState = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 8, '');

        return object;
      },
    ),
    GagakuConfig: obx_int.EntityDefinition<GagakuConfig>(
      model: _entities[2],
      toOneRelations: (GagakuConfig object) => [],
      toManyRelations: (GagakuConfig object) => {},
      getId: (GagakuConfig object) => object.dbid,
      setId: (GagakuConfig object, int id) {
        object.dbid = id;
      },
      objectToFB: (GagakuConfig object, fb.Builder fbb) {
        final dbThemeModeOffset = fbb.writeString(object.dbThemeMode);
        final dbThemeOffset = fbb.writeString(object.dbTheme);
        final dbGridAlbumExtentOffset = fbb.writeString(
          object.dbGridAlbumExtent,
        );
        fbb.startTable(5);
        fbb.addInt64(0, object.dbid);
        fbb.addOffset(1, dbThemeModeOffset);
        fbb.addOffset(2, dbThemeOffset);
        fbb.addOffset(3, dbGridAlbumExtentOffset);
        fbb.finish(fbb.endTable());
        return object.dbid;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final dbidParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final object = GagakuConfig(dbid: dbidParam)
          ..dbThemeMode = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 6, '')
          ..dbTheme = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 8, '')
          ..dbGridAlbumExtent = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 10, '');

        return object;
      },
    ),
    HistoryLink: obx_int.EntityDefinition<HistoryLink>(
      model: _entities[3],
      toOneRelations: (HistoryLink object) => [],
      toManyRelations: (HistoryLink object) => {},
      getId: (HistoryLink object) => object.dbid,
      setId: (HistoryLink object, int id) {
        object.dbid = id;
      },
      objectToFB: (HistoryLink object, fb.Builder fbb) {
        final titleOffset = fbb.writeString(object.title);
        final urlOffset = fbb.writeString(object.url);
        final coverOffset = object.cover == null
            ? null
            : fbb.writeString(object.cover!);
        final dbHandleOffset = object.dbHandle == null
            ? null
            : fbb.writeString(object.dbHandle!);
        fbb.startTable(7);
        fbb.addInt64(0, object.dbid);
        fbb.addOffset(1, titleOffset);
        fbb.addOffset(2, urlOffset);
        fbb.addOffset(3, coverOffset);
        fbb.addOffset(4, dbHandleOffset);
        fbb.addInt64(5, object.lastAccessed?.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.dbid;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final lastAccessedValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          14,
        );
        final dbidParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final urlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final coverParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final lastAccessedParam = lastAccessedValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(lastAccessedValue);
        final object =
            HistoryLink(
                dbid: dbidParam,
                title: titleParam,
                url: urlParam,
                cover: coverParam,
                lastAccessed: lastAccessedParam,
              )
              ..dbHandle = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGetNullable(buffer, rootOffset, 12);

        return object;
      },
    ),
    MangaDexConfig: obx_int.EntityDefinition<MangaDexConfig>(
      model: _entities[4],
      toOneRelations: (MangaDexConfig object) => [],
      toManyRelations: (MangaDexConfig object) => {},
      getId: (MangaDexConfig object) => object.dbid,
      setId: (MangaDexConfig object, int id) {
        object.dbid = id;
      },
      objectToFB: (MangaDexConfig object, fb.Builder fbb) {
        final dbTranslatedLanguagesOffset = fbb.writeList(
          object.dbTranslatedLanguages
              .map(fbb.writeString)
              .toList(growable: false),
        );
        final dbOriginalLanguageOffset = fbb.writeList(
          object.dbOriginalLanguage
              .map(fbb.writeString)
              .toList(growable: false),
        );
        final dbContentRatingOffset = fbb.writeList(
          object.dbContentRating.map(fbb.writeString).toList(growable: false),
        );
        final dbGroupBlacklistOffset = fbb.writeList(
          object.dbGroupBlacklist.map(fbb.writeString).toList(growable: false),
        );
        fbb.startTable(7);
        fbb.addInt64(0, object.dbid);
        fbb.addBool(1, object.dataSaver);
        fbb.addOffset(2, dbTranslatedLanguagesOffset);
        fbb.addOffset(3, dbOriginalLanguageOffset);
        fbb.addOffset(4, dbContentRatingOffset);
        fbb.addOffset(5, dbGroupBlacklistOffset);
        fbb.finish(fbb.endTable());
        return object.dbid;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final dbidParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final dataSaverParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          6,
          false,
        );
        final object =
            MangaDexConfig(dbid: dbidParam, dataSaver: dataSaverParam)
              ..dbTranslatedLanguages = const fb.ListReader<String>(
                fb.StringReader(asciiOptimization: true),
                lazy: false,
              ).vTableGet(buffer, rootOffset, 8, [])
              ..dbOriginalLanguage = const fb.ListReader<String>(
                fb.StringReader(asciiOptimization: true),
                lazy: false,
              ).vTableGet(buffer, rootOffset, 10, [])
              ..dbContentRating = const fb.ListReader<String>(
                fb.StringReader(asciiOptimization: true),
                lazy: false,
              ).vTableGet(buffer, rootOffset, 12, [])
              ..dbGroupBlacklist = const fb.ListReader<String>(
                fb.StringReader(asciiOptimization: true),
                lazy: false,
              ).vTableGet(buffer, rootOffset, 14, []);

        return object;
      },
    ),
    MangaDexHistoryDB: obx_int.EntityDefinition<MangaDexHistoryDB>(
      model: _entities[5],
      toOneRelations: (MangaDexHistoryDB object) => [],
      toManyRelations: (MangaDexHistoryDB object) => {},
      getId: (MangaDexHistoryDB object) => object.dbid,
      setId: (MangaDexHistoryDB object, int id) {
        object.dbid = id;
      },
      objectToFB: (MangaDexHistoryDB object, fb.Builder fbb) {
        final queueOffset = fbb.writeList(
          object.queue.map(fbb.writeString).toList(growable: false),
        );
        fbb.startTable(3);
        fbb.addInt64(0, object.dbid);
        fbb.addOffset(1, queueOffset);
        fbb.finish(fbb.endTable());
        return object.dbid;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final dbidParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final queueParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 6, []);
        final object = MangaDexHistoryDB(dbid: dbidParam, queue: queueParam);

        return object;
      },
    ),
    ReadMarkersDB: obx_int.EntityDefinition<ReadMarkersDB>(
      model: _entities[6],
      toOneRelations: (ReadMarkersDB object) => [],
      toManyRelations: (ReadMarkersDB object) => {},
      getId: (ReadMarkersDB object) => object.dbid,
      setId: (ReadMarkersDB object, int id) {
        object.dbid = id;
      },
      objectToFB: (ReadMarkersDB object, fb.Builder fbb) {
        final dbMarkersOffset = fbb.writeString(object.dbMarkers);
        fbb.startTable(3);
        fbb.addInt64(0, object.dbid);
        fbb.addOffset(1, dbMarkersOffset);
        fbb.finish(fbb.endTable());
        return object.dbid;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final dbidParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final object = ReadMarkersDB(dbid: dbidParam)
          ..dbMarkers = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 6, '');

        return object;
      },
    ),
    ReaderConfig: obx_int.EntityDefinition<ReaderConfig>(
      model: _entities[7],
      toOneRelations: (ReaderConfig object) => [],
      toManyRelations: (ReaderConfig object) => {},
      getId: (ReaderConfig object) => object.dbid,
      setId: (ReaderConfig object, int id) {
        object.dbid = id;
      },
      objectToFB: (ReaderConfig object, fb.Builder fbb) {
        final dbFormatOffset = fbb.writeString(object.dbFormat);
        final dbDirectionOffset = fbb.writeString(object.dbDirection);
        fbb.startTable(8);
        fbb.addInt64(0, object.dbid);
        fbb.addBool(1, object.showProgressBar);
        fbb.addBool(2, object.clickToTurn);
        fbb.addBool(3, object.swipeGestures);
        fbb.addInt64(4, object.precacheCount);
        fbb.addOffset(5, dbFormatOffset);
        fbb.addOffset(6, dbDirectionOffset);
        fbb.finish(fbb.endTable());
        return object.dbid;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final dbidParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final showProgressBarParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          6,
          false,
        );
        final clickToTurnParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          8,
          false,
        );
        final swipeGesturesParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          10,
          false,
        );
        final precacheCountParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final object =
            ReaderConfig(
                dbid: dbidParam,
                showProgressBar: showProgressBarParam,
                clickToTurn: clickToTurnParam,
                swipeGestures: swipeGesturesParam,
                precacheCount: precacheCountParam,
              )
              ..dbFormat = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGet(buffer, rootOffset, 14, '')
              ..dbDirection = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGet(buffer, rootOffset, 16, '');

        return object;
      },
    ),
    RepoInfo: obx_int.EntityDefinition<RepoInfo>(
      model: _entities[8],
      toOneRelations: (RepoInfo object) => [],
      toManyRelations: (RepoInfo object) => {},
      getId: (RepoInfo object) => object.dbid,
      setId: (RepoInfo object, int id) {
        object.dbid = id;
      },
      objectToFB: (RepoInfo object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final urlOffset = fbb.writeString(object.url);
        fbb.startTable(4);
        fbb.addInt64(0, object.dbid);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, urlOffset);
        fbb.finish(fbb.endTable());
        return object.dbid;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final dbidParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final urlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final object = RepoInfo(
          dbid: dbidParam,
          name: nameParam,
          url: urlParam,
        );

        return object;
      },
    ),
    WebFavoritesList: obx_int.EntityDefinition<WebFavoritesList>(
      model: _entities[9],
      toOneRelations: (WebFavoritesList object) => [],
      toManyRelations: (WebFavoritesList object) => {
        obx_int.RelInfo<WebFavoritesList>.toMany(1, object.dbid): object.list,
      },
      getId: (WebFavoritesList object) => object.dbid,
      setId: (WebFavoritesList object, int id) {
        object.dbid = id;
      },
      objectToFB: (WebFavoritesList object, fb.Builder fbb) {
        final idOffset = fbb.writeString(object.id);
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(5);
        fbb.addInt64(0, object.dbid);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, nameOffset);
        fbb.addInt64(3, object.sortOrder);
        fbb.finish(fbb.endTable());
        return object.dbid;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final dbidParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final sortOrderParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final object = WebFavoritesList(
          dbid: dbidParam,
          id: idParam,
          name: nameParam,
          sortOrder: sortOrderParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<WebFavoritesList>(
          object.list,
          store,
          obx_int.RelInfo<WebFavoritesList>.toMany(1, object.dbid),
        );
        return object;
      },
    ),
    WebSourceInfo: obx_int.EntityDefinition<WebSourceInfo>(
      model: _entities[10],
      toOneRelations: (WebSourceInfo object) => [],
      toManyRelations: (WebSourceInfo object) => {},
      getId: (WebSourceInfo object) => object.dbid,
      setId: (WebSourceInfo object, int id) {
        object.dbid = id;
      },
      objectToFB: (WebSourceInfo object, fb.Builder fbb) {
        final idOffset = fbb.writeString(object.id);
        final nameOffset = fbb.writeString(object.name);
        final repoOffset = fbb.writeString(object.repo);
        final baseUrlOffset = object.baseUrl == null
            ? null
            : fbb.writeString(object.baseUrl!);
        final iconOffset = fbb.writeString(object.icon);
        final dbVersionOffset = fbb.writeString(object.dbVersion);
        final dbCapabilitiesOffset = fbb.writeListInt64(object.dbCapabilities);
        fbb.startTable(9);
        fbb.addInt64(0, object.dbid);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, nameOffset);
        fbb.addOffset(3, repoOffset);
        fbb.addOffset(4, baseUrlOffset);
        fbb.addOffset(5, iconOffset);
        fbb.addOffset(6, dbVersionOffset);
        fbb.addOffset(7, dbCapabilitiesOffset);
        fbb.finish(fbb.endTable());
        return object.dbid;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final dbidParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final repoParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final baseUrlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final iconParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final object =
            WebSourceInfo(
                dbid: dbidParam,
                id: idParam,
                name: nameParam,
                repo: repoParam,
                baseUrl: baseUrlParam,
                icon: iconParam,
              )
              ..dbVersion = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGet(buffer, rootOffset, 16, '')
              ..dbCapabilities = const fb.ListReader<int>(
                fb.Int64Reader(),
                lazy: false,
              ).vTableGet(buffer, rootOffset, 18, []);

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ExtensionConfig] entity fields to define ObjectBox queries.
class ExtensionConfig_ {
  /// See [ExtensionConfig.dbid].
  static final dbid = obx.QueryIntegerProperty<ExtensionConfig>(
    _entities[0].properties[0],
  );

  /// See [ExtensionConfig.defaultCategory].
  static final defaultCategory = obx.QueryStringProperty<ExtensionConfig>(
    _entities[0].properties[1],
  );

  /// See [ExtensionConfig.categoriesToUpdate].
  static final categoriesToUpdate =
      obx.QueryStringVectorProperty<ExtensionConfig>(
        _entities[0].properties[2],
      );
}

/// [ExtensionStateDB] entity fields to define ObjectBox queries.
class ExtensionStateDB_ {
  /// See [ExtensionStateDB.dbid].
  static final dbid = obx.QueryIntegerProperty<ExtensionStateDB>(
    _entities[1].properties[0],
  );

  /// See [ExtensionStateDB.secure].
  static final secure = obx.QueryBooleanProperty<ExtensionStateDB>(
    _entities[1].properties[1],
  );

  /// See [ExtensionStateDB.dbState].
  static final dbState = obx.QueryStringProperty<ExtensionStateDB>(
    _entities[1].properties[2],
  );
}

/// [GagakuConfig] entity fields to define ObjectBox queries.
class GagakuConfig_ {
  /// See [GagakuConfig.dbid].
  static final dbid = obx.QueryIntegerProperty<GagakuConfig>(
    _entities[2].properties[0],
  );

  /// See [GagakuConfig.dbThemeMode].
  static final dbThemeMode = obx.QueryStringProperty<GagakuConfig>(
    _entities[2].properties[1],
  );

  /// See [GagakuConfig.dbTheme].
  static final dbTheme = obx.QueryStringProperty<GagakuConfig>(
    _entities[2].properties[2],
  );

  /// See [GagakuConfig.dbGridAlbumExtent].
  static final dbGridAlbumExtent = obx.QueryStringProperty<GagakuConfig>(
    _entities[2].properties[3],
  );
}

/// [HistoryLink] entity fields to define ObjectBox queries.
class HistoryLink_ {
  /// See [HistoryLink.dbid].
  static final dbid = obx.QueryIntegerProperty<HistoryLink>(
    _entities[3].properties[0],
  );

  /// See [HistoryLink.title].
  static final title = obx.QueryStringProperty<HistoryLink>(
    _entities[3].properties[1],
  );

  /// See [HistoryLink.url].
  static final url = obx.QueryStringProperty<HistoryLink>(
    _entities[3].properties[2],
  );

  /// See [HistoryLink.cover].
  static final cover = obx.QueryStringProperty<HistoryLink>(
    _entities[3].properties[3],
  );

  /// See [HistoryLink.dbHandle].
  static final dbHandle = obx.QueryStringProperty<HistoryLink>(
    _entities[3].properties[4],
  );

  /// See [HistoryLink.lastAccessed].
  static final lastAccessed = obx.QueryDateProperty<HistoryLink>(
    _entities[3].properties[5],
  );
}

/// [MangaDexConfig] entity fields to define ObjectBox queries.
class MangaDexConfig_ {
  /// See [MangaDexConfig.dbid].
  static final dbid = obx.QueryIntegerProperty<MangaDexConfig>(
    _entities[4].properties[0],
  );

  /// See [MangaDexConfig.dataSaver].
  static final dataSaver = obx.QueryBooleanProperty<MangaDexConfig>(
    _entities[4].properties[1],
  );

  /// See [MangaDexConfig.dbTranslatedLanguages].
  static final dbTranslatedLanguages =
      obx.QueryStringVectorProperty<MangaDexConfig>(_entities[4].properties[2]);

  /// See [MangaDexConfig.dbOriginalLanguage].
  static final dbOriginalLanguage =
      obx.QueryStringVectorProperty<MangaDexConfig>(_entities[4].properties[3]);

  /// See [MangaDexConfig.dbContentRating].
  static final dbContentRating = obx.QueryStringVectorProperty<MangaDexConfig>(
    _entities[4].properties[4],
  );

  /// See [MangaDexConfig.dbGroupBlacklist].
  static final dbGroupBlacklist = obx.QueryStringVectorProperty<MangaDexConfig>(
    _entities[4].properties[5],
  );
}

/// [MangaDexHistoryDB] entity fields to define ObjectBox queries.
class MangaDexHistoryDB_ {
  /// See [MangaDexHistoryDB.dbid].
  static final dbid = obx.QueryIntegerProperty<MangaDexHistoryDB>(
    _entities[5].properties[0],
  );

  /// See [MangaDexHistoryDB.queue].
  static final queue = obx.QueryStringVectorProperty<MangaDexHistoryDB>(
    _entities[5].properties[1],
  );
}

/// [ReadMarkersDB] entity fields to define ObjectBox queries.
class ReadMarkersDB_ {
  /// See [ReadMarkersDB.dbid].
  static final dbid = obx.QueryIntegerProperty<ReadMarkersDB>(
    _entities[6].properties[0],
  );

  /// See [ReadMarkersDB.dbMarkers].
  static final dbMarkers = obx.QueryStringProperty<ReadMarkersDB>(
    _entities[6].properties[1],
  );
}

/// [ReaderConfig] entity fields to define ObjectBox queries.
class ReaderConfig_ {
  /// See [ReaderConfig.dbid].
  static final dbid = obx.QueryIntegerProperty<ReaderConfig>(
    _entities[7].properties[0],
  );

  /// See [ReaderConfig.showProgressBar].
  static final showProgressBar = obx.QueryBooleanProperty<ReaderConfig>(
    _entities[7].properties[1],
  );

  /// See [ReaderConfig.clickToTurn].
  static final clickToTurn = obx.QueryBooleanProperty<ReaderConfig>(
    _entities[7].properties[2],
  );

  /// See [ReaderConfig.swipeGestures].
  static final swipeGestures = obx.QueryBooleanProperty<ReaderConfig>(
    _entities[7].properties[3],
  );

  /// See [ReaderConfig.precacheCount].
  static final precacheCount = obx.QueryIntegerProperty<ReaderConfig>(
    _entities[7].properties[4],
  );

  /// See [ReaderConfig.dbFormat].
  static final dbFormat = obx.QueryStringProperty<ReaderConfig>(
    _entities[7].properties[5],
  );

  /// See [ReaderConfig.dbDirection].
  static final dbDirection = obx.QueryStringProperty<ReaderConfig>(
    _entities[7].properties[6],
  );
}

/// [RepoInfo] entity fields to define ObjectBox queries.
class RepoInfo_ {
  /// See [RepoInfo.dbid].
  static final dbid = obx.QueryIntegerProperty<RepoInfo>(
    _entities[8].properties[0],
  );

  /// See [RepoInfo.name].
  static final name = obx.QueryStringProperty<RepoInfo>(
    _entities[8].properties[1],
  );

  /// See [RepoInfo.url].
  static final url = obx.QueryStringProperty<RepoInfo>(
    _entities[8].properties[2],
  );
}

/// [WebFavoritesList] entity fields to define ObjectBox queries.
class WebFavoritesList_ {
  /// See [WebFavoritesList.dbid].
  static final dbid = obx.QueryIntegerProperty<WebFavoritesList>(
    _entities[9].properties[0],
  );

  /// See [WebFavoritesList.id].
  static final id = obx.QueryStringProperty<WebFavoritesList>(
    _entities[9].properties[1],
  );

  /// See [WebFavoritesList.name].
  static final name = obx.QueryStringProperty<WebFavoritesList>(
    _entities[9].properties[2],
  );

  /// See [WebFavoritesList.sortOrder].
  static final sortOrder = obx.QueryIntegerProperty<WebFavoritesList>(
    _entities[9].properties[3],
  );

  /// see [WebFavoritesList.list]
  static final list = obx.QueryRelationToMany<WebFavoritesList, HistoryLink>(
    _entities[9].relations[0],
  );
}

/// [WebSourceInfo] entity fields to define ObjectBox queries.
class WebSourceInfo_ {
  /// See [WebSourceInfo.dbid].
  static final dbid = obx.QueryIntegerProperty<WebSourceInfo>(
    _entities[10].properties[0],
  );

  /// See [WebSourceInfo.id].
  static final id = obx.QueryStringProperty<WebSourceInfo>(
    _entities[10].properties[1],
  );

  /// See [WebSourceInfo.name].
  static final name = obx.QueryStringProperty<WebSourceInfo>(
    _entities[10].properties[2],
  );

  /// See [WebSourceInfo.repo].
  static final repo = obx.QueryStringProperty<WebSourceInfo>(
    _entities[10].properties[3],
  );

  /// See [WebSourceInfo.baseUrl].
  static final baseUrl = obx.QueryStringProperty<WebSourceInfo>(
    _entities[10].properties[4],
  );

  /// See [WebSourceInfo.icon].
  static final icon = obx.QueryStringProperty<WebSourceInfo>(
    _entities[10].properties[5],
  );

  /// See [WebSourceInfo.dbVersion].
  static final dbVersion = obx.QueryStringProperty<WebSourceInfo>(
    _entities[10].properties[6],
  );

  /// See [WebSourceInfo.dbCapabilities].
  static final dbCapabilities = obx.QueryIntegerVectorProperty<WebSourceInfo>(
    _entities[10].properties[7],
  );
}
